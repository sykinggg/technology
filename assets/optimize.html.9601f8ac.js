import{a as n}from"./app.b05da4ec.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize" aria-hidden="true">#</a> optimize</h1><p>\u5F53\u7684\u6A21\u677F <code>template</code> \u7ECF\u8FC7 <code>parse</code> \u8FC7\u7A0B\u540E\uFF0C\u4F1A\u8F93\u51FA\u751F\u6210 AST \u6811\uFF0C\u90A3\u4E48\u63A5\u4E0B\u6765\u9700\u8981\u5BF9\u8FD9\u9897\u6811\u505A\u4F18\u5316\uFF0C<code>optimize</code> \u7684\u903B\u8F91\u662F\u8FDC\u7B80\u5355\u4E8E <code>parse</code> \u7684\u903B\u8F91\uFF0C\u6240\u4EE5\u7406\u89E3\u8D77\u6765\u4F1A\u8F7B\u677E\u5F88\u591A\u3002</p><p>\u4E3A\u4EC0\u4E48\u8981\u6709\u4F18\u5316\u8FC7\u7A0B\uFF0C\u56E0\u4E3A\u77E5\u9053 Vue \u662F\u6570\u636E\u9A71\u52A8\uFF0C\u662F\u54CD\u5E94\u5F0F\u7684\uFF0C\u4F46\u662F\u7684\u6A21\u677F\u5E76\u4E0D\u662F\u6240\u6709\u6570\u636E\u90FD\u662F\u54CD\u5E94\u5F0F\u7684\uFF0C\u4E5F\u6709\u5F88\u591A\u6570\u636E\u662F\u9996\u6B21\u6E32\u67D3\u540E\u5C31\u6C38\u8FDC\u4E0D\u4F1A\u53D8\u5316\u7684\uFF0C\u90A3\u4E48\u8FD9\u90E8\u5206\u6570\u636E\u751F\u6210\u7684 DOM \u4E5F\u4E0D\u4F1A\u53D8\u5316\uFF0C\u53EF\u4EE5\u5728 <code>patch</code> \u7684\u8FC7\u7A0B\u8DF3\u8FC7\u5BF9\u4ED6\u4EEC\u7684\u6BD4\u5BF9\u3002</p><p>\u6765\u770B\u4E00\u4E0B <code>optimize</code> \u65B9\u6CD5\u7684\u5B9A\u4E49\uFF0C\u5728 <code>src/compiler/optimizer.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">optimize</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token operator">?</span>ASTElement<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> CompilerOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>
  isStaticKey <span class="token operator">=</span> <span class="token function">genStaticKeysCached</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>staticKeys <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  isPlatformReservedTag <span class="token operator">=</span> options<span class="token punctuation">.</span>isReservedTag <span class="token operator">||</span> no
  <span class="token comment">// first pass: mark all non-static nodes.</span>
  <span class="token function">markStatic</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
  <span class="token comment">// second pass: mark static roots.</span>
  <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genStaticKeys</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">keys</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>
    <span class="token string">&#39;type,tag,attrsList,attrsMap,plain,parent,children,attrs&#39;</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span>keys <span class="token operator">?</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> keys <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>\u5728\u7F16\u8BD1\u9636\u6BB5\u53EF\u4EE5\u628A\u4E00\u4E9B AST \u8282\u70B9\u4F18\u5316\u6210\u9759\u6001\u8282\u70B9\uFF0C\u6240\u4EE5\u6574\u4E2A <code>optimize</code> \u7684\u8FC7\u7A0B\u5B9E\u9645\u4E0A\u5C31\u5E72 2 \u4EF6\u4E8B\u60C5\uFF0C<code>markStatic(root)</code> \u6807\u8BB0\u9759\u6001\u8282\u70B9 \uFF0C<code>markStaticRoots(root, false)</code> \u6807\u8BB0\u9759\u6001\u6839\u3002</p><h2 id="\u6807\u8BB0\u9759\u6001\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u6807\u8BB0\u9759\u6001\u8282\u70B9" aria-hidden="true">#</a> \u6807\u8BB0\u9759\u6001\u8282\u70B9</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">markStatic</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> ASTNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token function">isStatic</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do not make component slot content static. this avoids</span>
    <span class="token comment">// 1. components not able to mutate slot nodes</span>
    <span class="token comment">// 2. static slot content fails for hot-reloading</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token operator">!</span><span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      node<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;slot&#39;</span> <span class="token operator">&amp;&amp;</span>
      node<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;inline-template&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token function">markStatic</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>static<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> block <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>block
        <span class="token function">markStatic</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">.</span>static<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isStatic</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> ASTNode</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// expression</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// text</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>pre <span class="token operator">||</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span>node<span class="token punctuation">.</span>hasBindings <span class="token operator">&amp;&amp;</span> <span class="token comment">// no dynamic bindings</span>
    <span class="token operator">!</span>node<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span> <span class="token comment">// not v-if or v-for or v-else</span>
    <span class="token operator">!</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// not a built-in</span>
    <span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// not a component</span>
    <span class="token operator">!</span><span class="token function">isDirectChildOfTemplateFor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isStaticKey<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>\u9996\u5148\u6267\u884C <code>node.static = isStatic(node)</code></p><p><code>isStatic</code> \u662F\u5BF9\u4E00\u4E2A AST \u5143\u7D20\u8282\u70B9\u662F\u5426\u662F\u9759\u6001\u7684\u5224\u65AD\uFF0C\u5982\u679C\u662F\u8868\u8FBE\u5F0F\uFF0C\u5C31\u662F\u975E\u9759\u6001\uFF1B\u5982\u679C\u662F\u7EAF\u6587\u672C\uFF0C\u5C31\u662F\u9759\u6001\uFF1B\u5BF9\u4E8E\u4E00\u4E2A\u666E\u901A\u5143\u7D20\uFF0C\u5982\u679C\u6709 pre \u5C5E\u6027\uFF0C\u90A3\u4E48\u5B83\u4F7F\u7528\u4E86 <code>v-pre</code> \u6307\u4EE4\uFF0C\u662F\u9759\u6001\uFF0C\u5426\u5219\u8981\u540C\u65F6\u6EE1\u8DB3\u4EE5\u4E0B\u6761\u4EF6\uFF1A\u6CA1\u6709\u4F7F\u7528 <code>v-if</code>\u3001<code>v-for</code>\uFF0C\u6CA1\u6709\u4F7F\u7528\u5176\u5B83\u6307\u4EE4\uFF08\u4E0D\u5305\u62EC <code>v-once</code>\uFF09\uFF0C\u975E\u5185\u7F6E\u7EC4\u4EF6\uFF0C\u662F\u5E73\u53F0\u4FDD\u7559\u7684\u6807\u7B7E\uFF0C\u975E\u5E26\u6709 <code>v-for</code> \u7684 <code>template</code> \u6807\u7B7E\u7684\u76F4\u63A5\u5B50\u8282\u70B9\uFF0C\u8282\u70B9\u7684\u6240\u6709\u5C5E\u6027\u7684 <code>key</code> \u90FD\u6EE1\u8DB3\u9759\u6001 key\uFF1B\u8FD9\u4E9B\u90FD\u6EE1\u8DB3\u5219\u8FD9\u4E2A AST \u8282\u70B9\u662F\u4E00\u4E2A\u9759\u6001\u8282\u70B9\u3002</p><p>\u5982\u679C\u8FD9\u4E2A\u8282\u70B9\u662F\u4E00\u4E2A\u666E\u901A\u5143\u7D20\uFF0C\u5219\u904D\u5386\u5B83\u7684\u6240\u6709 <code>children</code>\uFF0C\u9012\u5F52\u6267\u884C <code>markStatic</code>\u3002\u56E0\u4E3A\u6240\u6709\u7684 <code>elseif</code> \u548C <code>else</code> \u8282\u70B9\u90FD\u4E0D\u5728 <code>children</code> \u4E2D\uFF0C \u5982\u679C\u8282\u70B9\u7684 <code>ifConditions</code> \u4E0D\u4E3A\u7A7A\uFF0C\u5219\u904D\u5386 <code>ifConditions</code> \u62FF\u5230\u6240\u6709\u6761\u4EF6\u4E2D\u7684 <code>block</code>\uFF0C\u4E5F\u5C31\u662F\u5B83\u4EEC\u5BF9\u5E94\u7684 AST \u8282\u70B9\uFF0C\u9012\u5F52\u6267\u884C <code>markStatic</code>\u3002\u5728\u8FD9\u4E9B\u9012\u5F52\u8FC7\u7A0B\u4E2D\uFF0C\u4E00\u65E6\u5B50\u8282\u70B9\u6709\u4E0D\u662F <code>static</code> \u7684\u60C5\u51B5\uFF0C\u5219\u5B83\u7684\u7236\u8282\u70B9\u7684 <code>static</code> \u5747\u53D8\u6210 false\u3002</p><h2 id="\u6807\u8BB0\u9759\u6001\u6839" tabindex="-1"><a class="header-anchor" href="#\u6807\u8BB0\u9759\u6001\u6839" aria-hidden="true">#</a> \u6807\u8BB0\u9759\u6001\u6839</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">markStaticRoots</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> ASTNode<span class="token punctuation">,</span> <span class="token literal-property property">isInFor</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>static <span class="token operator">||</span> node<span class="token punctuation">.</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>staticInFor <span class="token operator">=</span> isInFor
    <span class="token punctuation">}</span>
    <span class="token comment">// For a node to qualify as a static root, it should have children that</span>
    <span class="token comment">// are not just static text. Otherwise the cost of hoisting out will</span>
    <span class="token comment">// outweigh the benefits and it&#39;s better off to just always render it fresh.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>static <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>
      node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
      node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isInFor <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span>node<span class="token punctuation">.</span>for<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>block<span class="token punctuation">,</span> isInFor<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><code>markStaticRoots</code> \u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F <code>isInFor</code>\uFF0C\u5BF9\u4E8E\u5DF2\u7ECF\u662F <code>static</code> \u7684\u8282\u70B9\u6216\u8005\u662F <code>v-once</code> \u6307\u4EE4\u7684\u8282\u70B9\uFF0C<code>node.staticInFor = isInFor</code>\u3002 \u63A5\u7740\u5C31\u662F\u5BF9\u4E8E <code>staticRoot</code> \u7684\u5224\u65AD\u903B\u8F91\uFF0C\u4ECE\u6CE8\u91CA\u4E2D\u53EF\u4EE5\u770B\u5230\uFF0C\u5BF9\u4E8E\u6709\u8D44\u683C\u6210\u4E3A <code>staticRoot</code> \u7684\u8282\u70B9\uFF0C\u9664\u4E86\u672C\u8EAB\u662F\u4E00\u4E2A\u9759\u6001\u8282\u70B9\u5916\uFF0C\u5FC5\u987B\u6EE1\u8DB3\u62E5\u6709 <code>children</code>\uFF0C\u5E76\u4E14 <code>children</code> \u4E0D\u80FD\u53EA\u662F\u4E00\u4E2A\u6587\u672C\u8282\u70B9\uFF0C\u4E0D\u7136\u7684\u8BDD\u628A\u5B83\u6807\u8BB0\u6210\u9759\u6001\u6839\u8282\u70B9\u7684\u6536\u76CA\u5C31\u5F88\u5C0F\u4E86\u3002</p><p>\u63A5\u4E0B\u6765\u548C\u6807\u8BB0\u9759\u6001\u8282\u70B9\u7684\u903B\u8F91\u4E00\u6837\uFF0C\u904D\u5386 <code>children</code> \u4EE5\u53CA <code>ifConditions</code>\uFF0C\u9012\u5F52\u6267\u884C <code>markStaticRoots</code>\u3002</p><p>\u56DE\u5F52\u4E4B\u524D\u7684\u4F8B\u5B50\uFF0C\u7ECF\u8FC7 <code>optimize</code> \u540E\uFF0CAST \u6811\u53D8\u6210\u4E86\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ast <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;tag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;attrsList&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;attrsMap&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;:class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bindCls&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;v-if&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;if&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ifConditions&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;exp&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;block&#39;</span><span class="token operator">:</span> <span class="token comment">// ul ast element</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;parent&#39;</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;plain&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;staticClass&#39;</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;classBinding&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bindCls&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;static&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;staticRoot&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;tag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;attrsList&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@click&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;attrsMap&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@click&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;v-for&#39;</span><span class="token operator">:</span> <span class="token string">&#39;(item,index) in data&#39;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;parent&#39;</span><span class="token operator">:</span> <span class="token comment">// ul ast element</span>
    <span class="token string-property property">&#39;plain&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;events&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;click&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;hasBindings&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;for&#39;</span><span class="token operator">:</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;alias&#39;</span><span class="token operator">:</span> <span class="token string">&#39;item&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;iterator1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;static&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;staticRoot&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;expression&#39;</span><span class="token operator">:</span> <span class="token string">&#39;_s(item)+&quot;:&quot;+_s(index)&#39;</span>
      <span class="token string-property property">&#39;text&#39;</span><span class="token operator">:</span> <span class="token string">&#39;{{item}}:{{index}}&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;tokens&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&#39;:&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;static&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><p>\u53D1\u73B0\u6BCF\u4E00\u4E2A AST \u5143\u7D20\u8282\u70B9\u90FD\u591A\u4E86 <code>staic</code> \u5C5E\u6027\uFF0C\u5E76\u4E14 <code>type</code> \u4E3A 1 \u7684\u666E\u901A\u5143\u7D20 AST \u8282\u70B9\u591A\u4E86 <code>staticRoot</code> \u5C5E\u6027\u3002</p><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u90A3\u4E48\u81F3\u6B64\u5206\u6790\u5B8C\u4E86 <code>optimize</code> \u7684\u8FC7\u7A0B\uFF0C\u5C31\u662F\u6DF1\u5EA6\u904D\u5386\u8FD9\u4E2A AST \u6811\uFF0C\u53BB\u68C0\u6D4B\u5B83\u7684\u6BCF\u4E00\u9897\u5B50\u6811\u662F\u4E0D\u662F\u9759\u6001\u8282\u70B9\uFF0C\u5982\u679C\u662F\u9759\u6001\u8282\u70B9\u5219\u5B83\u4EEC\u751F\u6210 DOM \u6C38\u8FDC\u4E0D\u9700\u8981\u6539\u53D8\uFF0C\u8FD9\u5BF9\u8FD0\u884C\u65F6\u5BF9\u6A21\u677F\u7684\u66F4\u65B0\u8D77\u5230\u6781\u5927\u7684\u4F18\u5316\u4F5C\u7528\u3002</p><p>\u901A\u8FC7 <code>optimize</code> \u628A\u6574\u4E2A AST \u6811\u4E2D\u7684\u6BCF\u4E00\u4E2A AST \u5143\u7D20\u8282\u70B9\u6807\u8BB0\u4E86 <code>static</code> \u548C <code>staticRoot</code>\uFF0C\u5B83\u4F1A\u5F71\u54CD\u63A5\u4E0B\u6765\u6267\u884C\u4EE3\u7801\u751F\u6210\u7684\u8FC7\u7A0B\u3002</p>`,21);function t(e,o){return p}var l=s(a,[["render",t]]);export{l as default};
