import{a as n}from"./app.ee3fc36b.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="props-v2-6-11" tabindex="-1"><a class="header-anchor" href="#props-v2-6-11" aria-hidden="true">#</a> Props (v2.6.11)</h1><p><code>Props</code> \u4F5C\u4E3A\u7EC4\u4EF6\u7684\u6838\u5FC3\u7279\u6027\u4E4B\u4E00\uFF0C\u4E5F\u662F\u5E73\u65F6\u5F00\u53D1 Vue \u9879\u76EE\u4E2D\u63A5\u89E6\u6700\u591A\u7684\u7279\u6027\u4E4B\u4E00\uFF0C\u5B83\u53EF\u4EE5\u8BA9\u7EC4\u4EF6\u7684\u529F\u80FD\u53D8\u5F97\u4E30\u5BCC\uFF0C\u4E5F\u662F\u7236\u5B50\u7EC4\u4EF6\u901A\u8BAF\u7684\u4E00\u4E2A\u6E20\u9053\u3002\u90A3\u4E48\u5B83\u7684\u5B9E\u73B0\u539F\u7406\u662F\u600E\u6837\u7684\uFF0C\u6765\u4E00\u63A2\u7A76\u7ADF\u3002</p><h2 id="\u89C4\u8303\u5316" tabindex="-1"><a class="header-anchor" href="#\u89C4\u8303\u5316" aria-hidden="true">#</a> \u89C4\u8303\u5316</h2><p>\u5728\u521D\u59CB\u5316 <code>props</code> \u4E4B\u524D\uFF0C\u9996\u5148\u4F1A\u5BF9 <code>props</code> \u505A\u4E00\u6B21 <code>normalize</code>\uFF0C\u5B83\u53D1\u751F\u5728 <code>mergeOptions</code> \u7684\u65F6\u5019\uFF0C\u5728 <code>src/core/util/options.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mergeOptions</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">parent</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
  <span class="token literal-property property">child</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
  vm<span class="token operator">?</span><span class="token operator">:</span> Component</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Object <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">normalizeProps</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">normalizeProps</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">options</span><span class="token operator">:</span> Object<span class="token punctuation">,</span> <span class="token literal-property property">vm</span><span class="token operator">:</span> <span class="token operator">?</span>Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> options<span class="token punctuation">.</span>props
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">let</span> i<span class="token punctuation">,</span> val<span class="token punctuation">,</span> name
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> props<span class="token punctuation">.</span>length
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      val <span class="token operator">=</span> props<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        res<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;props must be strings when using array syntax.&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      val <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      name <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      res<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token operator">?</span> val
        <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> val <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid value for option &quot;props&quot;: expected an Array or an Object, </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">but got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">toRawType</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      vm
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  options<span class="token punctuation">.</span>props <span class="token operator">=</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>\u5408\u5E76\u914D\u7F6E\u5728\u7EC4\u4EF6\u5316\u7AE0\u8282\u8BB2\u8FC7\uFF0C\u5B83\u4E3B\u8981\u5C31\u662F\u5904\u7406\u5B9A\u4E49\u7EC4\u4EF6\u7684\u5BF9\u8C61 <code>option</code>\uFF0C\u7136\u540E\u6302\u8F7D\u5230\u7EC4\u4EF6\u7684\u5B9E\u4F8B <code>this.$options</code> \u4E2D\u3002</p><p>\u63A5\u4E0B\u6765\u91CD\u70B9\u770B <code>normalizeProps</code> \u7684\u5B9E\u73B0\uFF0C\u5176\u5B9E\u8FD9\u4E2A\u51FD\u6570\u7684\u4E3B\u8981\u76EE\u7684\u5C31\u662F\u628A\u7F16\u5199\u7684 <code>props</code> \u8F6C\u6210\u5BF9\u8C61\u683C\u5F0F\uFF0C\u56E0\u4E3A\u5B9E\u9645\u4E0A <code>props</code> \u9664\u4E86\u5BF9\u8C61\u683C\u5F0F\uFF0C\u8FD8\u5141\u8BB8\u5199\u6210\u6570\u7EC4\u683C\u5F0F\u3002</p><p>\u5F53 <code>props</code> \u662F\u4E00\u4E2A\u6570\u7EC4\uFF0C\u6BCF\u4E00\u4E2A\u6570\u7EC4\u5143\u7D20 <code>prop</code> \u53EA\u80FD\u662F\u4E00\u4E2A <code>string</code>\uFF0C\u8868\u793A <code>prop</code> \u7684 <code>key</code>\uFF0C\u8F6C\u6210\u9A7C\u5CF0\u683C\u5F0F\uFF0C<code>prop</code> \u7684\u7C7B\u578B\u4E3A\u7A7A\u3002</p><p>\u5F53 <code>props</code> \u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5BF9\u4E8E <code>props</code> \u4E2D\u6BCF\u4E2A <code>prop</code> \u7684 <code>key</code>\uFF0C\u4F1A\u8F6C\u9A7C\u5CF0\u683C\u5F0F\uFF0C\u800C\u5B83\u7684 <code>value</code>\uFF0C\u5982\u679C\u4E0D\u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5C31\u628A\u5B83\u89C4\u8303\u6210\u4E00\u4E2A\u5BF9\u8C61\u3002</p><p>\u5982\u679C <code>props</code> \u65E2\u4E0D\u662F\u6570\u7EC4\u4E5F\u4E0D\u662F\u5BF9\u8C61\uFF0C\u5C31\u629B\u51FA\u4E00\u4E2A\u8B66\u544A\u3002</p><p>\u4E3E\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nick-name&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u7ECF\u8FC7 <code>normalizeProps</code> \u540E\uFF0C\u4F1A\u88AB\u89C4\u8303\u6210\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>options<span class="token punctuation">.</span>props <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nickName</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">nickName</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u7ECF\u8FC7 <code>normalizeProps</code> \u540E\uFF0C\u4F1A\u88AB\u89C4\u8303\u6210\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>options<span class="token punctuation">.</span>props <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nickName</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u7531\u4E8E\u5BF9\u8C61\u5F62\u5F0F\u7684 <code>props</code> \u53EF\u4EE5\u6307\u5B9A\u6BCF\u4E2A <code>prop</code> \u7684\u7C7B\u578B\u548C\u5B9A\u4E49\u5176\u5B83\u7684\u4E00\u4E9B\u5C5E\u6027\uFF0C\u63A8\u8350\u7528\u5BF9\u8C61\u5F62\u5F0F\u5B9A\u4E49 <code>props</code>\u3002</p><h2 id="\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316" aria-hidden="true">#</a> \u521D\u59CB\u5316</h2><p><code>Props</code> \u7684\u521D\u59CB\u5316\u4E3B\u8981\u53D1\u751F\u5728 <code>new Vue</code> \u4E2D\u7684 <code>initState</code> \u9636\u6BB5\uFF0C\u5728 <code>src/core/instance/state.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ....</span>
  <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options
  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token function">initProps</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">initProps</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component<span class="token punctuation">,</span> <span class="token literal-property property">propsOptions</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> propsData <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>_props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// cache prop keys so that future props updates can iterate using Array</span>
  <span class="token comment">// instead of dynamic object key enumeration.</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_propKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> isRoot <span class="token operator">=</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$parent
  <span class="token comment">// root instance props should be converted</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> propsOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propsOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
    <span class="token comment">/* istanbul ignore else */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> hyphenatedKey <span class="token operator">=</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedAttribute</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span> <span class="token operator">||</span>
          config<span class="token punctuation">.</span><span class="token function">isReservedAttr</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hyphenatedKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is a reserved attribute and cannot be used as component prop.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          vm
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isUpdatingChildComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Avoid mutating a prop directly since the value will be </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">overwritten whenever the parent component re-renders. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Instead, use a data or computed property based on the prop&#39;s </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value. Prop being mutated: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            vm
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// static props are already proxied on the component&#39;s prototype</span>
    <span class="token comment">// during Vue.extend(). We only need to proxy props defined at</span>
    <span class="token comment">// instantiation here.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_props</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p><code>initProps</code> \u4E3B\u8981\u505A 3 \u4EF6\u4E8B\u60C5\uFF1A\u6821\u9A8C\u3001\u54CD\u5E94\u5F0F\u548C\u4EE3\u7406\u3002</p><h3 id="\u6821\u9A8C" tabindex="-1"><a class="header-anchor" href="#\u6821\u9A8C" aria-hidden="true">#</a> \u6821\u9A8C</h3><p>\u6821\u9A8C\u7684\u903B\u8F91\u5F88\u7B80\u5355\uFF0C\u904D\u5386 <code>propsOptions</code>\uFF0C\u6267\u884C <code>validateProp(key, propsOptions, propsData, vm)</code> \u65B9\u6CD5\u3002\u8FD9\u91CC\u7684 <code>propsOptions</code> \u5C31\u662F\u5B9A\u4E49\u7684 <code>props</code> \u5728\u89C4\u8303\u540E\u751F\u6210\u7684 <code>options.props</code> \u5BF9\u8C61\uFF0C<code>propsData</code> \u662F\u4ECE\u7236\u7EC4\u4EF6\u4F20\u9012\u7684 <code>prop</code> \u6570\u636E\u3002\u6240\u8C13\u6821\u9A8C\u7684\u76EE\u7684\u5C31\u662F\u68C0\u67E5\u4E00\u4E0B\u4F20\u9012\u7684\u6570\u636E\u662F\u5426\u6EE1\u8DB3 <code>prop </code>\u7684\u5B9A\u4E49\u89C4\u8303\u3002\u518D\u6765\u770B\u4E00\u4E0B <code>validateProp</code> \u65B9\u6CD5\uFF0C\u5B83\u5B9A\u4E49\u5728 <code>src/core/util/props.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">validateProp</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">propOptions</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
  <span class="token literal-property property">propsData</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
  vm<span class="token operator">?</span><span class="token operator">:</span> Component</span>
<span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prop <span class="token operator">=</span> propOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token keyword">const</span> absent <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>propsData<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token keyword">let</span> value <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token comment">// boolean casting</span>
  <span class="token keyword">const</span> booleanIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>absent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// only cast empty string / same name to boolean if</span>
      <span class="token comment">// boolean has higher priority</span>
      <span class="token keyword">const</span> stringIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stringIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> booleanIndex <span class="token operator">&lt;</span> stringIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// check default value</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token function">getPropDefaultValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token comment">// since the default value is a fresh copy,</span>
    <span class="token comment">// make sure to observe it.</span>
    <span class="token keyword">const</span> prevShouldObserve <span class="token operator">=</span> shouldObserve
    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token function">toggleObserving</span><span class="token punctuation">(</span>prevShouldObserve<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token comment">// skip validation for weex recycle-list child component props</span>
    <span class="token operator">!</span><span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token string">&#39;@binding&#39;</span> <span class="token keyword">in</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> absent<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p><code>validateProp</code> \u4E3B\u8981\u5C31\u505A 3 \u4EF6\u4E8B\u60C5\uFF1A\u5904\u7406 <code>Boolean</code> \u7C7B\u578B\u7684\u6570\u636E\uFF0C\u5904\u7406\u9ED8\u8BA4\u6570\u636E\uFF0C<code>prop</code> \u65AD\u8A00\uFF0C\u5E76\u6700\u7EC8\u8FD4\u56DE <code>prop</code> \u7684\u503C\u3002</p><p>\u5148\u6765\u770B <code>Boolean</code> \u7C7B\u578B\u6570\u636E\u7684\u5904\u7406\u903B\u8F91\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> prop <span class="token operator">=</span> propOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token keyword">const</span> absent <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>propsData<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token keyword">let</span> value <span class="token operator">=</span> propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token comment">// boolean casting</span>
<span class="token keyword">const</span> booleanIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>booleanIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>absent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&#39;&#39;</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// only cast empty string / same name to boolean if</span>
    <span class="token comment">// boolean has higher priority</span>
    <span class="token keyword">const</span> stringIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stringIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> booleanIndex <span class="token operator">&lt;</span> stringIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u5148\u901A\u8FC7 <code>const booleanIndex = getTypeIndex(Boolean, prop.type)</code> \u6765\u5224\u65AD <code>prop</code> \u7684\u5B9A\u4E49\u662F\u5426\u662F <code>Boolean</code> \u7C7B\u578B\u7684\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getType</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> match <span class="token operator">=</span> fn <span class="token operator">&amp;&amp;</span> fn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*function (\\w+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> match <span class="token operator">?</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isSameType</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getType</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">getType</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getTypeIndex</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> expectedTypes</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>expectedTypes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">isSameType</span><span class="token punctuation">(</span>expectedTypes<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> expectedTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameType</span><span class="token punctuation">(</span>expectedTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>getTypeIndex</code> \u51FD\u6570\u5C31\u662F\u627E\u5230 <code>type</code> \u548C <code>expectedTypes</code> \u5339\u914D\u7684\u7D22\u5F15\u5E76\u8FD4\u56DE\u3002</p><p><code>prop</code> \u7C7B\u578B\u5B9A\u4E49\u7684\u65F6\u5019\u53EF\u4EE5\u662F\u67D0\u4E2A\u539F\u751F\u6784\u9020\u51FD\u6570\uFF0C\u4E5F\u53EF\u4EE5\u662F\u539F\u751F\u6784\u9020\u51FD\u6570\u7684\u6570\u7EC4\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Boolean<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u5982\u679C <code>expectedTypes</code> \u662F\u5355\u4E2A\u6784\u9020\u51FD\u6570\uFF0C\u5C31\u6267\u884C <code>isSameType</code> \u53BB\u5224\u65AD\u662F\u5426\u662F\u540C\u4E00\u4E2A\u7C7B\u578B\uFF1B\u5982\u679C\u662F\u6570\u7EC4\uFF0C\u90A3\u4E48\u5C31\u904D\u5386\u8FD9\u4E2A\u6570\u7EC4\uFF0C\u627E\u5230\u7B2C\u4E00\u4E2A\u540C\u7C7B\u578B\u7684\uFF0C\u8FD4\u56DE\u5B83\u7684\u7D22\u5F15\u3002</p><p>\u56DE\u5230 <code>validateProp</code> \u51FD\u6570\uFF0C\u901A\u8FC7 <code>const booleanIndex = getTypeIndex(Boolean, prop.type)</code> \u5F97\u5230 <code>booleanIndex</code>\uFF0C\u5982\u679C <code>prop.type</code> \u662F\u4E00\u4E2A <code>Boolean</code> \u7C7B\u578B\uFF0C\u5219\u901A\u8FC7 <code>absent &amp;&amp; !hasOwn(prop, &#39;default&#39;)</code> \u6765\u5224\u65AD\u5982\u679C\u7236\u7EC4\u4EF6\u6CA1\u6709\u4F20\u9012\u8FD9\u4E2A <code>prop</code> \u6570\u636E\u5E76\u4E14\u6CA1\u6709\u8BBE\u7F6E <code>default</code> \u7684\u60C5\u51B5\uFF0C\u5219 <code>value</code> \u4E3A false\u3002</p><p>\u63A5\u7740\u5224\u65AD<code>value === &#39;&#39; || value === hyphenate(key)</code> \u7684\u60C5\u51B5\uFF0C\u5982\u679C\u6EE1\u8DB3\u5219\u5148\u901A\u8FC7 <code>const stringIndex = getTypeIndex(String, prop.type)</code> \u83B7\u53D6\u5339\u914D <code>String</code> \u7C7B\u578B\u7684\u7D22\u5F15\uFF0C\u7136\u540E\u5224\u65AD <code>stringIndex &lt; 0 || booleanIndex &lt; stringIndex</code> \u7684\u503C\u6765\u51B3\u5B9A <code>value</code> \u7684\u503C\u662F\u5426\u4E3A <code>true</code>\u3002\u8FD9\u5757\u903B\u8F91\u7A0D\u5FAE\u6709\u70B9\u7ED5\uFF0C\u4E3E 2 \u4E2A\u4F8B\u5B50\u6765\u8BF4\u660E\uFF1A</p><p>\u4F8B\u5982\u4F60\u5B9A\u4E49\u4E00\u4E2A\u7EC4\u4EF6 <code>Student</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">nickName</span><span class="token operator">:</span> <span class="token punctuation">[</span>Boolean<span class="token punctuation">,</span> String<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u7136\u540E\u5728\u7236\u7EC4\u4EF6\u4E2D\u5F15\u5165\u8FD9\u4E2A\u7EC4\u4EF6\uFF1A</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Kate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">nick-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u6216\u8005\u662F\uFF1A</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Kate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">nick-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nick-name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u7B2C\u4E00\u79CD\u60C5\u51B5\u6CA1\u6709\u5199\u5C5E\u6027\u7684\u503C\uFF0C\u6EE1\u8DB3 <code>value === &#39;&#39;</code>\uFF0C\u7B2C\u4E8C\u79CD\u6EE1\u8DB3 <code>value === hyphenate(key)</code> \u7684\u60C5\u51B5\uFF0C\u53E6\u5916 <code>nickName</code> \u8FD9\u4E2A <code>prop</code> \u7684\u7C7B\u578B\u662F <code>Boolean</code> \u6216\u8005\u662F <code>String</code>\uFF0C\u5E76\u4E14\u6EE1\u8DB3 <code>booleanIndex &lt; stringIndex</code>\uFF0C\u6240\u4EE5\u5BF9 <code>nickName</code> \u8FD9\u4E2A <code>prop</code> \u7684 <code>value</code> \u4E3A <code>true</code>\u3002</p><p>\u63A5\u4E0B\u6765\u770B\u4E00\u4E0B\u9ED8\u8BA4\u6570\u636E\u5904\u7406\u903B\u8F91\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// check default value</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token function">getPropDefaultValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token comment">// since the default value is a fresh copy,</span>
  <span class="token comment">// make sure to observe it.</span>
  <span class="token keyword">const</span> prevShouldObserve <span class="token operator">=</span> shouldObserve
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span>prevShouldObserve<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u5F53 <code>value</code> \u7684\u503C\u4E3A <code>undefined</code> \u7684\u65F6\u5019\uFF0C\u8BF4\u660E\u7236\u7EC4\u4EF6\u6839\u672C\u5C31\u6CA1\u6709\u4F20\u8FD9\u4E2A <code>prop</code>\uFF0C\u90A3\u4E48\u5C31\u9700\u8981\u901A\u8FC7 <code>getPropDefaultValue(vm, prop, key)</code> \u83B7\u53D6\u8FD9\u4E2A <code>prop</code> \u7684\u9ED8\u8BA4\u503C\u3002\u8FD9\u91CC\u53EA\u5173\u6CE8 <code>getPropDefaultValue</code> \u7684\u5B9E\u73B0\uFF0C<code>toggleObserving</code> \u548C <code>observe</code> \u7684\u4F5C\u7528\u4E4B\u540E\u4F1A\u8BF4\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getPropDefaultValue</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> <span class="token operator">?</span>Component<span class="token punctuation">,</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> PropOptions<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>
  <span class="token comment">// no default, return undefined</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> def <span class="token operator">=</span> prop<span class="token punctuation">.</span>default
  <span class="token comment">// warn against non-factory defaults for Object &amp; Array</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;Invalid default value for prop &quot;&#39;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&#39;&quot;: &#39;</span> <span class="token operator">+</span>
      <span class="token string">&#39;Props with type Object/Array must use a factory function &#39;</span> <span class="token operator">+</span>
      <span class="token string">&#39;to return the default value.&#39;</span><span class="token punctuation">,</span>
      vm
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// the raw prop value was also undefined from previous render,</span>
  <span class="token comment">// return previous default value to avoid unnecessary watcher trigger</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">&amp;&amp;</span>
    vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span>
    vm<span class="token punctuation">.</span>_props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> vm<span class="token punctuation">.</span>_props<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// call factory function for non-Function types</span>
  <span class="token comment">// a value is Function if its prototype is function even across different execution context</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> def <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getType</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;Function&#39;</span>
    <span class="token operator">?</span> <span class="token function">def</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>
    <span class="token operator">:</span> def
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>\u68C0\u6D4B\u5982\u679C <code>prop</code> \u6CA1\u6709\u5B9A\u4E49 <code>default</code> \u5C5E\u6027\uFF0C\u90A3\u4E48\u8FD4\u56DE <code>undefined</code>\uFF0C\u901A\u8FC7\u8FD9\u5757\u903B\u8F91\u77E5\u9053\u9664\u4E86 <code>Boolean</code> \u7C7B\u578B\u7684\u6570\u636E\uFF0C\u5176\u4F59\u6CA1\u6709\u8BBE\u7F6E <code>default</code> \u5C5E\u6027\u7684 <code>prop</code> \u9ED8\u8BA4\u503C\u90FD\u662F <code>undefined</code>\u3002</p><p>\u63A5\u7740\u662F\u5F00\u53D1\u73AF\u5883\u4E0B\u5BF9 <code>prop</code> \u7684\u9ED8\u8BA4\u503C\u662F\u5426\u4E3A\u5BF9\u8C61\u6216\u8005\u6570\u7EC4\u7C7B\u578B\u7684\u5224\u65AD\uFF0C\u5982\u679C\u662F\u7684\u8BDD\u4F1A\u62A5\u8B66\u544A\uFF0C\u56E0\u4E3A\u5BF9\u8C61\u548C\u6570\u7EC4\u7C7B\u578B\u7684 <code>prop</code>\uFF0C\u4ED6\u4EEC\u7684\u9ED8\u8BA4\u503C\u5FC5\u987B\u8981\u8FD4\u56DE\u4E00\u4E2A\u5DE5\u5382\u51FD\u6570\u3002</p><p>\u63A5\u4E0B\u6765\u7684\u5224\u65AD\u662F\u5982\u679C\u4E0A\u4E00\u6B21\u7EC4\u4EF6\u6E32\u67D3\u7236\u7EC4\u4EF6\u4F20\u9012\u7684 <code>prop</code> \u7684\u503C\u662F <code>undefined</code>\uFF0C\u5219\u76F4\u63A5\u8FD4\u56DE \u4E0A\u4E00\u6B21\u7684\u9ED8\u8BA4\u503C <code>vm._props[key]</code>\uFF0C\u8FD9\u6837\u53EF\u4EE5\u907F\u514D\u89E6\u53D1\u4E0D\u5FC5\u8981\u7684 <code>watcher</code> \u7684\u66F4\u65B0\u3002</p><p>\u6700\u540E\u5C31\u662F\u5224\u65AD <code>def</code> \u5982\u679C\u662F\u5DE5\u5382\u51FD\u6570\u4E14 <code>prop</code> \u7684\u7C7B\u578B\u4E0D\u662F <code>Function</code> \u7684\u65F6\u5019\uFF0C\u8FD4\u56DE\u5DE5\u5382\u51FD\u6570\u7684\u8FD4\u56DE\u503C\uFF0C\u5426\u5219\u76F4\u63A5\u8FD4\u56DE <code>def</code>\u3002</p><p>\u81F3\u6B64\uFF0C\u8BB2\u5B8C\u4E86 <code>validateProp</code> \u51FD\u6570\u7684 <code>Boolean</code> \u7C7B\u578B\u6570\u636E\u7684\u5904\u7406\u903B\u8F91\u548C\u9ED8\u8BA4\u6570\u636E\u5904\u7406\u903B\u8F91\uFF0C\u6700\u540E\u6765\u770B\u4E00\u4E0B <code>prop</code> \u65AD\u8A00\u903B\u8F91\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span>
<span class="token comment">// skip validation for weex recycle-list child component props</span>
<span class="token operator">!</span><span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token string">&#39;@binding&#39;</span> <span class="token keyword">in</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assertProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> absent<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u5728\u5F00\u53D1\u73AF\u5883\u4E14\u975E <code>weex</code> \u7684\u67D0\u79CD\u73AF\u5883\u4E0B\uFF0C\u6267\u884C <code>assertProp</code> \u505A\u5C5E\u6027\u65AD\u8A00\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">assertProp</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">prop</span><span class="token operator">:</span> PropOptions<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">vm</span><span class="token operator">:</span> <span class="token operator">?</span>Component<span class="token punctuation">,</span>
  <span class="token literal-property property">absent</span><span class="token operator">:</span> boolean</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>required <span class="token operator">&amp;&amp;</span> absent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;Missing required prop: &quot;&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">,</span>
      vm
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prop<span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> type <span class="token operator">=</span> prop<span class="token punctuation">.</span>type
  <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token operator">!</span>type <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token boolean">true</span>
  <span class="token keyword">const</span> expectedTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      type <span class="token operator">=</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> type<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>valid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> assertedType <span class="token operator">=</span> <span class="token function">assertType</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      expectedTypes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>assertedType<span class="token punctuation">.</span>expectedType <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      valid <span class="token operator">=</span> assertedType<span class="token punctuation">.</span>valid
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token function">getInvalidTypeMessage</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expectedTypes<span class="token punctuation">)</span><span class="token punctuation">,</span>
      vm
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> validator <span class="token operator">=</span> prop<span class="token punctuation">.</span>validator
  <span class="token keyword">if</span> <span class="token punctuation">(</span>validator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validator</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Invalid prop: custom validator check failed for prop &quot;&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;&quot;.&#39;</span><span class="token punctuation">,</span>
        vm
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p><code>assertProp</code> \u51FD\u6570\u7684\u76EE\u7684\u662F\u65AD\u8A00\u8FD9\u4E2A <code>prop</code> \u662F\u5426\u5408\u6CD5\u3002</p><p>\u9996\u5148\u5224\u65AD\u5982\u679C <code>prop</code> \u5B9A\u4E49\u4E86 <code>required</code> \u5C5E\u6027\u4F46\u7236\u7EC4\u4EF6\u6CA1\u6709\u4F20\u9012\u8FD9\u4E2A <code>prop</code> \u6570\u636E\u7684\u8BDD\u4F1A\u62A5\u4E00\u4E2A\u8B66\u544A\u3002</p><p>\u63A5\u7740\u5224\u65AD\u5982\u679C <code>value</code> \u4E3A\u7A7A\u4E14 <code>prop</code> \u6CA1\u6709\u5B9A\u4E49 <code>required</code> \u5C5E\u6027\u5219\u76F4\u63A5\u8FD4\u56DE\u3002</p><p>\u7136\u540E\u518D\u53BB\u5BF9 <code>prop</code> \u7684\u7C7B\u578B\u505A\u6821\u9A8C\uFF0C\u5148\u662F\u62FF\u5230 <code>prop</code> \u4E2D\u5B9A\u4E49\u7684\u7C7B\u578B <code>type</code>\uFF0C\u5E76\u5C1D\u8BD5\u628A\u5B83\u8F6C\u6210\u4E00\u4E2A\u7C7B\u578B\u6570\u7EC4\uFF0C\u7136\u540E\u4F9D\u6B21\u904D\u5386\u8FD9\u4E2A\u6570\u7EC4\uFF0C\u6267\u884C <code>assertType(value, type[i])</code> \u53BB\u83B7\u53D6\u65AD\u8A00\u7684\u7ED3\u679C\uFF0C\u76F4\u5230\u904D\u5386\u5B8C\u6210\u6216\u8005\u662F <code>valid</code> \u4E3A <code>true</code> \u7684\u65F6\u5019\u8DF3\u51FA\u5FAA\u73AF\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> simpleCheckRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(String|Number|Boolean|Function|Symbol)$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">function</span> <span class="token function">assertType</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">valid</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
  <span class="token literal-property property">expectedType</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> valid
  <span class="token keyword">const</span> expectedType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>simpleCheckRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>expectedType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span> value
    valid <span class="token operator">=</span> t <span class="token operator">===</span> expectedType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// for primitive wrapper objects</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid <span class="token operator">&amp;&amp;</span> t <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      valid <span class="token operator">=</span> value <span class="token keyword">instanceof</span> <span class="token class-name">type</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedType <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    valid <span class="token operator">=</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedType <span class="token operator">===</span> <span class="token string">&#39;Array&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    valid <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    valid <span class="token operator">=</span> value <span class="token keyword">instanceof</span> <span class="token class-name">type</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    valid<span class="token punctuation">,</span>
    expectedType
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>assertType</code> \u7684\u903B\u8F91\u5F88\u7B80\u5355\uFF0C\u5148\u901A\u8FC7 <code>getType(type)</code> \u83B7\u53D6 <code>prop</code> \u671F\u671B\u7684\u7C7B\u578B <code>expectedType</code>\uFF0C\u7136\u540E\u518D\u53BB\u6839\u636E\u51E0\u79CD\u4E0D\u540C\u7684\u60C5\u51B5\u5BF9\u6BD4 <code>prop</code> \u7684\u503C <code>value</code> \u662F\u5426\u548C <code>expectedType</code> \u5339\u914D\uFF0C\u6700\u540E\u8FD4\u56DE\u5339\u914D\u7684\u7ED3\u679C\u3002</p><p>\u5982\u679C\u5FAA\u73AF\u7ED3\u675F\u540E <code>valid</code> \u4ECD\u7136\u4E3A <code>false</code>\uFF0C\u90A3\u4E48\u8BF4\u660E <code>prop</code> \u7684\u503C <code>value</code> \u4E0E <code>prop</code> \u5B9A\u4E49\u7684\u7C7B\u578B\u90FD\u4E0D\u5339\u914D\uFF0C\u90A3\u4E48\u5C31\u4F1A\u8F93\u51FA\u4E00\u6BB5\u901A\u8FC7 <code>getInvalidTypeMessage(name, value, expectedTypes)</code> \u751F\u6210\u7684\u8B66\u544A\u4FE1\u606F\uFF0C\u5C31\u4E0D\u7EC6\u8BF4\u4E86\u3002</p><p>\u6700\u540E\u5224\u65AD\u5F53 <code>prop</code> \u81EA\u5DF1\u5B9A\u4E49\u4E86 <code>validator</code> \u81EA\u5B9A\u4E49\u6821\u9A8C\u5668\uFF0C\u5219\u6267\u884C <code>validator</code> \u6821\u9A8C\u5668\u65B9\u6CD5\uFF0C\u5982\u679C\u6821\u9A8C\u4E0D\u901A\u8FC7\u5219\u8F93\u51FA\u8B66\u544A\u4FE1\u606F\u3002</p><h3 id="\u54CD\u5E94\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u54CD\u5E94\u5F0F" aria-hidden="true">#</a> \u54CD\u5E94\u5F0F</h3><p>\u56DE\u5230 <code>initProps</code> \u65B9\u6CD5\uFF0C\u5F53\u901A\u8FC7 <code>const value = validateProp(key, propsOptions, propsData, vm)</code> \u5BF9 <code>prop</code> \u505A\u9A8C\u8BC1\u5E76\u4E14\u83B7\u53D6\u5230 <code>prop</code> \u7684\u503C\u540E\uFF0C\u63A5\u4E0B\u6765\u9700\u8981\u901A\u8FC7 <code>defineReactive</code> \u628A <code>prop</code> \u53D8\u6210\u54CD\u5E94\u5F0F\u3002</p><p><code>defineReactive</code> \u4E4B\u524D\u5DF2\u7ECF\u4ECB\u7ECD\u8FC7\uFF0C\u8FD9\u91CC\u8981\u6CE8\u610F\u7684\u662F\uFF0C\u5728\u5F00\u53D1\u73AF\u5883\u4E2D\u4F1A\u6821\u9A8C <code>prop</code> \u7684 <code>key</code> \u662F\u5426\u662F <code>HTML</code> \u7684\u4FDD\u7559\u5C5E\u6027\uFF0C\u5E76\u4E14\u5728 <code>defineReactive</code> \u7684\u65F6\u5019\u4F1A\u6DFB\u52A0\u4E00\u4E2A\u81EA\u5B9A\u4E49 <code>setter</code>\uFF0C\u5F53\u76F4\u63A5\u5BF9 <code>prop</code> \u8D4B\u503C\u7684\u65F6\u5019\u4F1A\u8F93\u51FA\u8B66\u544A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> hyphenatedKey <span class="token operator">=</span> <span class="token function">hyphenate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedAttribute</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span> <span class="token operator">||</span>
      config<span class="token punctuation">.</span><span class="token function">isReservedAttr</span><span class="token punctuation">(</span>hyphenatedKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hyphenatedKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is a reserved attribute and cannot be used as component prop.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      vm
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isUpdatingChildComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Avoid mutating a prop directly since the value will be </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">overwritten whenever the parent component re-renders. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Instead, use a data or computed property based on the prop&#39;s </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value. Prop being mutated: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        vm
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>\u5173\u4E8E <code>prop</code> \u7684\u54CD\u5E94\u5F0F\u6709\u4E00\u70B9\u4E0D\u540C\u7684\u662F\u5F53 <code>vm</code> \u662F\u975E\u6839\u5B9E\u4F8B\u7684\u65F6\u5019\uFF0C\u4F1A\u5148\u6267\u884C <code>toggleObserving(false)</code>\uFF0C\u5B83\u7684\u76EE\u7684\u662F\u4E3A\u4E86\u54CD\u5E94\u5F0F\u7684\u4F18\u5316\uFF0C\u5148\u8DF3\u8FC7\uFF0C\u4E4B\u540E\u4F1A\u8BE6\u7EC6\u8BF4\u660E\u3002</p><h3 id="\u4EE3\u7406" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7406" aria-hidden="true">#</a> \u4EE3\u7406</h3><p>\u5728\u7ECF\u8FC7\u54CD\u5E94\u5F0F\u5904\u7406\u540E\uFF0C\u4F1A\u628A <code>prop</code> \u7684\u503C\u6DFB\u52A0\u5230 <code>vm._props</code> \u4E2D\uFF0C\u6BD4\u5982 key \u4E3A <code>name</code> \u7684 <code>prop</code>\uFF0C\u5B83\u7684\u503C\u4FDD\u5B58\u5728 <code>vm._props.name</code> \u4E2D\uFF0C\u4F46\u662F\u5728\u7EC4\u4EF6\u4E2D\u53EF\u4EE5\u901A\u8FC7 <code>this.name</code> \u8BBF\u95EE\u5230\u8FD9\u4E2A <code>prop</code>\uFF0C\u8FD9\u5C31\u662F\u4EE3\u7406\u505A\u7684\u4E8B\u60C5\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// static props are already proxied on the component&#39;s prototype</span>
<span class="token comment">// during Vue.extend(). We only need to proxy props defined at</span>
<span class="token comment">// instantiation here.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_props</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u901A\u8FC7 <code>proxy</code> \u51FD\u6570\u5B9E\u73B0\u4E86\u4E0A\u8FF0\u9700\u6C42\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sharedPropertyDefinition <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">get</span><span class="token operator">:</span> noop<span class="token punctuation">,</span>
  <span class="token literal-property property">set</span><span class="token operator">:</span> noop
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">proxy</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> Object<span class="token punctuation">,</span> <span class="token literal-property property">sourceKey</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">proxyGetter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  sharedPropertyDefinition<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">proxySetter</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span>sourceKey<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
  <span class="token punctuation">}</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedPropertyDefinition<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>\u5F53\u8BBF\u95EE <code>this.name</code> \u7684\u65F6\u5019\u5C31\u76F8\u5F53\u4E8E\u8BBF\u95EE <code>this._props.name</code>\u3002</p><p>\u5176\u5B9E\u5BF9\u4E8E\u975E\u6839\u5B9E\u4F8B\u7684\u5B50\u7EC4\u4EF6\u800C\u8A00\uFF0C<code>prop</code> \u7684\u4EE3\u7406\u53D1\u751F\u5728 <code>Vue.extend</code> \u9636\u6BB5\uFF0C\u5728 <code>src/core/global-api/extend.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">extendOptions</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> <span class="token function-variable function">Sub</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">VueComponent</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>

  <span class="token comment">// For props and computed properties, we define the proxy getters on</span>
  <span class="token comment">// the Vue instances at extension time, on the extended prototype. This</span>
  <span class="token comment">// avoids Object.defineProperty calls for each instance created.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">initProps</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Sub<span class="token punctuation">.</span>options<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">initComputed</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> Sub
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">initProps</span> <span class="token punctuation">(</span><span class="token parameter">Comp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> Comp<span class="token punctuation">.</span>options<span class="token punctuation">.</span>props
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token class-name">Comp</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_props</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>\u8FD9\u4E48\u505A\u7684\u597D\u5904\u662F\u4E0D\u7528\u4E3A\u6BCF\u4E2A\u7EC4\u4EF6\u5B9E\u4F8B\u90FD\u505A\u4E00\u5C42 <code>proxy</code>\uFF0C\u662F\u4E00\u79CD\u4F18\u5316\u624B\u6BB5\u3002</p><h2 id="props-\u66F4\u65B0" tabindex="-1"><a class="header-anchor" href="#props-\u66F4\u65B0" aria-hidden="true">#</a> Props \u66F4\u65B0</h2><p>\u77E5\u9053\uFF0C\u5F53\u7236\u7EC4\u4EF6\u4F20\u9012\u7ED9\u5B50\u7EC4\u4EF6\u7684 <code>props</code> \u503C\u53D8\u5316\uFF0C\u5B50\u7EC4\u4EF6\u5BF9\u5E94\u7684\u503C\u4E5F\u4F1A\u6539\u53D8\uFF0C\u540C\u65F6\u4F1A\u89E6\u53D1\u5B50\u7EC4\u4EF6\u7684\u91CD\u65B0\u6E32\u67D3\u3002\u90A3\u4E48\u63A5\u4E0B\u6765\u5C31\u4ECE\u6E90\u7801\u89D2\u5EA6\u6765\u5206\u6790\u8FD9\u4E24\u4E2A\u8FC7\u7A0B\u3002</p><h3 id="\u5B50\u7EC4\u4EF6-props-\u66F4\u65B0" tabindex="-1"><a class="header-anchor" href="#\u5B50\u7EC4\u4EF6-props-\u66F4\u65B0" aria-hidden="true">#</a> \u5B50\u7EC4\u4EF6 props \u66F4\u65B0</h3><p>\u9996\u5148\uFF0C<code>prop</code> \u6570\u636E\u7684\u503C\u53D8\u5316\u5728\u7236\u7EC4\u4EF6\uFF0C\u77E5\u9053\u5728\u7236\u7EC4\u4EF6\u7684 <code>render</code> \u8FC7\u7A0B\u4E2D\u4F1A\u8BBF\u95EE\u5230\u8FD9\u4E2A <code>prop</code> \u6570\u636E\uFF0C\u6240\u4EE5\u5F53 <code>prop</code> \u6570\u636E\u53D8\u5316\u4E00\u5B9A\u4F1A\u89E6\u53D1\u7236\u7EC4\u4EF6\u7684\u91CD\u65B0\u6E32\u67D3\uFF0C\u90A3\u4E48\u91CD\u65B0\u6E32\u67D3\u662F\u5982\u4F55\u66F4\u65B0\u5B50\u7EC4\u4EF6\u5BF9\u5E94\u7684 <code>prop</code> \u7684\u503C\u5462\uFF1F</p><p>\u5728\u7236\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3\u7684\u6700\u540E\uFF0C\u4F1A\u6267\u884C <code>patch</code> \u8FC7\u7A0B\uFF0C\u8FDB\u800C\u6267\u884C <code>patchVnode</code> \u51FD\u6570\uFF0C<code>patchVnode</code> \u901A\u5E38\u662F\u4E00\u4E2A\u9012\u5F52\u8FC7\u7A0B\uFF0C\u5F53\u5B83\u9047\u5230\u7EC4\u4EF6 <code>vnode</code> \u7684\u65F6\u5019\uFF0C\u4F1A\u6267\u884C\u7EC4\u4EF6\u66F4\u65B0\u8FC7\u7A0B\u7684 <code>prepatch</code> \u94A9\u5B50\u51FD\u6570\uFF0C\u5728 <code>src/core/vdom/patch.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchVnode</span> <span class="token punctuation">(</span>
  <span class="token parameter">oldVnode<span class="token punctuation">,</span>
  vnode<span class="token punctuation">,</span>
  insertedVnodeQueue<span class="token punctuation">,</span>
  ownerArray<span class="token punctuation">,</span>
  index<span class="token punctuation">,</span>
  removeOnly</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">let</span> i
  <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>prepatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>prepatch</code> \u51FD\u6570\u5B9A\u4E49\u5728 <code>src/core/vdom/create-component.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">prepatch</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">oldVnode</span><span class="token operator">:</span> MountedComponentVNode<span class="token punctuation">,</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> MountedComponentVNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentOptions
  <span class="token keyword">const</span> child <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>componentInstance
  <span class="token function">updateChildComponent</span><span class="token punctuation">(</span>
    child<span class="token punctuation">,</span>
    options<span class="token punctuation">.</span>propsData<span class="token punctuation">,</span> <span class="token comment">// updated props</span>
    options<span class="token punctuation">.</span>listeners<span class="token punctuation">,</span> <span class="token comment">// updated listeners</span>
    vnode<span class="token punctuation">,</span> <span class="token comment">// new parent vnode</span>
    options<span class="token punctuation">.</span>children <span class="token comment">// new children</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u5185\u90E8\u4F1A\u8C03\u7528 <code>updateChildComponent</code> \u65B9\u6CD5\u6765\u66F4\u65B0 <code>props</code>\uFF0C\u6CE8\u610F\u7B2C\u4E8C\u4E2A\u53C2\u6570\u5C31\u662F\u7236\u7EC4\u4EF6\u7684 <code>propData</code>\uFF0C\u90A3\u4E48\u4E3A\u4EC0\u4E48 <code>vnode.componentOptions.propsData</code> \u5C31\u662F\u7236\u7EC4\u4EF6\u4F20\u9012\u7ED9\u5B50\u7EC4\u4EF6\u7684 <code>prop</code> \u6570\u636E\u5462\uFF08\u8FD9\u4E2A\u4E5F\u540C\u6837\u89E3\u91CA\u4E86\u7B2C\u4E00\u6B21\u6E32\u67D3\u7684 <code>propsData</code> \u6765\u6E90\uFF09\uFF1F\u539F\u6765\u5728\u7EC4\u4EF6\u7684 <code>render</code> \u8FC7\u7A0B\u4E2D\uFF0C\u5BF9\u4E8E\u7EC4\u4EF6\u8282\u70B9\u4F1A\u901A\u8FC7 <code>createComponent</code> \u65B9\u6CD5\u6765\u521B\u5EFA\u7EC4\u4EF6 <code>vnode</code>\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">Ctor</span><span class="token operator">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span> <span class="token operator">|</span> Function <span class="token operator">|</span> Object <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token operator">?</span>VNodeData<span class="token punctuation">,</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> Component<span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  tag<span class="token operator">?</span><span class="token operator">:</span> string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token operator">|</span> Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token comment">// extract props</span>
  <span class="token keyword">const</span> propsData <span class="token operator">=</span> <span class="token function">extractPropsFromVNodeData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Ctor<span class="token punctuation">,</span> tag<span class="token punctuation">)</span>

  <span class="token comment">// ...</span>
  
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vue-component-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Ctor<span class="token punctuation">.</span>cid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> Ctor<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>
    asyncFactory
  <span class="token punctuation">)</span>

  <span class="token comment">// ...</span>
  
  <span class="token keyword">return</span> vnode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>\u5728\u521B\u5EFA\u7EC4\u4EF6 <code>vnode</code> \u7684\u8FC7\u7A0B\u4E2D\uFF0C\u9996\u5148\u4ECE <code>data</code> \u4E2D\u63D0\u53D6\u51FA <code>propData</code>\uFF0C\u7136\u540E\u5728 <code>new VNode</code> \u7684\u65F6\u5019\uFF0C\u4F5C\u4E3A\u7B2C\u4E03\u4E2A\u53C2\u6570 <code>VNodeComponentOptions</code> \u4E2D\u7684\u4E00\u4E2A\u5C5E\u6027\u4F20\u5165\uFF0C\u6240\u4EE5\u53EF\u4EE5\u901A\u8FC7 <code>vnode.componentOptions.propsData</code> \u62FF\u5230 <code>prop</code> \u6570\u636E\u3002</p><p>\u63A5\u7740\u770B <code>updateChildComponent</code> \u51FD\u6570\uFF0C\u5B83\u7684\u5B9A\u4E49\u5728 <code>src/core/instance/lifecycle.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateChildComponent</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component<span class="token punctuation">,</span>
  <span class="token literal-property property">propsData</span><span class="token operator">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>
  <span class="token literal-property property">listeners</span><span class="token operator">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>
  <span class="token literal-property property">parentVnode</span><span class="token operator">:</span> MountedComponentVNode<span class="token punctuation">,</span>
  <span class="token literal-property property">renderChildren</span><span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token comment">// update props</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>propsData <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>_props
    <span class="token keyword">const</span> propKeys <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_propKeys <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> propKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> propKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">const</span> <span class="token literal-property property">propOptions</span><span class="token operator">:</span> any <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props <span class="token comment">// wtf flow?</span>
      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token comment">// keep a copy of raw propsData</span>
    vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">=</span> propsData
  <span class="token punctuation">}</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u91CD\u70B9\u6765\u770B\u66F4\u65B0 <code>props</code> \u7684\u76F8\u5173\u903B\u8F91\uFF0C\u8FD9\u91CC\u7684 <code>propsData</code> \u662F\u7236\u7EC4\u4EF6\u4F20\u9012\u7684 <code>props</code> \u6570\u636E\uFF0C<code>vm</code> \u662F\u5B50\u7EC4\u4EF6\u7684\u5B9E\u4F8B\u3002<code>vm._props</code> \u6307\u5411\u7684\u5C31\u662F\u5B50\u7EC4\u4EF6\u7684 <code>props</code> \u503C\uFF0C<code>propKeys</code> \u5C31\u662F\u5728\u4E4B\u524D <code>initProps</code> \u8FC7\u7A0B\u4E2D\uFF0C\u7F13\u5B58\u7684\u5B50\u7EC4\u4EF6\u4E2D\u5B9A\u4E49\u7684\u6240\u6709 <code>prop</code> \u7684 <code>key</code>\u3002\u4E3B\u8981\u903B\u8F91\u5C31\u662F\u904D\u5386 <code>propKeys</code>\uFF0C\u7136\u540E\u6267\u884C <code>props[key] = validateProp(key, propOptions, propsData, vm)</code> \u91CD\u65B0\u9A8C\u8BC1\u548C\u8BA1\u7B97\u65B0\u7684 <code>prop</code> \u6570\u636E\uFF0C\u66F4\u65B0 <code>vm._props</code>\uFF0C\u4E5F\u5C31\u662F\u5B50\u7EC4\u4EF6\u7684 <code>props</code>\uFF0C\u8FD9\u4E2A\u5C31\u662F\u5B50\u7EC4\u4EF6 <code>props</code> \u7684\u66F4\u65B0\u8FC7\u7A0B\u3002</p><h3 id="\u5B50\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3" tabindex="-1"><a class="header-anchor" href="#\u5B50\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3" aria-hidden="true">#</a> \u5B50\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3</h3><p>\u5176\u5B9E\u5B50\u7EC4\u4EF6\u7684\u91CD\u65B0\u6E32\u67D3\u6709 2 \u79CD\u60C5\u51B5\uFF0C\u4E00\u4E2A\u662F <code>prop</code> \u503C\u88AB\u4FEE\u6539\uFF0C\u53E6\u4E00\u4E2A\u662F\u5BF9\u8C61\u7C7B\u578B\u7684 <code>prop</code> \u5185\u90E8\u5C5E\u6027\u7684\u53D8\u5316\u3002</p><p>\u5148\u6765\u770B\u4E00\u4E0B <code>prop</code> \u503C\u88AB\u4FEE\u6539\u7684\u60C5\u51B5\uFF0C\u5F53\u6267\u884C <code>props[key] = validateProp(key, propOptions, propsData, vm)</code> \u66F4\u65B0\u5B50\u7EC4\u4EF6 <code>prop</code> \u7684\u65F6\u5019\uFF0C\u4F1A\u89E6\u53D1 <code>prop</code> \u7684 <code>setter</code> \u8FC7\u7A0B\uFF0C\u53EA\u8981\u5728\u6E32\u67D3\u5B50\u7EC4\u4EF6\u7684\u65F6\u5019\u8BBF\u95EE\u8FC7\u8FD9\u4E2A <code>prop</code> \u503C\uFF0C\u90A3\u4E48\u6839\u636E\u54CD\u5E94\u5F0F\u539F\u7406\uFF0C\u5C31\u4F1A\u89E6\u53D1\u5B50\u7EC4\u4EF6\u7684\u91CD\u65B0\u6E32\u67D3\u3002</p><p>\u518D\u6765\u770B\u4E00\u4E0B\u5F53\u5BF9\u8C61\u7C7B\u578B\u7684 <code>prop</code> \u7684\u5185\u90E8\u5C5E\u6027\u53D1\u751F\u53D8\u5316\u7684\u65F6\u5019\uFF0C\u8FD9\u4E2A\u65F6\u5019\u5176\u5B9E\u5E76\u6CA1\u6709\u89E6\u53D1\u5B50\u7EC4\u4EF6 <code>prop</code> \u7684\u66F4\u65B0\u3002\u4F46\u662F\u5728\u5B50\u7EC4\u4EF6\u7684\u6E32\u67D3\u8FC7\u7A0B\u4E2D\uFF0C\u8BBF\u95EE\u8FC7\u8FD9\u4E2A\u5BF9\u8C61 <code>prop</code>\uFF0C\u6240\u4EE5\u8FD9\u4E2A\u5BF9\u8C61 <code>prop</code> \u5728\u89E6\u53D1 <code>getter</code> \u7684\u65F6\u5019\u4F1A\u628A\u5B50\u7EC4\u4EF6\u7684 <code>render watcher</code> \u6536\u96C6\u5230\u4F9D\u8D56\u4E2D\uFF0C\u7136\u540E\u5F53\u5728\u7236\u7EC4\u4EF6\u66F4\u65B0\u8FD9\u4E2A\u5BF9\u8C61 <code>prop</code> \u7684\u67D0\u4E2A\u5C5E\u6027\u7684\u65F6\u5019\uFF0C\u4F1A\u89E6\u53D1 <code>setter</code> \u8FC7\u7A0B\uFF0C\u4E5F\u5C31\u4F1A\u901A\u77E5\u5B50\u7EC4\u4EF6 <code>render watcher</code> \u7684 <code>update</code>\uFF0C\u8FDB\u800C\u89E6\u53D1\u5B50\u7EC4\u4EF6\u7684\u91CD\u65B0\u6E32\u67D3\u3002</p><p>\u4EE5\u4E0A\u5C31\u662F\u5F53\u7236\u7EC4\u4EF6 <code>props</code> \u66F4\u65B0\uFF0C\u89E6\u53D1\u5B50\u7EC4\u4EF6\u91CD\u65B0\u6E32\u67D3\u7684 2 \u79CD\u60C5\u51B5\u3002</p><h2 id="toggleobserving" tabindex="-1"><a class="header-anchor" href="#toggleobserving" aria-hidden="true">#</a> toggleObserving</h2><p>\u6700\u540E\u5728\u6765\u804A\u4E00\u4E0B <code>toggleObserving</code>\uFF0C\u5B83\u7684\u5B9A\u4E49\u5728 <code>src/core/observer/index.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token literal-property property">shouldObserve</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">toggleObserving</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  shouldObserve <span class="token operator">=</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u5B83\u5728\u5F53\u524D\u6A21\u5757\u4E2D\u5B9A\u4E49\u4E86 <code>shouldObserve</code> \u53D8\u91CF\uFF0C\u7528\u6765\u63A7\u5236\u5728 <code>observe</code> \u7684\u8FC7\u7A0B\u4E2D\u662F\u5426\u9700\u8981\u628A\u5F53\u524D\u503C\u53D8\u6210\u4E00\u4E2A <code>Observer</code> \u5BF9\u8C61\u3002</p><p>\u90A3\u4E48\u4E3A\u4EC0\u4E48\u5728 <code>props</code> \u7684\u521D\u59CB\u5316\u548C\u66F4\u65B0\u8FC7\u7A0B\u4E2D\uFF0C\u591A\u6B21\u6267\u884C <code>toggleObserving(false)</code> \u5462\uFF0C\u63A5\u4E0B\u6765\u5C31\u6765\u5206\u6790\u8FD9\u51E0\u79CD\u60C5\u51B5\u3002</p><p>\u5728 <code>initProps</code> \u7684\u8FC7\u7A0B\u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> isRoot <span class="token operator">=</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$parent
<span class="token comment">// root instance props should be converted</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> propsOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propsOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
  <span class="token function">defineReactive</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u5BF9\u4E8E\u975E\u6839\u5B9E\u4F8B\u7684\u60C5\u51B5\uFF0C\u4F1A\u6267\u884C <code>toggleObserving(false)</code>\uFF0C\u7136\u540E\u5BF9\u4E8E\u6BCF\u4E00\u4E2A <code>prop</code> \u503C\uFF0C\u53BB\u6267\u884C <code>defineReactive(props, key, value)</code> \u53BB\u628A\u5B83\u53D8\u6210\u54CD\u5E94\u5F0F\u3002</p><p>\u56DE\u987E\u4E00\u4E0B <code>defineReactive</code> \u7684\u5B9A\u4E49\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">obj</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  customSetter<span class="token operator">?</span><span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>
  shallow<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  
  <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>\u901A\u5E38\u5BF9\u4E8E\u503C <code>val</code> \u4F1A\u6267\u884C <code>observe</code> \u51FD\u6570\uFF0C\u7136\u540E\u9047\u5230 <code>val</code> \u662F\u5BF9\u8C61\u6216\u8005\u6570\u7EC4\u7684\u60C5\u51B5\u4F1A\u9012\u5F52\u6267\u884C <code>defineReactive</code> \u628A\u5B83\u4EEC\u7684\u5B50\u5C5E\u6027\u90FD\u53D8\u6210\u54CD\u5E94\u5F0F\u7684\uFF0C\u4F46\u662F\u7531\u4E8E <code>shouldObserve</code> \u7684\u503C\u53D8\u6210\u4E86 <code>false</code>\uFF0C\u8FD9\u4E2A\u9012\u5F52\u8FC7\u7A0B\u88AB\u7701\u7565\u4E86\u3002\u4E3A\u4EC0\u4E48\u4F1A\u8FD9\u6837\u5462\uFF1F</p><p>\u56E0\u4E3A\u6B63\u5982\u524D\u9762\u5206\u6790\u7684\uFF0C\u5BF9\u4E8E\u5BF9\u8C61\u7684 <code>prop</code> \u503C\uFF0C\u5B50\u7EC4\u4EF6\u7684 <code>prop</code> \u503C\u59CB\u7EC8\u6307\u5411\u7236\u7EC4\u4EF6\u7684 <code>prop</code> \u503C\uFF0C\u53EA\u8981\u7236\u7EC4\u4EF6\u7684 <code>prop</code> \u503C\u53D8\u5316\uFF0C\u5C31\u4F1A\u89E6\u53D1\u5B50\u7EC4\u4EF6\u7684\u91CD\u65B0\u6E32\u67D3\uFF0C\u6240\u4EE5\u8FD9\u4E2A <code>observe</code> \u8FC7\u7A0B\u662F\u53EF\u4EE5\u7701\u7565\u7684\u3002</p><p>\u6700\u540E\u518D\u6267\u884C <code>toggleObserving(true)</code> \u6062\u590D <code>shouldObserve</code> \u4E3A <code>true</code>\u3002</p><p>\u5728 <code>validateProp</code> \u7684\u8FC7\u7A0B\u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// check default value</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token function">getPropDefaultValue</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token comment">// since the default value is a fresh copy,</span>
  <span class="token comment">// make sure to observe it.</span>
  <span class="token keyword">const</span> prevShouldObserve <span class="token operator">=</span> shouldObserve
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span>prevShouldObserve<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u8FD9\u79CD\u662F\u7236\u7EC4\u4EF6\u6CA1\u6709\u4F20\u9012 <code>prop</code> \u503C\u5BF9\u9ED8\u8BA4\u503C\u7684\u5904\u7406\u903B\u8F91\uFF0C\u56E0\u4E3A\u8FD9\u4E2A\u503C\u662F\u4E00\u4E2A\u62F7\u8D1D\uFF0C\u6240\u4EE5\u9700\u8981 <code>toggleObserving(true)</code>\uFF0C\u7136\u540E\u6267\u884C <code>observe(value)</code> \u628A\u503C\u53D8\u6210\u54CD\u5E94\u5F0F\u3002</p><p>\u5728 <code>updateChildComponent</code> \u8FC7\u7A0B\u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// update props</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>propsData <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>_props
  <span class="token keyword">const</span> propKeys <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_propKeys <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> propKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> propKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> <span class="token literal-property property">propOptions</span><span class="token operator">:</span> any <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props <span class="token comment">// wtf flow?</span>
    props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token comment">// keep a copy of raw propsData</span>
  vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">=</span> propsData
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u5176\u5B9E\u548C <code>initProps</code> \u7684\u903B\u8F91\u4E00\u6837\uFF0C\u4E0D\u9700\u8981\u5BF9\u5F15\u7528\u7C7B\u578B <code>props</code> \u9012\u5F52\u505A\u54CD\u5E94\u5F0F\u5904\u7406\uFF0C\u6240\u4EE5\u4E5F\u9700\u8981 <code>toggleObserving(false)</code>\u3002</p><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u901A\u8FC7\u8FD9\u4E00\u8282\u7684\u5206\u6790\uFF0C\u4E86\u89E3\u4E86 <code>props</code> \u7684\u89C4\u8303\u5316\u3001\u521D\u59CB\u5316\u3001\u66F4\u65B0\u7B49\u8FC7\u7A0B\u7684\u5B9E\u73B0\u539F\u7406\uFF1B\u4E5F\u4E86\u89E3\u4E86 Vue \u5185\u90E8\u5BF9 <code>props</code> \u5982\u4F55\u505A\u54CD\u5E94\u5F0F\u7684\u4F18\u5316\uFF1B\u540C\u65F6\u8FD8\u4E86\u89E3\u5230 <code>props</code> \u7684\u53D8\u5316\u662F\u5982\u4F55\u89E6\u53D1\u5B50\u7EC4\u4EF6\u7684\u66F4\u65B0\u3002\u4E86\u89E3\u8FD9\u4E9B\u5BF9\u5E73\u65F6\u5BF9 <code>props</code> \u7684\u5E94\u7528\uFF0C\u9047\u5230\u95EE\u9898\u65F6\u7684\u5B9A\u4F4D\u8FFD\u8E2A\u4F1A\u6709\u5F88\u5927\u7684\u5E2E\u52A9\u3002</p>`,117);function e(t,o){return p}var r=s(a,[["render",e]]);export{r as default};
