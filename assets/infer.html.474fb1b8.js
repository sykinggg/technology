import{r as e,o,c,b as s,d as p,F as l,e as n,a as t}from"./app.ee3fc36b.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const i={},k=s("h1",{id:"infer",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#infer","aria-hidden":"true"},"#"),n(" infer")],-1),u=s("h2",{id:"\u4ECB\u7ECD",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u4ECB\u7ECD","aria-hidden":"true"},"#"),n(" \u4ECB\u7ECD")],-1),d=s("code",null,"infer",-1),b=n(" \u6700\u65E9\u51FA\u73B0\u5728\u6B64 "),m={href:"https://github.com/Microsoft/TypeScript/pull/21496",target:"_blank",rel:"noopener noreferrer"},g=n("PR"),y=n(" \u4E2D\uFF0C\u8868\u793A\u5728 "),h=s("code",null,"extends",-1),_=n(" \u6761\u4EF6\u8BED\u53E5\u4E2D\u5F85\u63A8\u65AD\u7684\u7C7B\u578B\u53D8\u91CF\u3002"),T=t(`<p>\u7B80\u5355\u793A\u4F8B\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ParamType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5728\u8FD9\u4E2A\u6761\u4EF6\u8BED\u53E5 <code>T extends (...args: infer P) =&gt; any ? P : T</code> \u4E2D\uFF0C<code>infer P</code> \u8868\u793A\u5F85\u63A8\u65AD\u7684\u51FD\u6570\u53C2\u6570\u3002</p><p>\u6574\u53E5\u8868\u793A\u4E3A\uFF1A\u5982\u679C <code>T</code> \u80FD\u8D4B\u503C\u7ED9 <code>(...args: infer P) =&gt; any</code>\uFF0C\u5219\u7ED3\u679C\u662F <code>(...args: infer P) =&gt; any</code> \u7C7B\u578B\u4E2D\u7684\u53C2\u6570 <code>P</code>\uFF0C\u5426\u5219\u8FD4\u56DE\u4E3A <code>T</code>\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Param</span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Param = User</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">AA</span></span> <span class="token operator">=</span> ParamType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="\u5185\u7F6E\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u5185\u7F6E\u7C7B\u578B" aria-hidden="true">#</a> \u5185\u7F6E\u7C7B\u578B</h2><p>\u5728 2.8 \u7248\u672C\u4E2D\uFF0CTypeScript \u5185\u7F6E\u4E86\u4E00\u4E9B\u4E0E <code>infer</code> \u6709\u5173\u7684\u6620\u5C04\u7C7B\u578B\uFF1A</p><ul><li><p>\u7528\u4E8E\u63D0\u53D6\u51FD\u6570\u7C7B\u578B\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">P</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u76F8\u6BD4\u4E8E\u6587\u7AE0\u5F00\u59CB\u7ED9\u51FA\u7684\u793A\u4F8B\uFF0C<code>ReturnType&lt;T&gt;</code> \u53EA\u662F\u5C06 <code>infer P</code> \u4ECE\u53C2\u6570\u4F4D\u7F6E\u79FB\u52A8\u5230\u8FD4\u56DE\u503C\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u6B64\u65F6 <code>P</code> \u5373\u662F\u8868\u793A\u5F85\u63A8\u65AD\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> User<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Test</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Test = User</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>\u7528\u4E8E\u63D0\u53D6\u6784\u9020\u51FD\u6570\u4E2D\u53C2\u6570\uFF08\u5B9E\u4F8B\uFF09\u7C7B\u578B\uFF1A</p><p>\u4E00\u4E2A\u6784\u9020\u51FD\u6570\u53EF\u4EE5\u4F7F\u7528 <code>new</code> \u6765\u5B9E\u4F8B\u5316\uFF0C\u56E0\u6B64\u5B83\u7684\u7C7B\u578B\u901A\u5E38\u8868\u793A\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5F53 <code>infer</code> \u7528\u4E8E\u6784\u9020\u51FD\u6570\u7C7B\u578B\u4E2D\uFF0C\u53EF\u7528\u4E8E\u53C2\u6570\u4F4D\u7F6E <code>new (...args: infer P) =&gt; any;</code> \u548C\u8FD4\u56DE\u503C\u4F4D\u7F6E <code>new (...args: any[]) =&gt; infer P;</code>\u3002</p><p>\u56E0\u6B64\u5C31\u5185\u7F6E\u5982\u4E0B\u4E24\u4E2A\u6620\u5C04\u7C7B\u578B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u83B7\u53D6\u53C2\u6570\u7C7B\u578B</span>
<span class="token keyword">type</span> <span class="token class-name">ConstructorParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
  <span class="token operator">?</span> <span class="token constant">P</span>
  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token comment">// \u83B7\u53D6\u5B9E\u4F8B\u7C7B\u578B</span>
<span class="token keyword">type</span> <span class="token class-name">InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">TestClass</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Params</span> <span class="token operator">=</span> ConstructorParameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [string, number]</span>

<span class="token keyword">type</span> <span class="token class-name">Instance</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TestClass<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// TestClass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h2 id="\u4E00\u4E9B\u7528\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u4E00\u4E9B\u7528\u4F8B" aria-hidden="true">#</a> \u4E00\u4E9B\u7528\u4F8B</h2><p>\u81F3\u6B64\uFF0C\u76F8\u4FE1\u4F60\u5DF2\u7ECF\u5BF9 <code>infer</code> \u5DF2\u6709\u57FA\u672C\u4E86\u89E3\uFF0C\u6765\u770B\u770B\u4E00\u4E9B\u4F7F\u7528\u5B83\u7684\u300C\u9A9A\u64CD\u4F5C\u300D\uFF1A</p>`,10),v=t(`<p><strong>tuple</strong> \u8F6C <strong>union</strong> \uFF0C\u5982\uFF1A<code>[string, number]</code> -&gt; <code>string | number</code></p><p>\u89E3\u7B54\u4E4B\u524D\uFF0C\u9700\u8981\u4E86\u89E3 tuple \u7C7B\u578B\u5728\u4E00\u5B9A\u6761\u4EF6\u4E0B\uFF0C\u662F\u53EF\u4EE5\u8D4B\u503C\u7ED9\u6570\u7EC4\u7C7B\u578B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">TArray</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Res</span> <span class="token operator">=</span> TTuple <span class="token keyword">extends</span> <span class="token class-name">TArray</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">type</span> <span class="token class-name">ResO</span> <span class="token operator">=</span> TArray <span class="token keyword">extends</span> <span class="token class-name">TTuple</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u56E0\u6B64\uFF0C\u5728\u914D\u5408 <code>infer</code> \u65F6\uFF0C\u8FD9\u5F88\u5BB9\u6613\u505A\u5230\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ElementOf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">E</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">E</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ToUnion</span> <span class="token operator">=</span> ElementOf<span class="token operator">&lt;</span>TTuple<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,5),f=n("\u5728 "),w={href:"https://stackoverflow.com/questions/44480644/typescript-string-union-to-string-array/45486495#45486495",target:"_blank",rel:"noopener noreferrer"},x=n("stackoverflow"),P=n(" \u4E0A\u770B\u5230\u53E6\u4E00\u79CD\u89E3\u6CD5\uFF0C\u6BD4\u8F83\u7B80\uFF08\u725B\uFF09\u5355\uFF08\u903C\uFF09\uFF1A"),U=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Res</span> <span class="token operator">=</span> TTuple<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,1),A=s("p",null,[s("strong",null,"union"),n(" \u8F6C "),s("strong",null,"intersection"),n("\uFF0C\u5982\uFF1A"),s("code",null,"T1 | T2"),n(" -> "),s("code",null,"T1 & T2")],-1),M=n("\u8FD9\u4E2A\u53EF\u80FD\u8981\u7A0D\u5FAE\u9EBB\u70E6\u4E00\u70B9\uFF0C\u9700\u8981 "),C=s("code",null,"infer",-1),I=n(" \u914D\u5408\u300C "),R={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types",target:"_blank",rel:"noopener noreferrer"},F=n("Distributive conditional types"),B=n(" \u300D\u4F7F\u7528\u3002"),E=n("\u5728"),S={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types",target:"_blank",rel:"noopener noreferrer"},N=n("\u76F8\u5173\u94FE\u63A5"),L=t("\u4E2D\uFF0C\u53EF\u4EE5\u4E86\u89E3\u5230\u300CDistributive conditional types\u300D\u662F\u7531\u300Cnaked type parameter\u300D\u6784\u6210\u7684\u6761\u4EF6\u7C7B\u578B\u3002\u800C\u300Cnaked type parameter\u300D\u8868\u793A\u6CA1\u6709\u88AB <code>Wrapped</code> \u7684\u7C7B\u578B\uFF08\u5982\uFF1A<code>Array&lt;T&gt;</code>\u3001<code>[T]</code>\u3001<code>Promise&lt;T&gt;</code> \u7B49\u90FD\u662F\u4E0D\u662F\u300Cnaked type parameter\u300D\uFF09\u3002\u300CDistributive conditional types\u300D\u4E3B\u8981\u7528\u4E8E\u62C6\u5206 <code>extends</code> \u5DE6\u8FB9\u90E8\u5206\u7684\u8054\u5408\u7C7B\u578B\uFF0C\u4E3E\u4E2A\u4F8B\u5B50\uFF1A\u5728\u6761\u4EF6\u7C7B\u578B <code>T extends U ? X : Y</code> \u4E2D\uFF0C\u5F53 <code>T</code> \u662F <code>A | B</code> \u65F6\uFF0C\u4F1A\u62C6\u5206\u6210 <code>A extends U ? X : Y | B extends U ? X : Y</code>\uFF1B",19),O=n("\u6709\u4E86\u8FD9\u4E2A\u524D\u63D0\uFF0C\u518D\u5229\u7528\u5728\u9006\u53D8\u4F4D\u7F6E\u4E0A\uFF0C"),V={href:"https://github.com/Microsoft/TypeScript/pull/21496",target:"_blank",rel:"noopener noreferrer"},z=n("\u540C\u4E00\u7C7B\u578B\u53D8\u91CF\u7684\u591A\u4E2A\u5019\u9009\u7C7B\u578B\u5C06\u4F1A\u88AB\u63A8\u65AD\u4E3A\u4EA4\u53C9\u7C7B\u578B"),D=n("\u7684\u7279\u6027\uFF0C\u5373"),X=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Bar<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T20</span></span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T21</span></span> <span class="token operator">=</span> Bar<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// T1 &amp; T2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,1),Y=n("\u56E0\u6B64\uFF0C\u7EFC\u5408\u4EE5\u4E0A\u51E0\u70B9\uFF0C\u53EF\u4EE5\u5F97\u5230\u5728 "),q={href:"https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type",target:"_blank",rel:"noopener noreferrer"},G=n("stackoverflow"),H=n(" \u4E0A\u7684\u4E00\u4E2A\u7B54\u6848\uFF1A"),W=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">T1</span> <span class="token operator">|</span> <span class="token constant">T2</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// T1 &amp; T2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5F53\u4F20\u5165 <code>T1 | T2</code> \u65F6\uFF1A</p><ul><li><p>\u7B2C\u4E00\u6B65\uFF1A<code>(U extends any ? (k: U) =&gt; void : never)</code> \u4F1A\u628A union \u62C6\u5206\u6210 <code>(T1 extends any ? (k: T1) =&gt; void : never) | (T2 extends any ? (k: T2)=&gt; void : never)</code>\uFF0C\u5373\u662F\u5F97\u5230 <code>(k: T1) =&gt; void | (k: T2) =&gt; void</code>\uFF1B</p></li><li><p>\u7B2C\u4E8C\u6B65\uFF1A<code>(k: T1) =&gt; void | (k: T2) =&gt; void extends ((k: infer I) =&gt; void) ? I : never</code>\uFF0C\u6839\u636E\u4E0A\u6587\uFF0C\u53EF\u4EE5\u63A8\u65AD\u51FA <code>I</code> \u4E3A <code>T1 &amp; T2</code>\u3002</p></li></ul>`,3),j=n("\u5F53\u7136\uFF0C\u4F60\u53EF\u4EE5\u73A9\u51FA\u66F4\u591A\u82B1\u6837\uFF0C\u6BD4\u5982 "),J={href:"https://zhuanlan.zhihu.com/p/58704376",target:"_blank",rel:"noopener noreferrer"},K=s("strong",null,"union",-1),Q=n(" \u8F6C "),Z=s("strong",null,"tuple",-1),$=n("\u3002"),ss=s("h2",{id:"leetcode-\u7684\u4E00\u9053-typescript-\u9762\u8BD5\u9898",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#leetcode-\u7684\u4E00\u9053-typescript-\u9762\u8BD5\u9898","aria-hidden":"true"},"#"),n(" LeetCode \u7684\u4E00\u9053 TypeScript \u9762\u8BD5\u9898")],-1),ns=n("\u524D\u6BB5\u65F6\u95F4\uFF0C\u5728 "),as={href:"https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md",target:"_blank",rel:"noopener noreferrer"},ps=n("GitHub"),ts=n(" \u4E0A\uFF0C\u53D1\u73B0\u4E00\u9053\u6765\u81EA LeetCode TypeScript \u7684\u9762\u8BD5\u9898\uFF0C\u6BD4\u8F83\u6709\u610F\u601D\uFF0C\u9898\u76EE\u7684\u5927\u81F4\u610F\u601D\u662F\uFF1A"),es=t(`<p>\u5047\u8BBE\u6709\u4E00\u4E2A\u8FD9\u6837\u7684\u7C7B\u578B\uFF08\u539F\u9898\u4E2D\u7ED9\u51FA\u7684\u662F\u7C7B\uFF0C\u8FD9\u91CC\u7B80\u5316\u4E3A interface\uFF09\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>
  count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">asyncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">syncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>action<span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u5728\u7ECF\u8FC7 <code>Connect</code> \u51FD\u6570\u4E4B\u540E\uFF0C\u8FD4\u56DE\u503C\u7C7B\u578B\u4E3A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token generic-function"><span class="token function">asyncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">syncMethod</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Action<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u5176\u4E2D <code>Action&lt;T&gt;</code> \u7684\u5B9A\u4E49\u4E3A\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Action<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u8FD9\u91CC\u4E3B\u8981\u8003\u5BDF\u4E24\u70B9</p><ul><li>\u6311\u9009\u51FA\u51FD\u6570</li><li>\u6B64\u7BC7\u6587\u7AE0\u6240\u63D0\u53CA\u7684 <code>infer</code></li></ul>`,8),os=n("\u6311\u9009\u51FD\u6570\u7684\u65B9\u6CD5\uFF0C\u5DF2\u7ECF\u5728 "),cs={href:"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html",target:"_blank",rel:"noopener noreferrer"},ls=n("handbook"),rs=n(" \u4E2D\u5DF2\u7ECF\u7ED9\u51FA\uFF0C\u53EA\u9700\u5224\u65AD value \u80FD\u8D4B\u503C\u7ED9 Function \u5C31\u884C\u4E86\uFF1A"),is=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FuncName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Connect</span> <span class="token operator">=</span> <span class="token punctuation">(</span>module<span class="token operator">:</span> Module<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">T</span> <span class="token keyword">in</span> FuncName<span class="token operator">&lt;</span>Module<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> Module<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/*
 * type Connect = (module: Module) =&gt; {
 *   asyncMethod: &lt;T, U&gt;(input: Promise&lt;T&gt;) =&gt; Promise&lt;Action&lt;U&gt;&gt;;
 *   syncMethod: &lt;T, U&gt;(action: Action&lt;T&gt;) =&gt; Action&lt;U&gt;;
 * }
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u63A5\u4E0B\u6765\u5C31\u6BD4\u8F83\u7B80\u5355\u4E86\uFF0C\u4E3B\u8981\u662F\u5229\u7528\u6761\u4EF6\u7C7B\u578B + <code>infer</code>\uFF0C\u5982\u679C\u51FD\u6570\u53EF\u4EE5\u8D4B\u503C\u7ED9 <code>asyncMethod&lt;T, U&gt;(input: Promise&lt;T&gt;): Promise&lt;Action&lt;U&gt;&gt;</code>\uFF0C\u5219\u53D6\u503C\u4E3A <code>asyncMethod&lt;T, U&gt;(input: T): Action&lt;U&gt;</code>\u3002\u5177\u4F53\u7B54\u6848\u5C31\u4E0D\u7ED9\u51FA\u4E86\uFF0C\u611F\u5174\u8DA3\u7684\u5C0F\u4F19\u4F34\u53EF\u4EE5\u5C1D\u8BD5\u4E00\u4E0B\u3002</p>`,2);function ks(us,ds){const a=e("ExternalLinkIcon");return o(),c(l,null,[k,u,s("p",null,[d,b,s("a",m,[g,p(a)]),y,h,_]),T,s("ul",null,[s("li",null,[v,s("p",null,[f,s("a",w,[x,p(a)]),P]),U]),s("li",null,[A,s("p",null,[M,C,I,s("a",R,[F,p(a)]),B]),s("p",null,[E,s("a",S,[N,p(a)]),L]),s("p",null,[O,s("a",V,[z,p(a)]),D]),X,s("p",null,[Y,s("a",q,[G,p(a)]),H]),W])]),s("p",null,[j,s("a",J,[K,Q,Z,p(a)]),$]),ss,s("p",null,[ns,s("a",as,[ps,p(a)]),ts]),es,s("p",null,[os,s("a",cs,[ls,p(a)]),rs]),is],64)}var gs=r(i,[["render",ks]]);export{gs as default};
