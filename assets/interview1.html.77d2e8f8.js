import{o as p,c as t,b as s,F as e,a as n}from"./app.b05da4ec.js";import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";const c={},l=n(`<h1 id="react-\u6E90\u7801\u89E3\u6790" tabindex="-1"><a class="header-anchor" href="#react-\u6E90\u7801\u89E3\u6790" aria-hidden="true">#</a> React \u6E90\u7801\u89E3\u6790</h1><h2 id="\u57FA\u7840\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#\u57FA\u7840\u6982\u5FF5" aria-hidden="true">#</a> \u57FA\u7840\u6982\u5FF5</h2><ul><li><p><strong>ReactElement</strong></p><ul><li><p>\u6570\u636E\u7C7B\uFF0C\u53EA\u5305\u542B <code>props</code> <code>refs</code> <code>key</code> \u7B49</p></li><li><p>\u7531 <code>React.creatElement(ReactElement.js)</code> \u521B\u5EFA\uFF0C<code>React.createClass</code> \u4E2D <code>render</code> \u4E2D\u8FD4\u56DE\u7684\u5B9E\u9645\u4E5F\u662F\u4E2A <code>ReactElement</code></p></li></ul></li><li><p><strong>ReactComponent</strong></p><ul><li><p>\u63A7\u5236\u7C7B\uFF0C\u5305\u542B\u7EC4\u4EF6\u72B6\u6001\uFF0C\u64CD\u4F5C\u65B9\u6CD5\u7B49</p></li><li><p>\u5305\u62EC\u5B57\u7B26\u7EC4\u4EF6\u3001\u539F\u751F DOM \u7EC4\u4EF6\u3001\u81EA\u5B9A\u4E49\u7EC4\u4EF6(\u548C\u7A7A\u7EC4\u4EF6)</p></li><li><p>\u5728\u6302\u8F7D\u7EC4\u4EF6(<code>mountComponent</code>)\u7684\u65F6\u5019\uFF0C\u4F1A\u8C03\u7528\u5230 <code>instantiateReactComponent</code> \u65B9\u6CD5\uFF0C\u5229\u7528\u5DE5\u5382\u6A21\u5F0F\uFF0C\u901A\u8FC7\u4E0D\u540C\u7684\u8F93\u5165\u8FD4\u56DE\u4E0D\u540C\u7684 <code>component</code></p></li><li><p>\u4EE3\u7801(<code>instantiateReactComponent.js</code>)\uFF1A</p></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">instantiateReactComponent</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> shouldHaveDebugID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> instance<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> node <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        instance <span class="token operator">=</span> ReactEmptyComponent<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>instantiateReactComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> element <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token comment">// Special case string values</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> element<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> ReactHostComponent<span class="token punctuation">.</span><span class="token function">createInternalComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInternalComponentType</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// This is temporarily available for custom components that are not string</span>
            <span class="token comment">// representation, we can drop this code path.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactCompositeComponentWrapper</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        instance <span class="token operator">=</span> ReactHostComponent<span class="token punctuation">.</span><span class="token function">createInstanceForText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// These two fields are used by the DOM and ART diffing algorithms</span>
    <span class="token comment">// respectively. Instead of using expandos on components, we should be</span>
    <span class="token comment">// storing the state needed by the diffing algorithms elsewhere.</span>
    instance<span class="token punctuation">.</span>_mountIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    instance<span class="token punctuation">.</span>_mountImage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ul><li><p><code>ReactDOMTextComponent</code> \u53EA\u5173\u5FC3\u6587\u672C\uFF0C<code>ReactDOMComponent</code> \u4F1A\u7A0D\u5FAE\u7B80\u5355\u4E00\u4E9B\uFF0C<code>ReactCompositeComponent</code> \u9700\u8981\u5173\u5FC3\u7684\u6700\u591A\uFF0C\u5305\u62EC\u5F97\u5230\u539F\u751F <code>DOM</code> \u7684\u6E32\u67D3\u5185\u5BB9</p></li><li><p><strong>ReactClass</strong></p><ul><li><p>\u8FD9\u4E2A\u6BD4\u8F83\u7279\u6B8A\uFF0C\u5BF9\u6BD4 <code>ES5</code> \u5199\u6CD5: <code>var MyComponent = React.createClass({})</code>\uFF0CES6\u5199\u6CD5\uFF1A<code>class MyComponent extends React.Component</code>\uFF0C\u4E3A\u4EC0\u4E48\u7528<code>createClass</code>\u5374\u5F97\u5230\u4E86<code>Component</code>\u5462\uFF1F\u901A\u8FC7\u6E90\u7801\u6765\u770B\uFF0C\u8FD9\u4E24\u4E2A <code>api</code> \u7684\u5B9E\u73B0\u51E0\u4E4E\u662F\u4E00\u6837\u7684\uFF0C\u4E5F\u53EF\u4EE5\u770B\u5230\uFF0C<code>ES6</code> \u7684\u5199\u6CD5\u7B80\u6D01\u7684\u591A\uFF0C\u4E0D\u7528\u90A3\u4E9B<code>getInitialState</code>\u7B49\u7279\u5B9A <code>api</code>\uFF0C<code>React</code> \u5728\u4E4B\u540E\u7684\u7248\u672C\u4E5F\u4F1A\u629B\u5F03<code>createClass</code>\u8FD9\u4E2A <code>api</code>\u3002\u5E76\u4E14\uFF0C\u5728\u6B64 <code>api</code> \u4E2D\uFF0C<code>React</code> \u8FDB\u884C\u4E86<code>autobind</code>\u3002</p></li><li><p>ReactClass.js:</p></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> ReactClass <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">createClass</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">spec</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ensure that Constructor.name !== &#39;Constructor&#39;</span>
    <span class="token keyword">var</span> Constructor <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Wire up auto-binding</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>__reactAutoBindPairs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">bindAutoBindMethods</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token comment">// ReactClasses doesn&#39;t have constructors. Instead, they use the</span>
      <span class="token comment">// getInitialState and componentWillMount methods for initialization.</span>
      <span class="token keyword">var</span> initialState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getInitialState <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInitialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> initialState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactClassComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Constructor<span class="token punctuation">;</span>
    <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__reactAutoBindPairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    injectedMixins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">mixSpecIntoComponent</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> Constructor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mixSpecIntoComponent</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Initialize the defaultProps property after all mixins have been merged.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Constructor<span class="token punctuation">.</span>getDefaultProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Constructor<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> Constructor<span class="token punctuation">.</span><span class="token function">getDefaultProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Reduce time spent doing lookups by setting these on the prototype.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> methodName <span class="token keyword">in</span> ReactClassInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Constructor<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">ReactClassComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">_assign</span><span class="token punctuation">(</span><span class="token class-name">ReactClassComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">ReactComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> ReactClassMixin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><ul><li>ReactComponent.js:</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ReactComponent</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">ReactComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ReactComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">partialState<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> partialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">&#39;setState&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ReactComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">forceUpdate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueForceUpdate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">&#39;forceUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="\u5BF9\u8C61\u6C60" tabindex="-1"><a class="header-anchor" href="#\u5BF9\u8C61\u6C60" aria-hidden="true">#</a> \u5BF9\u8C61\u6C60</h2><ul><li><p>\u5F00\u8F9F\u7A7A\u95F4\u662F\u9700\u8981\u4E00\u5B9A\u4EE3\u4EF7\u7684</p></li><li><p>\u5982\u679C\u5F15\u7528\u91CA\u653E\u800C\u8FDB\u5165 <code>gc</code>\uFF0C<code>gc</code> \u4F1A\u6BD4\u8F83\u6D88\u8017\u6027\u80FD\u548C\u65F6\u95F4\uFF0C\u5982\u679C\u5185\u5B58\u6296\u52A8(\u5927\u91CF\u7684\u5BF9\u8C61\u88AB\u521B\u5EFA\u53C8\u5728\u77ED\u65F6\u95F4\u5185\u9A6C\u4E0A\u88AB\u91CA\u653E)\u800C\u9891\u7E41 <code>gc</code> \u5219\u4F1A\u5F71\u54CD\u7528\u6237\u4F53\u9A8C</p></li><li><p>\u65E2\u7136\u521B\u5EFA\u548C\u9500\u6BC1\u5BF9\u8C61\u662F\u5F88\u8017\u65F6\u7684\uFF0C\u6240\u4EE5\u8981\u5C3D\u53EF\u80FD\u51CF\u5C11\u521B\u5EFA\u548C\u9500\u6BC1\u5BF9\u8C61\u7684\u6B21\u6570</p></li><li><p>\u4F7F\u7528\u65F6\u5019\u7533\u8BF7(<code>getPooled</code>)\u548C\u91CA\u653E(<code>release</code>)\u6210\u5BF9\u51FA\u73B0\uFF0C\u4F7F\u7528\u4E00\u4E2A\u5BF9\u8C61\u540E\u4E00\u5B9A\u8981\u91CA\u653E\u8FD8\u7ED9\u6C60\u5B50(<code>\u91CA\u653E\u65F6\u5019\u8981\u5BF9\u5185\u90E8\u53D8\u91CF\u7F6E\u7A7A\u65B9\u4FBF\u4E0B\u6B21\u4F7F\u7528</code>)</p></li><li><p>\u4EE3\u7801(<code>PooledClass.js</code>)\uFF1A</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u53EA\u5C55\u793A\u90E8\u5206</span>
<span class="token keyword">var</span> <span class="token function-variable function">oneArgumentPooler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">copyFieldsFrom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> Klass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Klass<span class="token punctuation">.</span>instancePool<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> instance <span class="token operator">=</span> Klass<span class="token punctuation">.</span>instancePool<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Klass</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> copyFieldsFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Klass</span><span class="token punctuation">(</span>copyFieldsFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">standardReleaser</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> Klass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Klass<span class="token punctuation">.</span>instancePool<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> Klass<span class="token punctuation">.</span>poolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Klass<span class="token punctuation">.</span>instancePool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">DEFAULT_POOL_SIZE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">DEFAULT_POOLER</span> <span class="token operator">=</span> oneArgumentPooler<span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">addPoolingTo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">CopyConstructor<span class="token punctuation">,</span> pooler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Casting as any so that flow ignores the actual implementation and trusts</span>
  <span class="token comment">// it to match the type we declared</span>
  <span class="token keyword">var</span> NewKlass <span class="token operator">=</span> CopyConstructor<span class="token punctuation">;</span>
  NewKlass<span class="token punctuation">.</span>instancePool <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  NewKlass<span class="token punctuation">.</span>getPooled <span class="token operator">=</span> pooler <span class="token operator">||</span> <span class="token constant">DEFAULT_POOLER</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>NewKlass<span class="token punctuation">.</span>poolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    NewKlass<span class="token punctuation">.</span>poolSize <span class="token operator">=</span> <span class="token constant">DEFAULT_POOL_SIZE</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  NewKlass<span class="token punctuation">.</span>release <span class="token operator">=</span> standardReleaser<span class="token punctuation">;</span>
  <span class="token keyword">return</span> NewKlass<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> PooledClass <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">addPoolingTo</span><span class="token operator">:</span> addPoolingTo<span class="token punctuation">,</span>
  <span class="token literal-property property">oneArgumentPooler</span><span class="token operator">:</span> oneArgumentPooler<span class="token punctuation">,</span>
  <span class="token literal-property property">twoArgumentPooler</span><span class="token operator">:</span> twoArgumentPooler<span class="token punctuation">,</span>
  <span class="token literal-property property">threeArgumentPooler</span><span class="token operator">:</span> threeArgumentPooler<span class="token punctuation">,</span>
  <span class="token literal-property property">fourArgumentPooler</span><span class="token operator">:</span> fourArgumentPooler<span class="token punctuation">,</span>
  <span class="token literal-property property">fiveArgumentPooler</span><span class="token operator">:</span> fiveArgumentPooler
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> PooledClass<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><ul><li>\u4F7F\u7528\u4F8B\u5B50(<code>ReactUpdate.js</code>)\uFF1A</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> transaction <span class="token operator">=</span> ReactUpdatesFlushTransaction<span class="token punctuation">.</span><span class="token function">getPooled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function-variable function">destructor</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dirtyComponentsLength <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    CallbackQueue<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbackQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbackQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    ReactUpdates<span class="token punctuation">.</span>ReactReconcileTransaction<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reconcileTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reconcileTransaction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
ReactUpdatesFlushTransaction<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p>\u53EF\u4EE5\u770B\u5230\uFF0C\u5982\u679C\u77ED\u65F6\u95F4\u5185\u751F\u6210\u4E86\u5927\u91CF\u7684\u5BF9\u8C61\u5360\u6EE1\u4E86\u6C60\u5B50\uFF0C\u540E\u7EED\u7684\u5BF9\u8C61\u662F\u4E0D\u80FD\u590D\u7528\u53EA\u80FD\u65B0\u5EFA\u7684</p></li><li><p>\u5BF9\u6BD4\u8FDE\u63A5\u6C60\u3001\u7EBF\u7A0B\u6C60\uFF1A\u5B8C\u6210\u4EFB\u52A1\u540E\u5E76\u4E0D\u9500\u6BC1\uFF0C\u800C\u662F\u53EF\u4EE5\u590D\u7528\u53BB\u6267\u884C\u5176\u4ED6\u4EFB\u52A1</p></li></ul><h2 id="\u4E8B\u52A1\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#\u4E8B\u52A1\u673A\u5236" aria-hidden="true">#</a> \u4E8B\u52A1\u673A\u5236</h2><ul><li><p><code>React</code> \u901A\u8FC7\u4E8B\u52A1\u673A\u5236\u6765\u5B8C\u6210\u4E00\u4E9B\u7279\u5B9A\u64CD\u4F5C\uFF0C\u6BD4\u5982 <code>merge state</code>\uFF0C<code>update component</code></p></li><li><p>\u793A\u610F\u56FE(<code>Transaction.js</code>)\uFF1A</p></li></ul>`,16),u=["src"],r=n(`<ul><li>\u4EE3\u7801(<code>Transaction.js</code>)\uFF1A</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> TransactionImpl <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">perform</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> scope<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> errorThrown<span class="token punctuation">;</span>
    <span class="token keyword">var</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_isInTransaction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token comment">// Catching errors makes debugging more difficult, so we start with</span>
      <span class="token comment">// errorThrown set to true before setting it to false after calling</span>
      <span class="token comment">// close -- if it&#39;s still set to true in the finally block, it means</span>
      <span class="token comment">// one of these calls threw.</span>
      errorThrown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initializeAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ret <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
      errorThrown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorThrown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// If \`method\` throws, prefer to show that stack trace over any thrown</span>
          <span class="token comment">// by invoking \`closeAll\`.</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// Since \`method\` didn&#39;t throw, we don&#39;t want to silence the exception</span>
          <span class="token comment">// here.</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_isInTransaction <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// \u6267\u884C\u6240\u6709 wrapper \u4E2D\u7684 initialize \u65B9\u6CD5</span>
  <span class="token function-variable function">initializeAll</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">startIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// \u6267\u884C\u6240\u6709 wrapper \u4E2D\u7684 close \u65B9\u6CD5</span>
  <span class="token function-variable function">closeAll</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">startIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> TransactionImpl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><ul><li><p>\u53EF\u4EE5\u770B\u5230\u548C\u540E\u7AEF\u7684\u4E8B\u52A1\u662F\u6709\u5DEE\u5F02\u7684(\u6709\u70B9\u7C7B\u4F3C<code>AOP</code>)\uFF0C\u867D\u7136\u90FD\u53EB<code>transaction</code>\uFF0C\u5E76\u6CA1\u6709<code>commit</code>\uFF0C\u800C\u662F\u81EA\u52A8\u6267\u884C\uFF0C\u521D\u59CB\u65B9\u6CD5\u6CA1\u6709\u63D0\u4F9B<code>rollback</code>\uFF0C\u6709\u4E8C\u6B21\u5C01\u88C5\u63D0\u4F9B\u7684(<code>ReactReconcileTransaction.js</code>)</p></li><li><p>\u4E0B\u6587\u4F1A\u63D0\u5230\u4E8B\u52A1\u673A\u5236\u7684\u5177\u4F53\u4F7F\u7528\u573A\u666F</p></li></ul><h2 id="\u4E8B\u4EF6\u5206\u53D1" tabindex="-1"><a class="header-anchor" href="#\u4E8B\u4EF6\u5206\u53D1" aria-hidden="true">#</a> \u4E8B\u4EF6\u5206\u53D1</h2><ul><li>\u6846\u56FE(<code>ReactBrowserEventEmitter.js</code>)</li></ul>`,5),i=["src"],k=n('<ul><li><p>\u7EC4\u4EF6\u4E0A\u58F0\u660E\u7684\u4E8B\u4EF6\u6700\u7EC8\u7ED1\u5B9A\u5230\u4E86 <code>document</code> \u4E0A\uFF0C\u800C\u4E0D\u662F <code>React</code> \u7EC4\u4EF6\u5BF9\u5E94\u7684 <code>DOM</code> \u8282\u70B9\uFF0C\u8FD9\u6837\u7B80\u5316\u4E86 <code>DOM</code> \u539F\u751F\u4E8B\u4EF6\uFF0C\u51CF\u5C11\u4E86\u5185\u5B58\u5F00\u9500</p></li><li><p>\u4EE5\u961F\u5217\u7684\u65B9\u5F0F\uFF0C\u4ECE\u89E6\u53D1\u4E8B\u4EF6\u7684\u7EC4\u4EF6\u5411\u7236\u7EC4\u4EF6\u56DE\u6EAF\uFF0C\u8C03\u7528\u76F8\u5E94 <code>callback</code>\uFF0C\u4E5F\u5C31\u662F <code>React</code> \u81EA\u8EAB\u5B9E\u73B0\u4E86\u4E00\u5957\u4E8B\u4EF6\u5192\u6CE1\u673A\u5236\uFF0C\u867D\u7136 <code>React</code> \u5BF9\u5408\u6210\u4E8B\u4EF6\u5C01\u88C5\u4E86<code>stopPropagation</code>\uFF0C\u4F46\u662F\u5E76\u4E0D\u80FD\u963B\u6B62\u81EA\u5DF1\u624B\u52A8\u7ED1\u5B9A\u7684\u539F\u751F\u4E8B\u4EF6\u7684\u5192\u6CE1\uFF0C\u6240\u4EE5\u9879\u76EE\u4E2D\u8981\u907F\u514D\u624B\u52A8\u7ED1\u5B9A\u539F\u751F\u4E8B\u4EF6</p></li><li><p>\u4F7F\u7528\u5BF9\u8C61\u6C60\u6765\u7BA1\u7406\u5408\u6210\u4E8B\u4EF6\u5BF9\u8C61\u7684\u521B\u5EFA\u548C\u9500\u6BC1\uFF0C\u597D\u5904\u5728\u4E0A\u6587\u4E2D\u6709\u63CF\u8FF0</p></li><li><p><code>ReactEventListener</code>\uFF1A\u8D1F\u8D23\u4E8B\u4EF6\u6CE8\u518C\u548C\u4E8B\u4EF6\u5206\u53D1</p></li><li><p><code>ReactEventEmitter</code>\uFF1A\u8D1F\u8D23\u4E8B\u4EF6\u6267\u884C</p></li><li><p><code>EventPluginHub</code>\uFF1A\u8D1F\u8D23\u4E8B\u4EF6\u7684\u5B58\u50A8\uFF0C\u5177\u4F53\u5B58\u50A8\u5728<code>listenerBank</code></p></li><li><p><code>Plugin</code>: \u6839\u636E\u4E0D\u540C\u7684\u4E8B\u4EF6\u7C7B\u578B\uFF0C\u6784\u9020\u4E0D\u540C\u7684\u5408\u6210\u4E8B\u4EF6\uFF0C\u53EF\u4EE5\u8FDE\u63A5\u539F\u751F\u4E8B\u4EF6\u548C\u7EC4\u4EF6</p></li><li><p>\u5F53\u4E8B\u4EF6\u89E6\u53D1\u65F6\uFF0C\u4F1A\u8C03\u7528<code>ReactEventListener.dispatchEvent</code>\uFF0C\u8FDB\u884C\u5206\u53D1\uFF1A\u627E\u5230\u5177\u4F53\u7684 <code>ReactComponent</code>\uFF0C\u7136\u540E\u5411\u4E0A\u904D\u5386\u7236\u7EC4\u4EF6\uFF0C\u5B9E\u73B0\u5192\u6CE1</p></li><li><p>\u4EE3\u7801\u8F83\u591A\uFF0C\u5C31\u4E0D\u5177\u4F53\u5206\u6790\u4E86\uFF0C\u8FD9\u79CD\u7EDF\u4E00\u6536\u96C6\u7136\u540E\u5206\u53D1\u7684\u601D\u8DEF\uFF0C\u53EF\u4EE5\u7528\u5728\u5177\u4F53\u9879\u76EE\u4E2D</p></li></ul><h2 id="\u751F\u547D\u5468\u671F" tabindex="-1"><a class="header-anchor" href="#\u751F\u547D\u5468\u671F" aria-hidden="true">#</a> \u751F\u547D\u5468\u671F</h2><ul><li>\u6574\u4F53\u6D41\u7A0B:</li></ul>',3),d=["src"],m=n(`<ul><li><p>\u4E3B\u8981\u8BB2\u8FF0<code>mount</code>\u548C<code>update</code>\uFF0C\u91CC\u9762\u4E5F\u6709\u5F88\u591A\u76F8\u7C7B\u4F3C\u7684\u64CD\u4F5C</p></li><li><p><code>componentWillMount</code>\uFF0C<code>render</code>\uFF0C<code>componentDidMount</code> \u90FD\u662F\u5728 <code>mountComponent</code> \u4E2D\u88AB\u8C03\u7528</p></li><li><p>\u5206\u6790 <code>ReactCompositeComponent.js</code> \u4E2D\u7684<code>mountComponent</code>\uFF0C\u53D1\u73B0\u8F93\u51FA\u662F<code>@return {?string} Rendered markup to be inserted into the DOM</code>.</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">mountComponent</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">transaction<span class="token punctuation">,</span> hostParent<span class="token punctuation">,</span> hostContainerInfo<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_context <span class="token operator">=</span> context<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_mountOrder <span class="token operator">=</span> nextMountID<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_hostParent <span class="token operator">=</span> hostParent<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_hostContainerInfo <span class="token operator">=</span> hostContainerInfo<span class="token punctuation">;</span>
    <span class="token keyword">var</span> publicProps <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_currentElement<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">var</span> publicContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_processContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> Component <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_currentElement<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
    <span class="token keyword">var</span> updateQueue <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getUpdateQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Initialize the public class</span>
    <span class="token keyword">var</span> doConstruct <span class="token operator">=</span> <span class="token function">shouldConstruct</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u6700\u7EC8\u4F1A\u8C03\u7528 new Component()</span>
    <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_constructComponent</span><span class="token punctuation">(</span>doConstruct<span class="token punctuation">,</span> publicProps<span class="token punctuation">,</span> publicContext<span class="token punctuation">,</span> updateQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> renderedElement<span class="token punctuation">;</span>
    <span class="token comment">// Support functional components</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doConstruct <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>inst <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> inst<span class="token punctuation">.</span>render <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      renderedElement <span class="token operator">=</span> inst<span class="token punctuation">;</span>
      inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatelessComponent</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_compositeType <span class="token operator">=</span> CompositeTypes<span class="token punctuation">.</span>StatelessFunctional<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5927\u5BB6\u7ECF\u5E38\u5728\u7528\u6237\u7AEF\u7528\u5230\u7684 PureComponent\uFF0C\u4F1A\u5BF9 state \u8FDB\u884C\u6D45\u6BD4\u8F83\u7136\u540E\u51B3\u5B9A\u662F\u5426\u6267\u884C render</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPureComponent</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_compositeType <span class="token operator">=</span> CompositeTypes<span class="token punctuation">.</span>PureClass<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_compositeType <span class="token operator">=</span> CompositeTypes<span class="token punctuation">.</span>ImpureClass<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// These should be set up in the constructor, but as a convenience for</span>
    <span class="token comment">// simpler class abstractions, we set them up after the fact.</span>
    inst<span class="token punctuation">.</span>props <span class="token operator">=</span> publicProps<span class="token punctuation">;</span>
    inst<span class="token punctuation">.</span>context <span class="token operator">=</span> publicContext<span class="token punctuation">;</span>
    inst<span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span>
    inst<span class="token punctuation">.</span>updater <span class="token operator">=</span> updateQueue<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_instance <span class="token operator">=</span> inst<span class="token punctuation">;</span>
    <span class="token comment">// Store a reference from the instance back to the internal representation</span>
    <span class="token comment">// \u4EE5 element \u4E3A key\uFF0C\u5B58\u5728\u4E86 Map \u4E2D\uFF0C\u4E4B\u540E\u4F1A\u7528\u5230</span>
    ReactInstanceMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>inst<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> initialState <span class="token operator">=</span> inst<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialState <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      inst<span class="token punctuation">.</span>state <span class="token operator">=</span> initialState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_pendingStateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_pendingReplaceState <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_pendingForceUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> markup<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inst<span class="token punctuation">.</span>unstable_handleError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      markup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performInitialMountWithErrorHandling</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">,</span> hostParent<span class="token punctuation">,</span> hostContainerInfo<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      markup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performInitialMount</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">,</span> hostParent<span class="token punctuation">,</span> hostContainerInfo<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inst<span class="token punctuation">.</span>componentDidMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       transaction<span class="token punctuation">.</span><span class="token function">getReactMountReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>componentDidMount<span class="token punctuation">,</span> inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> markup<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">shouldConstruct</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span>prototype <span class="token operator">&amp;&amp;</span> <span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><ul><li><p>\u53EF\u4EE5\u770B\u5230\uFF0C<code>mountComponent</code> \u5148\u505A\u5B9E\u4F8B\u5BF9\u8C61\u7684\u521D\u59CB\u5316(<code>props</code>, <code>state</code> \u7B49)\uFF0C\u7136\u540E\u8C03\u7528<code>performInitialMount</code>\u6302\u8F7D(<code>performInitialMountWithErrorHandling</code>\u6700\u7EC8\u4E5F\u4F1A\u8C03\u7528<code>performInitialMount</code>\uFF0C\u53EA\u662F\u591A\u4E86\u9519\u8BEF\u5904\u7406)\uFF0C\u7136\u540E\u8C03\u7528<code>componentDidMount</code></p></li><li><p><code>transaction.getReactMountReady()</code>\u4F1A\u5F97\u5230<code>CallbackQueue</code>\uFF0C\u6240\u4EE5\u53EA\u662F\u52A0\u5165\u5230\u961F\u5217\u4E2D\uFF0C\u540E\u7EED\u6267\u884C</p></li><li><p>\u6765\u770B<code>performInitialMount</code>(\u4F9D\u7136\u5728 <code>ReactCompositeComponent.js</code> \u4E2D)</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">performInitialMount</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">renderedElement<span class="token punctuation">,</span> hostParent<span class="token punctuation">,</span> hostContainerInfo<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_instance<span class="token punctuation">;</span>
  <span class="token keyword">var</span> debugID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inst<span class="token punctuation">.</span>componentWillMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inst<span class="token punctuation">.</span><span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// When mounting, calls to \`setState\` by \`componentWillMount\` will set</span>
    <span class="token comment">// \`this._pendingStateQueue\` without triggering a re-render.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_pendingStateQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      inst<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_processPendingState</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>props<span class="token punctuation">,</span> inst<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// If not a stateless component, we now render</span>
  <span class="token comment">// \u8FD4\u56DE ReactElement\uFF0C\u8FD9\u4E5F\u5C31\u662F\u4E0A\u6587\u8BF4\u7684 render \u8FD4\u56DE ReactElement</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>renderedElement <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    renderedElement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_renderValidatedComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> nodeType <span class="token operator">=</span> ReactNodeTypes<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_renderedNodeType <span class="token operator">=</span> nodeType<span class="token punctuation">;</span>
  <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_instantiateReactComponent</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">,</span> nodeType <span class="token operator">!==</span> ReactNodeTypes<span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_renderedComponent <span class="token operator">=</span> child<span class="token punctuation">;</span>
  <span class="token keyword">var</span> markup <span class="token operator">=</span> ReactReconciler<span class="token punctuation">.</span><span class="token function">mountComponent</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> hostParent<span class="token punctuation">,</span> hostContainerInfo<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_processChildContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> debugID<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> markup<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li><p><code>performInitialMount</code> \u4E2D\u5148\u8C03\u7528<code>componentWillMount</code>\uFF0C\u8FD9\u4E2A\u8FC7\u7A0B\u4E2D <code>merge state</code>\uFF0C\u7136\u540E\u8C03\u7528<code>_renderValidatedComponent</code>(\u6700\u7EC8\u4F1A\u8C03\u7528<code>inst.render()</code> )\u8FD4\u56DE <code>ReactElement</code>\uFF0C\u7136\u540E\u8C03\u7528<code>_instantiateReactComponent</code> \u7531 <code>ReactElement</code> \u521B\u5EFA <code>ReactComponent</code>\uFF0C\u6700\u540E\u8FDB\u884C\u9012\u5F52\u6E32\u67D3\u3002</p></li><li><p>\u6302\u8F7D\u4E4B\u540E\uFF0C\u53EF\u4EE5\u901A\u8FC7<code>setState</code>\u6765\u66F4\u65B0(\u673A\u5236\u8F83\u4E3A\u590D\u6742\uFF0C\u540E\u6587\u4F1A\u5355\u72EC\u5206\u6790)\uFF0C\u6B64\u8FC7\u7A0B\u901A\u8FC7\u8C03\u7528<code>updateComponent</code>\u6765\u5B8C\u6210\u66F4\u65B0\u3002\u6765\u770B<code>updateComponent</code>(\u4F9D\u7136\u5728 <code>ReactCompositeComponent.js</code> \u4E2D)</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">updateComponent</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">transaction<span class="token punctuation">,</span> prevParentElement<span class="token punctuation">,</span> nextParentElement<span class="token punctuation">,</span> prevUnmaskedContext<span class="token punctuation">,</span> nextUnmaskedContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_instance<span class="token punctuation">;</span>
  <span class="token keyword">var</span> willReceive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> nextContext<span class="token punctuation">;</span>
  <span class="token comment">// context \u76F8\u5173\uFF0CReact \u5EFA\u8BAE\u5C11\u7528 context</span>
  <span class="token comment">// Determine if the context has changed or not</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_context <span class="token operator">===</span> nextUnmaskedContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nextContext <span class="token operator">=</span> inst<span class="token punctuation">.</span>context<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    nextContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_processContext</span><span class="token punctuation">(</span>nextUnmaskedContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    willReceive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> prevProps <span class="token operator">=</span> prevParentElement<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
  <span class="token keyword">var</span> nextProps <span class="token operator">=</span> nextParentElement<span class="token punctuation">.</span>props<span class="token punctuation">;</span>
  <span class="token comment">// Not a simple state update but a props update</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevParentElement <span class="token operator">!==</span> nextParentElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    willReceive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// An update here will schedule an update but immediately set</span>
  <span class="token comment">// _pendingStateQueue which will ensure that any state updates gets</span>
  <span class="token comment">// immediately reconciled instead of waiting for the next batch.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>willReceive <span class="token operator">&amp;&amp;</span> inst<span class="token punctuation">.</span>componentWillReceiveProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inst<span class="token punctuation">.</span><span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> nextState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_processPendingState</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> shouldUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_pendingForceUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inst<span class="token punctuation">.</span>shouldComponentUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      shouldUpdate <span class="token operator">=</span> inst<span class="token punctuation">.</span><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">,</span> nextContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_compositeType <span class="token operator">===</span> CompositeTypes<span class="token punctuation">.</span>PureClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8FD9\u91CC\uFF0C\u5C31\u662F\u4E0A\u6587\u63D0\u5230\u7684\uFF0CPureComponent \u91CC\u7684\u6D45\u6BD4\u8F83</span>
        shouldUpdate <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">shallowEqual</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>state<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_updateBatchNumber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_pendingForceUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// Will set \`this.props\`, \`this.state\` and \`this.context\`.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_performComponentUpdate</span><span class="token punctuation">(</span>nextParentElement<span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">,</span> nextContext<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> nextUnmaskedContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// If it&#39;s determined that a component should not update, we still want</span>
    <span class="token comment">// to set props and state but we shortcut the rest of the update.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_currentElement <span class="token operator">=</span> nextParentElement<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_context <span class="token operator">=</span> nextUnmaskedContext<span class="token punctuation">;</span>
    inst<span class="token punctuation">.</span>props <span class="token operator">=</span> nextProps<span class="token punctuation">;</span>
    inst<span class="token punctuation">.</span>state <span class="token operator">=</span> nextState<span class="token punctuation">;</span>
    inst<span class="token punctuation">.</span>context <span class="token operator">=</span> nextContext<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><ul><li><code>updateComponent</code>\u4E2D\uFF0C\u5148\u8C03\u7528<code>componentWillReceiveProps</code>\uFF0C\u7136\u540E <code>merge state</code>\uFF0C\u7136\u540E\u8C03\u7528<code>shouldComponentUpdate</code>\u5224\u65AD\u662F\u5426\u9700\u8981\u66F4\u65B0\uFF0C\u53EF\u4EE5\u770B\u5230\uFF0C\u5982\u679C\u7EC4\u4EF6\u5185\u90E8\u6CA1\u6709\u81EA\u5B9A\u4E49\uFF0C\u4E14\u7528\u7684\u662F <code>PureComponent</code>\uFF0C\u4F1A\u5BF9 <code>state</code> \u8FDB\u884C\u6D45\u6BD4\u8F83\uFF0C\u8BBE\u7F6E<code>shouldUpdate</code>\uFF0C\u6700\u7EC8\u8C03\u7528<code>_performComponentUpdate</code>\u6765\u8FDB\u884C\u66F4\u65B0\u3002\u800C\u5728<code>_performComponentUpdate</code>\u4E2D\uFF0C\u4F1A\u5148\u8C03\u7528<code>componentWillUpdate</code>\uFF0C\u7136\u540E\u8C03\u7528<code>updateRenderedComponent</code>\u8FDB\u884C\u66F4\u65B0\uFF0C\u6700\u540E\u8C03\u7528<code>componentDidUpdate</code>(\u8FC7\u7A0B\u8F83\u7B80\u5355\uFF0C\u5C31\u4E0D\u5217\u4EE3\u7801\u4E86)\u3002\u4E0B\u9762\u770B\u4E00\u4E0B<code>updateRenderedComponent</code>\u7684\u66F4\u65B0\u673A\u5236(\u4F9D\u7136\u5728 <code>ReactCompositeComponent.js</code> \u4E2D)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">_updateRenderedComponent</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">transaction<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> prevComponentInstance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_renderedComponent<span class="token punctuation">;</span>
  <span class="token keyword">var</span> prevRenderedElement <span class="token operator">=</span> prevComponentInstance<span class="token punctuation">.</span>_currentElement<span class="token punctuation">;</span>
  <span class="token keyword">var</span> nextRenderedElement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_renderValidatedComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> debugID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldUpdateReactComponent</span><span class="token punctuation">(</span>prevRenderedElement<span class="token punctuation">,</span> nextRenderedElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ReactReconciler<span class="token punctuation">.</span><span class="token function">receiveComponent</span><span class="token punctuation">(</span>prevComponentInstance<span class="token punctuation">,</span> nextRenderedElement<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_processChildContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> oldHostNode <span class="token operator">=</span> ReactReconciler<span class="token punctuation">.</span><span class="token function">getHostNode</span><span class="token punctuation">(</span>prevComponentInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ReactReconciler<span class="token punctuation">.</span><span class="token function">unmountComponent</span><span class="token punctuation">(</span>prevComponentInstance<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> nodeType <span class="token operator">=</span> ReactNodeTypes<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>nextRenderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_renderedNodeType <span class="token operator">=</span> nodeType<span class="token punctuation">;</span>
    <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_instantiateReactComponent</span><span class="token punctuation">(</span>nextRenderedElement<span class="token punctuation">,</span> nodeType <span class="token operator">!==</span> ReactNodeTypes<span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_renderedComponent <span class="token operator">=</span> child<span class="token punctuation">;</span>
    <span class="token keyword">var</span> nextMarkup <span class="token operator">=</span> ReactReconciler<span class="token punctuation">.</span><span class="token function">mountComponent</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_hostParent<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_hostContainerInfo<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_processChildContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> debugID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_replaceNodeWithMarkup</span><span class="token punctuation">(</span>oldHostNode<span class="token punctuation">,</span> nextMarkup<span class="token punctuation">,</span> prevComponentInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>\u53EF\u4EE5\u770B\u5230\uFF0C\u5982\u679C\u9700\u8981\u66F4\u65B0\uFF0C\u5219\u8C03\u7528<code>ReactReconciler.receiveComponent</code>\uFF0C\u4F1A\u9012\u5F52\u66F4\u65B0\u5B50\u7EC4\u4EF6\uFF0C\u5426\u5219\u76F4\u63A5\u5378\u8F7D\u7136\u540E\u6302\u8F7D\u3002\u6240\u4EE5\uFF0C\u91CD\u70B9\u662F\u5728<code>shouldUpdateReactComponent</code>\u7684\u5224\u65AD\uFF0C<code>React</code> \u4E3A\u4E86\u7B80\u5316 diff\uFF0C\u6240\u4EE5\u6709\u4E00\u4E2A\u5047\u8BBE\uFF1A<code>\u5728\u7EC4\u4EF6\u5C42\u7EA7</code>\u3001<code>type</code>\u3001<code>key \u4E0D\u53D8\u7684\u65F6\u5019</code>\uFF0C\u624D\u8FDB\u884C\u6BD4\u8F83\u66F4\u65B0\uFF0C\u5426\u5219\u5148 <code>unMount</code> \u7136\u540E\u91CD\u65B0 <code>mount</code>\u3002\u6765\u770B<code>shouldUpdateReactComponent(shouldUpdateReactComponent.js)</code> :</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shouldUpdateReactComponent</span><span class="token punctuation">(</span><span class="token parameter">prevElement<span class="token punctuation">,</span> nextElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> prevEmpty <span class="token operator">=</span> prevElement <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> prevElement <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> nextEmpty <span class="token operator">=</span> nextElement <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> nextElement <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevEmpty <span class="token operator">||</span> nextEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> prevEmpty <span class="token operator">===</span> nextEmpty<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> prevType <span class="token operator">=</span> <span class="token keyword">typeof</span> prevElement<span class="token punctuation">;</span>
  <span class="token keyword">var</span> nextType <span class="token operator">=</span> <span class="token keyword">typeof</span> nextElement<span class="token punctuation">;</span>
  <span class="token comment">// \u5982\u679C\u524D\u540E\u4E24\u6B21\u90FD\u4E3A\u6587\u672C\u5143\u7D20\uFF0C\u5219\u66F4\u65B0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevType <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> prevType <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nextType <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> nextType <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u4E3A ReactDomComponent \u6216 ReactCompositeComponent\uFF0C\u5219\u9700\u8981\u5C42\u7EA7 type \u548C key \u76F8\u540C\uFF0C\u624D\u8FDB\u884C update\uFF08\u5C42\u7EA7\u5728\u9012\u5F52\u4E2D\u4FDD\u8BC1\u76F8\u540C\uFF09</span>
    <span class="token keyword">return</span> nextType <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> prevElement<span class="token punctuation">.</span>type <span class="token operator">===</span> nextElement<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> prevElement<span class="token punctuation">.</span>key <span class="token operator">===</span> nextElement<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>\u63A5\u4E0B\u6765\u662F\u91CD\u5934\u620F\uFF1A<strong>setState</strong>\uFF0C\u4E0A\u6587\u4E2D\u5DF2\u7ECF\u63D0\u5230\u4E86\u6B64 <code>api</code> \u4E3A:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>ReactComponent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>partialState<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> partialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">&#39;setState&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u53EF\u4EE5\u770B\u5230\u8FD9\u91CC\u53EA\u662F\u7B80\u5355\u7684\u8C03\u7528<code>enqueueSetState</code>\u653E\u5165\u961F\u5217\u4E2D\uFF0C\u800C\u77E5\u9053\uFF0C\u4E0D\u53EF\u80FD\u8FD9\u4E48\u7B80\u5355\u7684\u3002\u6765\u770B<code>enqueueSetState(ReactUpdateQueue.js\u4E2D)</code>\uFF0C<code>this.updater</code>\u4F1A\u5728 <code>mount</code> \u65F6\u5019\u8D4B\u503C\u4E3A<code>updateQueue</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">enqueueSetState</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">publicInstance<span class="token punctuation">,</span> partialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> internalInstance <span class="token operator">=</span> <span class="token function">getInternalInstanceReadyForUpdate</span><span class="token punctuation">(</span>publicInstance<span class="token punctuation">,</span> <span class="token string">&#39;setState&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>internalInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u83B7\u53D6\u961F\u5217\uFF0C\u5982\u679C\u4E3A\u7A7A\u5219\u521B\u5EFA</span>
  <span class="token keyword">var</span> queue <span class="token operator">=</span> internalInstance<span class="token punctuation">.</span>_pendingStateQueue <span class="token operator">||</span> <span class="token punctuation">(</span>internalInstance<span class="token punctuation">.</span>_pendingStateQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5C06\u5F85 merge \u7684 state \u653E\u5165\u961F\u5217</span>
  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>partialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5C06\u5F85\u66F4\u65B0\u7684\u7EC4\u4EF6\u653E\u5165\u961F\u5217</span>
  <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>internalInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">function</span> <span class="token function">getInternalInstanceReadyForUpdate</span><span class="token punctuation">(</span><span class="token parameter">publicInstance<span class="token punctuation">,</span> callerName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u4E0A\u6587\u63D0\u5230\u7684\u4EE5 element \u4E3A key \u5B58\u5165 map\uFF0C\u8FD9\u91CC\u53EF\u4EE5\u53D6\u5230 component</span>
  <span class="token keyword">var</span> internalInstance <span class="token operator">=</span> ReactInstanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>publicInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>internalInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> internalInstance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u518D\u6765\u770B<code>enqueueUpdate(ReactUpdates.js)</code>\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>batchingStrategy<span class="token punctuation">.</span>isBatchingUpdates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    batchingStrategy<span class="token punctuation">.</span><span class="token function">batchedUpdates</span><span class="token punctuation">(</span>enqueueUpdate<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  dirtyComponents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">.</span>_updateBatchNumber <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    component<span class="token punctuation">.</span>_updateBatchNumber <span class="token operator">=</span> updateBatchNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li><p>\u53EF\u4EE5\u770B\u5230\uFF0C\u5982\u679C\u4E0D\u5904\u4E8E<code>isBatchingUpdates</code>\u65F6\uFF0C\u5219\u8C03\u7528<code>batchingStrategy.batchedUpdates</code>\uFF0C\u5982\u679C\u5904\u4E8E\u7684\u8BDD\uFF0C\u5219\u5C06 <code>component</code> \u653E\u5165 <code>dirtyComponents</code> \u4E2D\u7B49\u5F85\u4EE5\u540E\u5904\u7406\u3002\u8FD9\u6837\u4FDD\u8BC1\u4E86\u907F\u514D\u91CD\u590D <code>render</code>\uFF0C\u56E0\u4E3A<code>mountComponent</code>\u548C<code>updateComponent</code> <code>\u6267\u884C\u7684\u5F00\u59CB\uFF0C\u4F1A\u5C06isBatchingUpdates</code> \u8BBE\u7F6E\u4E3A<code>true</code>\uFF0C\u4E4B\u540E\u4EE5\u4E8B\u52A1\u7684\u65B9\u5F0F\u5904\u7406\uFF0C\u5305\u62EC\u6700\u540E\u65F6\u5019\u5C06<code>isBatchingUpdates</code>\u7F6E\u4E3A<code>false</code>\u3002</p></li><li><p>\u5927\u5BB6\u4E00\u5B9A\u5BF9 <code>batchingStrategy</code> \u548C <code>dirtyComponents</code> \u7684\u5B9A\u4E49\uFF0C<code>batchingStrategy</code>\u7531<code>ReactUpdates.injection</code> \u6CE8\u5165\uFF0C\u800C<code>dirtyComponents</code> \u662F\u5B9A\u4E49\u5728 <code>ReactUpdates.js</code> \u4E2D\uFF0C\u4E5F\u5C31\u662F\u8BF4\u4E8C\u8005\u90FD\u4E3A\u5168\u5C40\u7684</p></li><li><p>\u7EFC\u4E0A\uFF0C\u5728\u7279\u5B9A\u751F\u547D\u5468\u671F\u4E2D\uFF0C\u5982 <code>getInitialState</code>\uFF0C<code>componentWillMount</code>\uFF0C<code>render</code>\uFF0C<code>componentWillUpdate</code> \u4E2D\u8C03\u7528<code>setState</code>\uFF0C\u5E76\u4E0D\u4F1A\u5F15\u8D77<code>updateComponent</code>\uFF08<code>componentDidMount</code>\u3001<code>componentDidUpdate</code> \u4E2D\u4F1A\uFF09\u3002\u6765\u770B<code>batchedUpdates</code>(<code>ReactDefaultBatchingStrategy.js</code>):</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">batchedUpdates</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> alreadyBatchingUpdates <span class="token operator">=</span> ReactDefaultBatchingStrategy<span class="token punctuation">.</span>isBatchingUpdates<span class="token punctuation">;</span>
  ReactDefaultBatchingStrategy<span class="token punctuation">.</span>isBatchingUpdates <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">// The code is written this way to avoid extra allocations</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyBatchingUpdates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6CE8\u610F\u8FD9\u91CC\uFF0C\u4E0A\u4E00\u4E2A\u4EE3\u7801\u5757\u4E2D\u53EF\u4EE5\u770B\u5230\uFF0C\u5F53 isBatchingUpdates \u4E3A false \u65F6\uFF0Ccallback \u4E3A enqueueUpdate \u81EA\u8EAB</span>
    <span class="token comment">// \u6240\u4EE5\u5373\u4EE5\u4E8B\u52A1\u7684\u65B9\u5F0F\u5904\u7406</span>
    <span class="token keyword">return</span> transaction<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactDefaultBatchingStrategyTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><p>\u53EF\u4EE5\u770B\u5230\uFF0C\u5F53\u4EE5\u4E8B\u52A1\u7684\u65B9\u5F0F\u8C03\u7528\u8FDB\u5165<code>enqueueUpdate</code>\u65F6\uFF0C<code>isBatchingUpdates</code>\u5DF2\u7ECF\u4E3A<code>true</code>\uFF0C\u6240\u4EE5\u6267\u884C<code>dirtyComponents.push(component)</code>;\u3002</p></li><li><p>\u6CE8\u610F\u5230<code>callback</code>\u5176\u5B9E\u5C31\u662F\u81EA\u8EAB<code>enqueueUpdate</code>\uFF0C\u5F53<code>isBatchingUpdates</code>\u4E3A<code>false</code>\u65F6\uFF0C\u4E5F\u7528<code>transaction.perform</code>\u8C03\u7528<code>enqueueUpdate</code>\uFF0C\u4F7F\u5F97\u7ED3\u679C\u4E00\u6837</p></li><li><p>\u8BE6\u7EC6\u4ECB\u7ECD\u4E8B\u52A1 <code>transaction</code> \u7684\u5E94\u7528\uFF0C\u4E0A\u6587\u4E2D\u63D0\u5230\u8FC7\uFF0C\u4E8B\u52A1\u53EF\u4EE5\u5229\u7528<code>wrapper</code>\u5C01\u88C5\uFF0C\u5F00\u59CB\u548C\u7ED3\u675F\u65F6\u4F1A\u8C03\u7528\u6240\u6709 <code>wrapper</code> \u7684\u76F8\u5E94\u65B9\u6CD5\uFF0C\u6765\u770B\u8FD9\u4E24\u4E2A<code>wrapper</code>: <code>RESET_BATCHED_UPDATES FLUSH_BATCHED_UPDATES</code>(<code>ReactDefaultBatchingStrategy.js</code>):</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token constant">RESET_BATCHED_UPDATES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">initialize</span><span class="token operator">:</span> emptyFunction<span class="token punctuation">,</span>
  <span class="token function-variable function">close</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ReactDefaultBatchingStrategy<span class="token punctuation">.</span>isBatchingUpdates <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">FLUSH_BATCHED_UPDATES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">initialize</span><span class="token operator">:</span> emptyFunction<span class="token punctuation">,</span>
  <span class="token literal-property property">close</span><span class="token operator">:</span> ReactUpdates<span class="token punctuation">.</span><span class="token function">flushBatchedUpdates</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>ReactUpdates<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// flushBatchedUpdates \u5728 ReactUpdates.js \u4E2D</span>
<span class="token keyword">var</span> <span class="token function-variable function">flushBatchedUpdates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ReactUpdatesFlushTransaction&#39;s wrappers will clear the dirtyComponents</span>
  <span class="token comment">// asapEnqueued \u4E3A\u63D0\u524D\u6267\u884C\u56DE\u8C03\uFF0C\u6682\u4E0D\u5206\u6790</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>dirtyComponents<span class="token punctuation">.</span>length <span class="token operator">||</span> asapEnqueued<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dirtyComponents<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> transaction <span class="token operator">=</span> ReactUpdatesFlushTransaction<span class="token punctuation">.</span><span class="token function">getPooled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      transaction<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ReactUpdatesFlushTransaction<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>asapEnqueued<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li><p>\u4F46\u662F\uFF0C\u4ED4\u7EC6\u770B\u4E0A\u9762\u7684\u8FC7\u7A0B\uFF0C\u628A\u7EC4\u4EF6\u653E\u5165 <code>dirtyComponents</code> \u540E\uFF0C\u4E8B\u52A1\u7ED3\u675F\u9A6C\u4E0A\u5C31\u6267\u884C <code>close</code> \u65B9\u6CD5\u8FDB\u884C\u4E86\u5904\u7406\u4E86\uFF0C\u548C\u4E4B\u524D\u7406\u89E3\u7684\u6D41\u7A0B\u597D\u50CF\u4E0D\u592A\u4E00\u81F4\uFF1F\u8FD9\u65F6\u5019\u518D\u56DE\u5934\u770B<code>mountComponent</code>\u548C<code>updateComponent</code>\uFF0C\u5B83\u4EEC\u7684\u53C2\u6570\uFF1A<code>@param {ReactReconcileTransaction} transaction</code>\uFF0C\u4E5F\u5C31\u662F\u8BF4\u6574\u4E2A\u8FC7\u7A0B\u90FD\u5728<code>ReactReconcileTransaction</code>\u4E8B\u52A1\u4E2D(\u4E8B\u4EF6\u56DE\u8C03\u540C\u7406)\uFF0C\u81EA\u7136\u5728\u5176\u4E2D\u7684\u751F\u547D\u5468\u671F\u8C03\u7528<code>setState</code>\u4E0D\u7528\u5F15\u8D77\u91CD\u590D <code>render</code>\uFF0C\u53EA\u4F1A\u5C06 <code>state</code> \u653E\u5165\u961F\u5217\u548C\u5C06\u7EC4\u4EF6\u653E\u5165 <code>dirtyComponents</code> \u4E2D\uFF0C\u7136\u540E\u5728\u7ED3\u675F\u540E\u7EDF\u4E00\u5904\u7406</p></li><li><p><code>ReactReconcileTransaction</code>\u4E2D <code>initialize</code> \u7528\u4E8E\u6E05\u7A7A\u56DE\u8C03\u961F\u5217\uFF1B<code>close</code> \u7528\u4E8E\u89E6\u53D1\u56DE\u8C03\u51FD\u6570 <code>componentDidMount</code>\u3001<code>componentDidUpdate</code> \u6267\u884C</p></li><li><p>\u6211\u5F00\u59CB\u4E00\u76F4\u6BD4\u8F83\u7591\u60D1\u7684\u662F<code>ReactDefaultBatchingStrategy.batchedUpdates</code>\u4E2D\u7684<code>ReactDefaultBatchingStrategyTransaction</code>\u548C<code>ReactReconcileTransaction</code>\u5230\u5E95\u662F\u4EC0\u4E48\u5173\u7CFB\uFF1F\u6211\u8BD5\u56FE\u627E\u51FA\u4E24\u4E2A <code>transaction</code> \u4E2D <code>wrapper</code> \u662F\u5426\u6709 <code>merge</code> \u7684\u60C5\u51B5\uFF0C\u53D1\u73B0\u6CA1\u6709\u3002\u76EE\u524D\u5927\u6982\u7684\u7406\u89E3\u548C\u7ED3\u8BBA\u662F\u8FD9\u6837\u7684\uFF1A<strong>\u6574\u4E2A\u751F\u547D\u5468\u671F\u5C31\u662F\u4E00\u4E2A <code>transaction</code>\uFF0C\u5373\u5BF9\u5E94<code>ReactDefaultBatchingStrategy.batchedUpdates</code>\uFF0C\u800C<code>ReactReconcileTransaction</code>\u7C92\u5EA6\u8F83\u5C0F\uFF0C\u8D1F\u8D23\u5355\u4E2A\u7EC4\u4EF6(\u6240\u4EE5\u4E5F\u80FD\u770B\u5230\uFF0C\u524D\u8005\u76F4\u63A5 <code>new</code>\uFF0C\u800C\u540E\u8005\u5229\u7528\u4E86\u5BF9\u8C61\u6C60)\u3002\u901A\u8FC7\u5404\u81EA <code>wrapper</code> \u53EF\u4EE5\u770B\u5230\uFF0C\u524D\u8005([<code>FLUSH_BATCHED_UPDATES</code>, <code>RESET_BATCHED_UPDATES</code>])\u8D1F\u8D23\u4E86\u5168\u90E8\u7EC4\u4EF6\u66F4\u65B0 \u548C <code>callback</code>\uFF0C\u540E\u8005([<code>SELECTION_RESTORATION</code>, <code>EVENT_SUPPRESSION</code>, <code>ON_DOM_READY_QUEUEING</code>)\u8D1F\u8D23\u4E86\u5404\u81EA\u7EC4\u4EF6\u81EA\u8EAB\u7684\u95EE\u9898\uFF0C\u5982 <code>focus</code> \u7B49\u3002</strong></p></li><li><p>\u4F8B\u8BC1\uFF1A<code>ReactDom</code> \u4E2D\u8C03\u7528<code>render</code>(\u63D2\u5165\u8FC7\u7A0B)\uFF0C\u5B9E\u9645\u6700\u7EC8\u8C03\u7528\u4E86 <code>ReactMount</code> \u7684<code>_renderNewRootComponent</code>\uFF0C\u5176\u4E2D\u6267\u884C\u4E86<code>ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);</code>(\u6CE8\u610F\u51FA\u73B0\u4E86<code>batchedUpdates</code>)\uFF0C\u800C<code>batchedMountComponentIntoNode</code>\u4E2D\u8C03\u7528\u4E86<code>ReactUpdates.ReactReconcileTransaction.getPooled</code>\uFF0C\u8FD9\u6837\uFF0C\u5D4C\u5957\u5173\u7CFB\u5C31\u8054\u7CFB\u8D77\u6765\u4E86</p></li><li><p>\u4F8B\u8BC1: <code>ReactEventListener</code> \u7684<code>dispatchEvent</code>\uFF0C\u4F1A\u8C03\u7528<code>ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);</code> \u548C\u4E0A\u8FF0\u540C\u7406</p></li><li><p>\u719F\u6089 <code>React</code> \u751F\u547D\u5468\u671F\u7684\u540C\u5B66\u4E00\u5B9A\u5BF9\u7236\u5B50\u7EC4\u4EF6\u5404\u751F\u547D\u5468\u671F\u7684\u6267\u884C\u987A\u5E8F\u5F88\u6E05\u6670(\u6BD4\u5982 <code>componentWillMount</code> \u662F\u4ECE\u7236\u5230\u5B50)\uFF0C\u4EE5\u4E0A\u8FF0\u7684\u7406\u8BBA\uFF0C\u662F\u5982\u4F55\u4FDD\u8BC1\u7684\u4E48\uFF1F\u4E0A\u6587\u4E2D\u53EF\u4EE5\u770B\u5230\uFF0C<code>FLUSH_BATCHED_UPDATES</code>\u7684 <code>close</code>\u65B9\u6CD5\u5229\u8C03\u7528\u4E86<code>runBatchedUpdates</code>\uFF0C\u6765\u770B\u8FD9\u4E2A\u65B9\u6CD5(<code>ReactUpdates.js</code>):</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runBatchedUpdates</span><span class="token punctuation">(</span><span class="token parameter">transaction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> len <span class="token operator">=</span> transaction<span class="token punctuation">.</span>dirtyComponentsLength<span class="token punctuation">;</span>
  <span class="token comment">// reconcile them before their children by sorting the array.</span>
  dirtyComponents<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>mountOrderComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Any updates enqueued while reconciling must be performed after this entire</span>
  <span class="token comment">// batch. Otherwise, if dirtyComponents is [A, B] where A has children B and</span>
  <span class="token comment">// C, B could update twice in a single batch if C&#39;s render enqueues an update</span>
  <span class="token comment">// to B (since B would have already updated, we should skip it, and the only</span>
  <span class="token comment">// way we can know to do so is by checking the batch counter).</span>
  updateBatchNumber<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If a component is unmounted before pending changes apply, it will still</span>
    <span class="token comment">// be here, but we assume that it has cleared its _pendingCallbacks and</span>
    <span class="token comment">// that was is a noop.</span>
    <span class="token keyword">var</span> component <span class="token operator">=</span> dirtyComponents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// If performUpdateIfNecessary happens to enqueue any new updates, we</span>
    <span class="token comment">// shouldn&#39;t execute the callbacks until the next render happens, so</span>
    <span class="token comment">// stash the callbacks first</span>
    <span class="token keyword">var</span> callbacks <span class="token operator">=</span> component<span class="token punctuation">.</span>_pendingCallbacks<span class="token punctuation">;</span>
    component<span class="token punctuation">.</span>_pendingCallbacks <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    ReactReconciler<span class="token punctuation">.</span><span class="token function">performUpdateIfNecessary</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span>reconcileTransaction<span class="token punctuation">,</span> updateBatchNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> callbacks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        transaction<span class="token punctuation">.</span>callbackQueue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>callbacks<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> component<span class="token punctuation">.</span><span class="token function">getPublicInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mountOrderComparator</span><span class="token punctuation">(</span><span class="token parameter">c1<span class="token punctuation">,</span> c2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> c1<span class="token punctuation">.</span>_mountOrder <span class="token operator">-</span> c2<span class="token punctuation">.</span>_mountOrder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ul><li><p><code>flushBatchedUpdates</code>\u5728\u4E8B\u52A1<code>ReactUpdatesFlushTransaction</code>\u4E2D\uFF0C\u6B64\u4E8B\u52A1\u662F\u5BF9<code>ReactReconcileTransaction</code>\u548C<code>CallbackQueue</code>\u7684\u5C01\u88C5\uFF0C\u7ED3\u675F\u65F6\u7F6E\u7A7A <code>dirtyComponents</code> \u5E76\u901A\u77E5\u56DE\u8C03</p></li><li><p><code>performUpdateIfNecessary</code>\u6700\u7EC8\u4F1A\u8C03\u7528<code>updateComponent</code>\uFF0C\u8FDB\u884C\u66F4\u65B0</p></li></ul><h2 id="diff-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#diff-\u7B97\u6CD5" aria-hidden="true">#</a> diff \u7B97\u6CD5</h2>`,24),b=n("<li><p>\u4F20\u7EDF\u5BF9\u4E8E\u6811\u7684 <code>diff</code> \u7B97\u6CD5\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u8981\u8FBE\u5230 <code>o(n^3)</code>\uFF0C\u8FD9\u5BF9\u4E8E\u7528\u6237\u7AEF\u663E\u7136\u662F\u4E0D\u80FD\u63A5\u53D7\u7684\u3002\u800C <code>React</code> \u57FA\u4E8E\u51E0\u4E2A\u57FA\u7840\u5047\u8BBE\uFF0C\u5C06\u65F6\u95F4\u590D\u6742\u5EA6\u4F18\u5316\u4E3A <code>o(n)</code></p></li><li><p>\u5047\u8BBE(\u7B56\u7565)</p><ul><li><p><code>Web UI</code> \u4E2D <code>DOM</code> \u8282\u70B9\u8DE8\u5C42\u7EA7\u7684\u79FB\u52A8\u64CD\u4F5C\u7279\u522B\u5C11\uFF0C\u53EF\u4EE5\u5FFD\u7565\u4E0D\u8BA1</p></li><li><p>\u62E5\u6709\u76F8\u540C\u7C7B\u7684\u4E24\u4E2A\u7EC4\u4EF6\u5C06\u4F1A\u751F\u6210\u76F8\u4F3C\u7684\u6811\u5F62\u7ED3\u6784\uFF0C\u62E5\u6709\u4E0D\u540C\u7C7B\u7684\u4E24\u4E2A\u7EC4\u4EF6\u5C06\u4F1A\u751F\u6210\u4E0D\u540C\u7684\u6811\u5F62\u7ED3\u6784</p></li><li><p>\u5BF9\u4E8E\u540C\u4E00\u5C42\u7EA7\u7684\u4E00\u7EC4\u5B50\u8282\u70B9\uFF0C\u5B83\u4EEC\u53EF\u4EE5\u901A\u8FC7\u552F\u4E00 <code>id</code> \u8FDB\u884C\u533A\u5206</p></li></ul></li>",2),y=n("<p>\u573A\u666F</p><ul><li><p><code>tree diff</code>: \u53EA\u5BF9\u6BD4\u540C\u5C42\u7EA7\u8282\u70B9(\u6CE8\u610F\u524D\u6587\u4E2D\u6240\u6709\u4EE3\u7801\u4E2D\uFF0C\u90FD\u662F\u53EA\u6BD4\u8F83<code>prevRenderedElement</code>\u548C<code>nextRenderedElement</code>)</p></li><li><p><code>component diff</code>: \u5982\u679C\u7C7B\u578B\u76F8\u540C\u5219\u7EE7\u7EED\u6BD4\u8F83\uFF0C\u5982\u679C\u7C7B\u578B\u4E0D\u540C\u5219\u76F4\u63A5\u5378\u8F7D\u518D\u6302\u8F7D\uFF0C\u5373\u4E0A\u6587\u4E2D\u63D0\u5230\u7684<code>shouldUpdateReactComponent</code>(\u867D\u7136\u5F53\u4E24\u4E2A <code>component</code> \u662F\u4E0D\u540C\u7C7B\u578B\u4F46\u7ED3\u6784\u76F8\u4F3C\u65F6\uFF0C<code>React diff</code> \u4F1A\u5F71\u54CD\u6027\u80FD\uFF0C\u4F46\u6B63\u5982 <code>React</code> \u5B98\u65B9\u535A\u5BA2\u6240\u8A00\uFF1A\u4E0D\u540C\u7C7B\u578B\u7684 <code>component</code> \u662F\u5F88\u5C11\u5B58\u5728\u76F8\u4F3C <code>DOM tree</code> \u7684\u673A\u4F1A\uFF0C\u56E0\u6B64\u4E3A\u8FD9\u79CD\u6781\u7AEF\u60C5\u51B5\u800C\u505A\u592A\u591A\u6BD4\u8F83\u662F\u4E0D\u503C\u5F97\u7684)</p></li><li><p><code>element diff</code>: \u5F53\u4E00\u7EC4\u8282\u70B9\u5904\u4E8E\u540C\u4E00\u5C42\u7EA7\u65F6\uFF0C<code>React</code> \u5BF9\u4E8E\u6BCF\u4E2A\u8282\u70B9\u63D0\u4F9B\u4E86\u4E09\u79CD\u64CD\u4F5C\uFF0C\u5206\u522B\u4E3A<code>INSERT_MARKUP</code>(\u63D2\u5165)\u3001 <code>MOVE_EXISTING</code>(\u79FB\u52A8)\u3001 <code>REMOVE_NODE</code>(\u5220\u9664)</p></li><li><p>\u4E0A\u6587\u7684\u4EE3\u7801\u4E2D\uFF0C\u9664\u4E86\u5173\u5FC3 type\uFF0C\u8FD8\u5173\u5FC3 key\uFF0C\u8FD9\u4E5F\u662F diff \u7B97\u6CD5\u7684\u5173\u952E\uFF0C\u5982\u56FE</p></li></ul>",2),h=["src"],w=n("<li><p>\u9996\u5148\u5BF9\u65B0\u96C6\u5408\u7684\u8282\u70B9\u8FDB\u884C\u5FAA\u73AF\u904D\u5386\uFF0C<code>for (name in nextChildren)</code>\uFF0C\u5982\u679C\u5B58\u5728\u76F8\u540C\u8282\u70B9\uFF0C\u5219\u8FDB\u884C\u64CD\u4F5C\uFF0C\u662F\u5426\u79FB\u52A8\u662F\u901A\u8FC7\u6BD4\u8F83 <code>child._mountIndex &lt; lastIndex</code>\uFF0C\u7B26\u5408\u5219\u8FDB\u884C\u8282\u70B9\u79FB\u52A8\u64CD\u4F5C(\u5373\u5728\u8001\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E\u548C <code>lastIndex</code> \u6BD4\u8F83)\uFF0C<code>lastIndex</code> \u8868\u793A\u8BBF\u95EE\u8FC7\u7684\u8282\u70B9\u5728\u8001\u96C6\u5408\u4E2D\u6700\u53F3\u7684\u4F4D\u7F6E\uFF08\u5373\u6700\u5927\u7684\u4F4D\u7F6E\uFF09\u3002\u8FD9\u662F\u4E00\u79CD\u987A\u5E8F\u4F18\u5316\u624B\u6BB5\uFF0C<code>lastIndex</code> \u4E00\u76F4\u5728\u66F4\u65B0\uFF0C\u8868\u793A\u8BBF\u95EE\u8FC7\u7684\u8282\u70B9\u5728\u8001\u96C6\u5408\u4E2D\u6700\u53F3\u7684\u4F4D\u7F6E\uFF0C\u5982\u679C\u65B0\u96C6\u5408\u4E2D\u5F53\u524D\u8BBF\u95EE\u7684\u8282\u70B9\u6BD4 <code>lastIndex</code> \u5927\uFF0C\u8BF4\u660E\u5F53\u524D\u8BBF\u95EE\u8282\u70B9\u5728\u8001\u96C6\u5408\u4E2D\u5C31\u6BD4\u4E0A\u4E00\u4E2A\u8282\u70B9\u4F4D\u7F6E\u9760\u540E\uFF0C\u5219\u8BE5\u8282\u70B9\u4E0D\u4F1A\u5F71\u54CD\u5176\u4ED6\u8282\u70B9\u7684\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u4E0D\u7528\u6DFB\u52A0\u5230\u5DEE\u5F02\u961F\u5217\u4E2D\uFF0C\u5373\u4E0D\u6267\u884C\u79FB\u52A8\u64CD\u4F5C\uFF0C\u53EA\u6709\u5F53\u8BBF\u95EE\u7684\u8282\u70B9\u6BD4 <code>lastIndex</code> \u5C0F\u65F6\uFF0C\u624D\u9700\u8981\u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C\u3002\u6765\u770B\u5177\u4F53\u8FC7\u7A0B\uFF1A</p><ul><li><p>\u4ECE\u65B0\u96C6\u5408\u4E2D\u53D6\u5F97 <code>B</code>\uFF0C\u5224\u65AD\u8001\u96C6\u5408\u4E2D\u5B58\u5728\u76F8\u540C\u8282\u70B9 <code>B</code>\uFF0C\u901A\u8FC7\u5BF9\u6BD4\u8282\u70B9\u4F4D\u7F6E\u5224\u65AD\u662F\u5426\u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C\uFF0C<code>B</code> \u5728\u8001\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E <code>B._mountIndex = 1</code>\uFF0C\u6B64\u65F6 <code>lastIndex = 0</code>\uFF0C\u4E0D\u6EE1\u8DB3 <code>child._mountIndex &lt; lastIndex</code> \u7684\u6761\u4EF6\uFF0C\u56E0\u6B64\u4E0D\u5BF9 <code>B</code> \u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C\uFF1B\u66F4\u65B0 <code>lastIndex = Math.max(prevChild._mountIndex, lastIndex)</code>\uFF0C\u5176\u4E2D <code>prevChild._mountIndex</code> \u8868\u793A <code>B</code> \u5728\u8001\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E\uFF0C\u5219 <code>lastIndex \uFF1D 1</code>\uFF0C\u5E76\u5C06 <code>B</code> \u7684\u4F4D\u7F6E\u66F4\u65B0\u4E3A\u65B0\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E<code>prevChild._mountIndex = nextIndex</code>\uFF0C\u6B64\u65F6\u65B0\u96C6\u5408\u4E2D <code>B._mountIndex = 0</code>\uFF0C<code>nextIndex++</code> \u8FDB\u5165\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u5224\u65AD</p></li><li><p>\u4ECE\u65B0\u96C6\u5408\u4E2D\u53D6\u5F97 <code>A</code>\uFF0C\u5224\u65AD\u8001\u96C6\u5408\u4E2D\u5B58\u5728\u76F8\u540C\u8282\u70B9 <code>A</code>\uFF0C\u901A\u8FC7\u5BF9\u6BD4\u8282\u70B9\u4F4D\u7F6E\u5224\u65AD\u662F\u5426\u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C\uFF0C<code>A</code> \u5728\u8001\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E <code>A._mountIndex = 0</code>\uFF0C\u6B64\u65F6 <code>lastIndex = 1</code>\uFF0C\u6EE1\u8DB3 <code>child._mountIndex &lt; lastIndex</code>\u7684\u6761\u4EF6\uFF0C\u56E0\u6B64\u5BF9 <code>A</code> \u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C <code>enqueueMove(this, child._mountIndex, toIndex)</code>\uFF0C\u5176\u4E2D <code>toIndex</code> \u5176\u5B9E\u5C31\u662F <code>x</code>\uFF0C\u8868\u793A <code>A</code> \u9700\u8981\u79FB\u52A8\u5230\u7684\u4F4D\u7F6E\uFF1B\u66F4\u65B0 <code>lastIndex = Math.max(prevChild._mountIndex, lastIndex)</code>\uFF0C\u5219 <code>lastIndex \uFF1D 1</code>\uFF0C\u5E76\u5C06 <code>A</code> \u7684\u4F4D\u7F6E\u66F4\u65B0\u4E3A\u65B0\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E <code>prevChild._mountIndex = nextIndex</code>\uFF0C\u6B64\u65F6\u65B0\u96C6\u5408\u4E2D<code>A._mountIndex = 1</code>\uFF0C<code>nextIndex++</code> \u8FDB\u5165\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u5224\u65AD\u3002</p></li><li><p>\u4ECE\u65B0\u96C6\u5408\u4E2D\u53D6\u5F97 <code>D</code>\uFF0C\u5224\u65AD\u8001\u96C6\u5408\u4E2D\u5B58\u5728\u76F8\u540C\u8282\u70B9 <code>D</code>\uFF0C\u901A\u8FC7\u5BF9\u6BD4\u8282\u70B9\u4F4D\u7F6E\u5224\u65AD\u662F\u5426\u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C\uFF0C<code>D</code> \u5728\u8001\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E <code>D._mountIndex = 3</code>\uFF0C\u6B64\u65F6 <code>lastIndex = 1</code>\uFF0C\u4E0D\u6EE1\u8DB3 <code>child._mountIndex &lt; lastIndex</code>\u7684\u6761\u4EF6\uFF0C\u56E0\u6B64\u4E0D\u5BF9 <code>D</code> \u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C\uFF1B\u66F4\u65B0 <code>lastIndex = Math.max(prevChild._mountIndex, lastIndex)</code>\uFF0C\u5219 <code>lastIndex \uFF1D 3</code>\uFF0C\u5E76\u5C06 <code>D</code> \u7684\u4F4D\u7F6E\u66F4\u65B0\u4E3A\u65B0\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E <code>prevChild._mountIndex = nextIndex</code>\uFF0C\u6B64\u65F6\u65B0\u96C6\u5408\u4E2D<code>D._mountIndex = 2</code>\uFF0C<code>nextIndex++</code> \u8FDB\u5165\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u5224\u65AD\u3002</p></li><li><p>\u4ECE\u65B0\u96C6\u5408\u4E2D\u53D6\u5F97 <code>C</code>\uFF0C\u5224\u65AD\u8001\u96C6\u5408\u4E2D\u5B58\u5728\u76F8\u540C\u8282\u70B9 <code>C</code>\uFF0C\u901A\u8FC7\u5BF9\u6BD4\u8282\u70B9\u4F4D\u7F6E\u5224\u65AD\u662F\u5426\u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C\uFF0C<code>C</code> \u5728\u8001\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E <code>C._mountIndex = 2</code>\uFF0C\u6B64\u65F6 <code>lastIndex = 3</code>\uFF0C\u6EE1\u8DB3 <code>child._mountIndex &lt; lastIndex</code> \u7684\u6761\u4EF6\uFF0C\u56E0\u6B64\u5BF9 <code>C</code> \u8FDB\u884C\u79FB\u52A8\u64CD\u4F5C <code>enqueueMove(this, child._mountIndex, toIndex)\uFF1B</code>\u66F4\u65B0 <code>lastIndex = Math.max(prevChild._mountIndex, lastIndex)</code>\uFF0C\u5219 <code>lastIndex \uFF1D 3</code>\uFF0C\u5E76\u5C06 <code>C</code> \u7684\u4F4D\u7F6E\u66F4\u65B0\u4E3A\u65B0\u96C6\u5408\u4E2D\u7684\u4F4D\u7F6E <code>prevChild._mountIndex = nextIndex</code>\uFF0C\u6B64\u65F6\u65B0\u96C6\u5408\u4E2D <code>C._mountIndex = 3</code>\uFF0C<code>nextIndex++</code> \u8FDB\u5165\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u5224\u65AD\uFF0C\u7531\u4E8E <code>C</code> \u5DF2\u7ECF\u662F\u6700\u540E\u4E00\u4E2A\u8282\u70B9\uFF0C\u56E0\u6B64 <code>diff</code> \u5230\u6B64\u5B8C\u6210\u3002</p></li><li><p>\u5F53\u6709\u65B0\u7684 <code>Component</code> \u63D2\u5165\u65F6\uFF0C\u903B\u8F91\u4E00\u81F4\uFF0C\u4E0D\u505A\u5177\u4F53\u5206\u6790\u4E86</p></li><li><p>\u5F53\u5B8C\u6210\u96C6\u5408\u4E2D\u6240\u6709\u8282\u70B9 <code>diff</code>\uFF0C\u8FD8\u9700\u8981\u904D\u5386\u8001\u96C6\u5408\uFF0C\u5982\u679C\u5B58\u5728\u65B0\u96C6\u5408\u4E2D\u6CA1\u6709\u4F46\u8001\u96C6\u5408\u4E2D\u6709\u7684\u8282\u70B9\uFF0C\u5219\u5220\u9664</p></li></ul></li><li><p>\u4EE3\u7801(<code>ReactMultiChild.js</code>)\uFF0C\u9488\u5BF9 <code>element diff</code>(<code>tree diff</code> \u548C <code>component diff</code> \u5728\u4E4B\u524D\u7684\u4EE3\u7801\u4E2D\u5DF2\u7ECF\u63D0\u5230\u8FC7)\uFF1A</p></li>",2),f=n(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">_updateChildren</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nextNestedChildrenElements<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> prevChildren <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_renderedChildren<span class="token punctuation">;</span>
  <span class="token keyword">var</span> removedNodes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> mountImages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> nextChildren <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_reconcilerUpdateChildren</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">,</span> nextNestedChildrenElements<span class="token punctuation">,</span> mountImages<span class="token punctuation">,</span> removedNodes<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextChildren <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prevChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> updates <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> name<span class="token punctuation">;</span>
  <span class="token comment">// \`nextIndex\` will increment for each child in \`nextChildren\`, but</span>
  <span class="token comment">// \`lastIndex\` will be the last index visited in \`prevChildren\`.</span>
  <span class="token keyword">var</span> nextIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// \`nextMountIndex\` will increment for each newly mounted child.</span>
  <span class="token keyword">var</span> nextMountIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> lastPlacedNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> nextChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextChildren<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> prevChild <span class="token operator">=</span> prevChildren <span class="token operator">&amp;&amp;</span> prevChildren<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> nextChild <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevChild <span class="token operator">===</span> nextChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      updates <span class="token operator">=</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveChild</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> lastPlacedNode<span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span> lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      lastIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">.</span>_mountIndex<span class="token punctuation">,</span> lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      prevChild<span class="token punctuation">.</span>_mountIndex <span class="token operator">=</span> nextIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Update \`lastIndex\` before \`_mountIndex\` gets unset by unmounting.</span>
        lastIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">.</span>_mountIndex<span class="token punctuation">,</span> lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// The \`removedNodes\` loop below will actually remove the child.</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// The child must be instantiated before it&#39;s mounted.</span>
      updates <span class="token operator">=</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_mountChildAtIndex</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">,</span> mountImages<span class="token punctuation">[</span>nextMountIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> lastPlacedNode<span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      nextMountIndex<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>
    lastPlacedNode <span class="token operator">=</span> ReactReconciler<span class="token punctuation">.</span><span class="token function">getHostNode</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Remove children that are no longer present.</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> removedNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>removedNodes<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      updates <span class="token operator">=</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_unmountChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> removedNodes<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>updates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">processQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> updates<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_renderedChildren <span class="token operator">=</span> nextChildren<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="\u4E00\u4E9B\u5176\u4ED6\u7684\u70B9" tabindex="-1"><a class="header-anchor" href="#\u4E00\u4E9B\u5176\u4ED6\u7684\u70B9" aria-hidden="true">#</a> \u4E00\u4E9B\u5176\u4ED6\u7684\u70B9</h2><p>interface(ReactClass.js)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> ReactClassInterface <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">statics</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">propTypes</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">contextTypes</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">childContextTypes</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ==== Definition methods ====</span>
  <span class="token literal-property property">getDefaultProps</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY_MERGED&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getInitialState</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY_MERGED&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getChildContext</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY_MERGED&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_ONCE&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ==== Delegate methods ====</span>
  <span class="token literal-property property">componentWillMount</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">componentDidMount</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">componentWillReceiveProps</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">shouldComponentUpdate</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_ONCE&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">componentWillUpdate</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">componentDidUpdate</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">componentWillUnmount</span><span class="token operator">:</span> <span class="token string">&#39;DEFINE_MANY&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ==== Advanced methods ====</span>
  <span class="token literal-property property">updateComponent</span><span class="token operator">:</span> <span class="token string">&#39;OVERRIDE_BASE&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">validateMethodOverride</span><span class="token punctuation">(</span><span class="token parameter">isAlreadyDefined<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> specPolicy <span class="token operator">=</span> ReactClassInterface<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> ReactClassInterface<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// Disallow overriding of base class methods unless explicitly allowed.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ReactClassMixin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">!</span><span class="token punctuation">(</span>specPolicy <span class="token operator">===</span> <span class="token string">&#39;OVERRIDE_BASE&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;ReactClassInterface: You are attempting to override \`%s\` from your class specification. Ensure that your method names do not overlap with React methods.&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_prodInvariant</span><span class="token punctuation">(</span><span class="token string">&#39;73&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Disallow defining methods more than once unless explicitly allowed.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAlreadyDefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">!</span><span class="token punctuation">(</span>specPolicy <span class="token operator">===</span> <span class="token string">&#39;DEFINE_MANY&#39;</span> <span class="token operator">||</span> specPolicy <span class="token operator">===</span> <span class="token string">&#39;DEFINE_MANY_MERGED&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;ReactClassInterface: You are attempting to define \`%s\` on your component more than once. This conflict may be due to a mixin.&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_prodInvariant</span><span class="token punctuation">(</span><span class="token string">&#39;74&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>\u53EF\u4EE5\u770B\u5230\uFF0C\u548C\u540E\u7AEF\u4E2D<code>interface</code>(\u6216\u662F\u62BD\u8C61\u7C7B)\u8FD8\u662F\u6709\u533A\u522B\u7684\uFF0C\u4F46\u662F\u53EF\u4EE5\u8D77\u5230\u89C4\u8303\u548C\u68C0\u67E5\u7684\u4F5C\u7528\uFF0C\u5B9E\u9645\u9879\u76EE\u4E2D\u53EF\u4EE5\u501F\u9274</p>`,5);function v(a,g){return p(),t(e,null,[l,s("img",{src:a.$withBase("/assets/react/v2-e1dc82ada4fbbf5c366558532a6f6fca_720w.png"),alt:"demo"},null,8,u),r,s("img",{src:a.$withBase("/assets/react/v2-35d1c1174231dd45f3fda05516ed0239_720w.png"),alt:"demo"},null,8,i),k,s("img",{src:a.$withBase("/assets/react/v2-203bfc5510eb197d8117e53f75dbbae5_720w.png"),alt:"demo"},null,8,d),m,s("ul",null,[b,s("li",null,[y,s("img",{src:a.$withBase("/assets/react/v2-57807dd3d41b61ac6c7b3b3686df381b_720w.png"),alt:"demo"},null,8,h)]),w]),f],64)}var R=o(c,[["render",v]]);export{R as default};
