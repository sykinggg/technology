import{r as o,o as c,c as l,b as n,d as t,F as r,e as s,a as e}from"./app.ba47fc91.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const i={},k=n("h1",{id:"react-\u7B97\u6CD5\u4E4B\u5806\u6392\u5E8F",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react-\u7B97\u6CD5\u4E4B\u5806\u6392\u5E8F","aria-hidden":"true"},"#"),s(" React \u7B97\u6CD5\u4E4B\u5806\u6392\u5E8F")],-1),b=n("h2",{id:"\u6982\u5FF5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6982\u5FF5","aria-hidden":"true"},"#"),s(" \u6982\u5FF5")],-1),d=s("\u4E8C\u53C9\u5806\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u5806, \u4E8C\u53C9\u5806\u662F"),m={href:"https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91#%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"},h=s("\u5B8C\u5168\u4E8C\u53C9\u6811"),f=s("\u6216\u8005\u8FD1\u4F3C\u5B8C\u5168\u4E8C\u53C9\u6811."),w=e('<p>\u5806\u6392\u5E8F\u662F\u5229\u7528\u4E8C\u53C9\u5806\u7684\u7279\u6027, \u5BF9\u6839\u8282\u70B9(\u6700\u5927\u6216\u6700\u5C0F)\u8FDB\u884C\u5FAA\u73AF\u63D0\u53D6, \u4ECE\u800C\u8FBE\u5230\u6392\u5E8F\u76EE\u7684(\u5806\u6392\u5E8F\u672C\u8D28\u4E0A\u662F\u4E00\u79CD\u9009\u62E9\u6392\u5E8F), \u65F6\u95F4\u590D\u6742\u5EA6\u4E3A<code>O(nlog n)</code>.</p><h2 id="\u7279\u6027" tabindex="-1"><a class="header-anchor" href="#\u7279\u6027" aria-hidden="true">#</a> \u7279\u6027</h2><ol><li>\u7236\u8282\u70B9\u7684\u503C&gt;=\u5B50\u8282\u70B9\u7684\u503C(\u6700\u5927\u5806), \u7236\u8282\u70B9\u7684\u503C&lt;=\u5B50\u8282\u70B9\u7684\u503C(\u6700\u5C0F\u5806). \u6BCF\u4E2A\u8282\u70B9\u7684\u5DE6\u5B50\u6811\u548C\u53F3\u5B50\u6811\u90FD\u662F\u4E00\u4E2A\u4E8C\u53C9\u5806.</li><li>\u5047\u8BBE\u4E00\u4E2A\u6570\u7EC4<code>[k0, k1, k2, ...kn]</code>\u4E0B\u6807\u4ECE 0 \u5F00\u59CB. \u5219<code>ki &lt;= k2i+1,ki &lt;= k2i+2</code> \u6216\u8005 <code>ki &gt;= k2i+1,ki &gt;= k2i+2</code> (i = 0,1,2,3 .. n/2)</li></ol><h2 id="\u57FA\u672C\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u4F7F\u7528" aria-hidden="true">#</a> \u57FA\u672C\u4F7F\u7528</h2><p>\u5047\u8BBE\u73B0\u5728\u6709\u4E00\u4E2A\u4E71\u5E8F\u6570\u7EC4, [5,8,0,10,4,6,1], \u73B0\u5728\u5C06\u5176\u6784\u9020\u6210\u4E00\u4E2A\u6700\u5C0F\u5806</p><ol><li>\u6784\u9020\u4E8C\u53C9\u5806 <ul><li>\u9700\u8981\u4ECE\u6700\u540E\u4E00\u4E2A\u975E\u53F6\u5B50\u8282\u70B9\u5F00\u59CB, \u5411\u4E0B\u8C03\u6574\u5806\u7ED3\u6784</li></ul></li></ol>',6),y=["src"],x=n("ol",null,[n("li",null,[s("\u63D2\u5165\u8282\u70B9, \u91CD\u65B0\u5411\u4E0A\u8C03\u6574\u5806("),n("code",null,"sift-up"),s(") "),n("ul",null,[n("li",null,"\u5C06\u65B0\u5143\u7D20\u63D2\u5165\u5230\u6570\u7EC4\u672B\u5C3E\u4E4B\u540E, \u8981\u91CD\u65B0\u8C03\u6574\u6570\u7EC4\u7ED3\u6784, \u4FDD\u8BC1\u6570\u7EC4\u4EFB\u7136\u662F\u6700\u5C0F(\u6216\u6700\u5927)\u5806.")])])],-1),_=["src"],g=n("ol",null,[n("li",null,[s("\u63D0\u53D6\u6216\u5220\u9664\u6839\u8282\u70B9(\u9876\u7AEF\u8282\u70B9), \u91CD\u65B0\u5411\u4E0B\u8C03\u6574\u5806("),n("code",null,"sift-down"),s(") "),n("ul",null,[n("li",null,"\u5BF9\u4E8E\u6700\u5927\u5806, \u63D0\u53D6\u7684\u662F\u6700\u5927\u503C. \u5BF9\u4E8E\u6700\u5C0F\u5806, \u63D0\u53D6\u7684\u662F\u6700\u5C0F\u503C."),n("li",null,"\u9876\u70B9\u88AB\u63D0\u53D6\u4E4B\u540E, \u8981\u91CD\u65B0\u8C03\u6574\u6570\u7EC4\u7ED3\u6784, \u4FDD\u8BC1\u6570\u7EC4\u4EFB\u7136\u662F\u6700\u5C0F(\u6216\u6700\u5927)\u5806.")])])],-1),I=["src"],v=e(`<ol><li>\u6392\u5E8F\u8FC7\u7A0B</li></ol><p>\u5229\u7528\u4E8C\u53C9\u5806\u7684\u7279\u6027, \u6392\u5E8F\u5C31\u662F\u5FAA\u73AF\u63D0\u53D6\u6839\u8282\u70B9\u7684\u8FC7\u7A0B. \u5FAA\u73AF\u6267\u884C\u6B65\u9AA4 3, \u76F4\u5230\u5C06\u6240\u6709\u7684\u8282\u70B9\u90FD\u63D0\u53D6\u5B8C\u6210, \u88AB\u63D0\u53D6\u7684\u8282\u70B9\u6784\u6210\u7684\u6570\u7EC4\u5C31\u662F\u4E00\u4E2A\u6709\u5E8F\u6570\u7EC4.</p><p>\u6CE8\u610F:</p><ul><li>\u5982\u9700\u5347\u5E8F\u6392\u5E8F, \u5E94\u8BE5\u6784\u9020\u6700\u5927\u5806. \u56E0\u4E3A\u6700\u5927\u7684\u5143\u7D20\u6700\u5148\u88AB\u63D0\u53D6\u51FA\u6765, \u88AB\u653E\u7F6E\u5230\u4E86\u6570\u7EC4\u7684\u6700\u540E, \u6700\u7EC8\u6570\u7EC4\u4E2D\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u4E3A\u6700\u5927\u5143\u7D20.</li><li>\u5982\u9700\u964D\u5E8F\u6392\u5E8F, \u5E94\u8BE5\u6784\u9020\u6700\u5C0F\u5806. \u56E0\u4E3A\u6700\u5C0F\u7684\u5143\u7D20\u6700\u5148\u88AB\u63D0\u53D6\u51FA\u6765, \u88AB\u653E\u7F6E\u5230\u4E86\u6570\u7EC4\u7684\u6700\u540E, \u6700\u7EC8\u6570\u7EC4\u4E2D\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u4E3A\u6700\u5C0F\u5143\u7D20.</li><li>\u5806\u6392\u5E8F\u662F\u4E00\u79CD\u4E0D\u7A33\u5B9A\u6392\u5E8F(\u5BF9\u4E8E\u76F8\u540C\u5927\u5C0F\u7684\u5143\u7D20, \u5728\u6392\u5E8F\u4E4B\u540E\u6709\u53EF\u80FD\u548C\u6392\u5E8F\u524D\u7684\u5148\u540E\u6B21\u5E8F\u88AB\u6253\u4E71).</li></ul><h2 id="\u4EE3\u7801\u6F14\u793A" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u6F14\u793A" aria-hidden="true">#</a> \u4EE3\u7801\u6F14\u793A</h2><p>\u5C06\u4E71\u5E8F\u6570\u7EC4<code>[5,8,0,10,4,6,1]</code>\u964D\u5E8F\u6392\u5217</p><p>\u6B65\u9AA4:</p><ol><li>\u6784\u9020\u6700\u5C0F\u5806</li><li>\u5FAA\u73AF\u63D0\u53D6\u6839\u8282\u70B9, \u76F4\u5230\u5168\u90E8\u63D0\u53D6\u5B8C</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">minHeapSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. \u6784\u9020\u6700\u5C0F\u5806</span>
  <span class="token function">buildMinHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. \u5FAA\u73AF\u63D0\u53D6\u6839\u8282\u70B9arr[0], \u76F4\u5230\u5168\u90E8\u63D0\u53D6\u5B8C</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token function">siftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u628A\u6574\u4E2A\u6570\u7EC4\u6784\u9020\u6210\u6700\u5C0F\u5806</span>
<span class="token keyword">const</span> <span class="token function-variable function">buildMinHeap</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> startIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">siftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u4ECEstartIndex\u7D22\u5F15\u5F00\u59CB, \u5411\u4E0B\u8C03\u6574\u6700\u5C0F\u5806</span>
<span class="token keyword">const</span> <span class="token function-variable function">siftDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> leftChildIndx <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> rightChildIndx <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> startIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> swapIndex <span class="token operator">=</span> startIndex<span class="token punctuation">;</span>
  <span class="token keyword">let</span> tmpNode <span class="token operator">=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChildIndx <span class="token operator">&lt;=</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>leftChildIndx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmpNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5F85\u5B9A\u662F\u5426\u4EA4\u6362, \u56E0\u4E3Aright\u5B50\u8282\u70B9\u6709\u53EF\u80FD\u66F4\u5C0F</span>
      tmpNode <span class="token operator">=</span> arr<span class="token punctuation">[</span>leftChildIndx<span class="token punctuation">]</span><span class="token punctuation">;</span>
      swapIndex <span class="token operator">=</span> leftChildIndx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChildIndx <span class="token operator">&lt;=</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>rightChildIndx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmpNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u6BD4left\u8282\u70B9\u66F4\u5C0F, \u66FF\u6362swapIndex</span>
      tmpNode <span class="token operator">=</span> arr<span class="token punctuation">[</span>rightChildIndx<span class="token punctuation">]</span><span class="token punctuation">;</span>
      swapIndex <span class="token operator">=</span> rightChildIndx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>swapIndex <span class="token operator">!==</span> startIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.\u4EA4\u6362\u8282\u70B9</span>
    arr<span class="token punctuation">[</span>swapIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">=</span> tmpNode<span class="token punctuation">;</span>

    <span class="token comment">// 2. \u9012\u5F52\u8C03\u7528, \u7EE7\u7EED\u5411\u4E0B\u8C03\u6574</span>
    <span class="token function">siftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> swapIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>\u6D4B\u8BD5:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">minHeapSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 8, 6, 5,4, 1, 0]</span>

<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">minHeapSort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5 ]</span>

<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">minHeapSort</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 5, 1 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="react-\u5F53\u4E2D\u7684\u4F7F\u7528\u573A\u666F" tabindex="-1"><a class="header-anchor" href="#react-\u5F53\u4E2D\u7684\u4F7F\u7528\u573A\u666F" aria-hidden="true">#</a> React \u5F53\u4E2D\u7684\u4F7F\u7528\u573A\u666F</h2>`,12),N=s("\u5BF9\u4E8E\u4E8C\u53C9\u5806\u7684\u5E94\u7528\u662F\u5728"),C=n("code",null,"scheduler",-1),E=s("\u5305\u4E2D, \u6709 2 \u4E2A\u6570\u7EC4"),j={href:"https://github.com/facebook/react/blob/v17.0.2/packages/scheduler/src/Scheduler.js#L63-L64",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"taskQueue",-1),D=s("\u548C"),S=n("code",null,"timerQueue",-1),B=s(", \u5B83\u4EEC\u90FD\u662F\u4EE5"),A=n("code",null,"\u6700\u5C0F\u5806",-1),L=s("\u7684\u5F62\u5F0F\u8FDB\u884C\u5B58\u50A8, \u8FD9\u6837\u5C31\u80FD\u4FDD\u8BC1\u4EE5"),U=n("code",null,"O(1)",-1),M=s("\u7684\u65F6\u95F4\u590D\u6742\u5EA6, \u53D6\u5230\u6570\u7EC4\u9876\u7AEF\u7684\u5BF9\u8C61(\u4F18\u5148\u7EA7\u6700\u9AD8\u7684 task)."),F=s("\u5177\u4F53\u7684\u8C03\u7528\u8FC7\u7A0B\u88AB\u5C01\u88C5\u5230\u4E86"),V={href:"https://github.com/facebook/react/blob/v17.0.2/packages/scheduler/src/SchedulerMinHeap.js#L41-L87",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"SchedulerMinHeap.js",-1),$=s(", \u5176\u4E2D\u6709 2 \u4E2A\u51FD\u6570"),O=n("code",null,"siftUp",-1),Q=s(","),R=n("code",null,"siftDown",-1),z=s("\u5206\u522B\u5BF9\u5E94\u5411\u4E0A\u8C03\u6574\u548C\u5411\u4E0B\u8C03\u6574."),q=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type Heap <span class="token operator">=</span> Array<span class="token operator">&lt;</span>Node<span class="token operator">&gt;</span><span class="token punctuation">;</span>
type Node <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">|</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
  <span class="token literal-property property">sortIndex</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
<span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u6DFB\u52A0\u65B0\u8282\u70B9, \u6DFB\u52A0\u4E4B\u540E, \u9700\u8981\u8C03\u7528\`siftUp\`\u51FD\u6570\u5411\u4E0A\u8C03\u6574\u5806.</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">heap</span><span class="token operator">:</span> Heap<span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> Node</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> index <span class="token operator">=</span> heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">siftUp</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> node<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u67E5\u770B\u5806\u7684\u9876\u70B9, \u4E5F\u5C31\u662F\u4F18\u5148\u7EA7\u6700\u9AD8\u7684\`task\`\u6216\`timer\`</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">heap</span><span class="token operator">:</span> Heap</span><span class="token punctuation">)</span><span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> first <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> first <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> first<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5C06\u5806\u7684\u9876\u70B9\u63D0\u53D6\u51FA\u6765, \u5E76\u5220\u9664\u9876\u70B9\u4E4B\u540E, \u9700\u8981\u8C03\u7528\`siftDown\`\u51FD\u6570\u5411\u4E0B\u8C03\u6574\u5806.</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">heap</span><span class="token operator">:</span> Heap</span><span class="token punctuation">)</span><span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> first <span class="token operator">=</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> last <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">!==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token punctuation">;</span>
      <span class="token function">siftDown</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> first<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5F53\u63D2\u5165\u8282\u70B9\u4E4B\u540E, \u9700\u8981\u5411\u4E0A\u8C03\u6574\u5806\u7ED3\u6784, \u4FDD\u8BC1\u6570\u7EC4\u662F\u4E00\u4E2A\u6700\u5C0F\u5806.</span>
<span class="token keyword">function</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token parameter">heap<span class="token punctuation">,</span> node<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parentIndex <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span> heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// The parent is larger. Swap positions.</span>
      heap<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
      heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">;</span>
      index <span class="token operator">=</span> parentIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// The parent is smaller. Exit.</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5411\u4E0B\u8C03\u6574\u5806\u7ED3\u6784, \u4FDD\u8BC1\u6570\u7EC4\u662F\u4E00\u4E2A\u6700\u5C0F\u5806.</span>
<span class="token keyword">function</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token parameter">heap<span class="token punctuation">,</span> node<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> heap<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> leftIndex <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> left <span class="token operator">=</span> heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rightIndex <span class="token operator">=</span> leftIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> right <span class="token operator">=</span> heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// If the left or right node is smaller, swap with the smaller of those.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> left<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
        heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
        index <span class="token operator">=</span> rightIndex<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
        heap<span class="token punctuation">[</span>leftIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
        index <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compare</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
      heap<span class="token punctuation">[</span>rightIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
      index <span class="token operator">=</span> rightIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Neither child is smaller. Exit.</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br></div></div><ul><li><code>peek</code>\u51FD\u6570: \u67E5\u770B\u5806\u7684\u9876\u70B9, \u4E5F\u5C31\u662F\u4F18\u5148\u7EA7\u6700\u9AD8\u7684<code>task</code>\u6216<code>timer</code>.</li><li><code>pop</code>\u51FD\u6570: \u5C06\u5806\u7684\u9876\u70B9\u63D0\u53D6\u51FA\u6765, \u5E76\u5220\u9664\u9876\u70B9\u4E4B\u540E, \u9700\u8981\u8C03\u7528<code>siftDown</code>\u51FD\u6570\u5411\u4E0B\u8C03\u6574\u5806.</li><li><code>push</code>\u51FD\u6570: \u6DFB\u52A0\u65B0\u8282\u70B9, \u6DFB\u52A0\u4E4B\u540E, \u9700\u8981\u8C03\u7528<code>siftUp</code>\u51FD\u6570\u5411\u4E0A\u8C03\u6574\u5806.</li><li><code>siftDown</code>\u51FD\u6570: \u5411\u4E0B\u8C03\u6574\u5806\u7ED3\u6784, \u4FDD\u8BC1\u6570\u7EC4\u662F\u4E00\u4E2A\u6700\u5C0F\u5806.</li><li><code>siftUp</code>\u51FD\u6570: \u5F53\u63D2\u5165\u8282\u70B9\u4E4B\u540E, \u9700\u8981\u5411\u4E0A\u8C03\u6574\u5806\u7ED3\u6784, \u4FDD\u8BC1\u6570\u7EC4\u662F\u4E00\u4E2A\u6700\u5C0F\u5806.</li></ul><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u672C\u8282\u4ECB\u7ECD\u4E86<code>\u5806\u6392\u5E8F</code>\u7684\u57FA\u672C\u4F7F\u7528, \u5E76\u8BF4\u660E\u4E86<code>\u5806\u6392\u5E8F</code>\u5728<code>react</code>\u6E90\u7801\u4E2D\u7684\u5E94\u7528. \u5728\u9605\u8BFB<code>scheduler</code>\u5305\u7684\u6E90\u7801\u65F6, \u4F1A\u66F4\u52A0\u6E05\u6670\u7684\u7406\u89E3\u4F5C\u8005\u7684\u601D\u8DEF.</p>`,4);function G(a,J){const p=o("ExternalLinkIcon");return c(),l(r,null,[k,b,n("p",null,[d,n("a",m,[h,t(p)]),f]),w,n("img",{src:a.$withBase("/assets/react-illustration-series/minheap.png"),alt:"demo"},null,8,y),x,n("img",{src:a.$withBase("/assets/react-illustration-series/minheap-insert.png"),alt:"demo"},null,8,_),g,n("img",{src:a.$withBase("/assets/react-illustration-series/minheap-remove.png"),alt:"demo"},null,8,I),v,n("p",null,[N,C,E,n("a",j,[H,D,S,t(p)]),B,A,L,U,M]),n("p",null,[F,n("a",V,[T,t(p)]),$,O,Q,R,z]),q],64)}var W=u(i,[["render",G]]);export{W as default};
