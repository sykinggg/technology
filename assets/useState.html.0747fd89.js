import{a as n}from"./app.6f963528.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><h1 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate" aria-hidden="true">#</a> useState</h1><p>\u5F53\u7684\u4EE3\u7801\u6267\u884C\u5230\u4E86<code>useState</code>\u7684\u65F6\u5019\uFF0C\u4ED6\u5230\u5E95\u505A\u4E86\u4EC0\u4E48\u5462\uFF1F</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> basicStateReducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token literal-property property">action</span><span class="token operator">:</span> BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">S</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> useState<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">initialState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">S</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>
    basicStateReducer<span class="token punctuation">,</span>
    <span class="token comment">// useReducer has a special case to support lazy useState initializers</span>
    <span class="token punctuation">(</span>initialState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u53EF\u89C1<code>useState</code>\u4E0D\u8FC7\u5C31\u662F\u4E2A\u8BED\u6CD5\u7CD6\uFF0C\u672C\u8D28\u5176\u5B9E\u5C31\u662F<code>useReducer</code>\uFF0C\u90A3\u4E48<code>useReducer</code>\u5177\u4F53\u505A\u4E86\u4EC0\u4E48\u5462\uFF1F</p><h2 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer" aria-hidden="true">#</a> useReducer</h2><p>\u6700\u5F00\u59CB\u7684\u4E24\u53E5\u4EE3\u7801\u662F\u6BCF\u4E2AHooks\u90FD\u4F1A\u505A\u7684\u7EDF\u4E00\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>currentlyRenderingFiber <span class="token operator">=</span> <span class="token function">resolveCurrentlyRenderingFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
workInProgressHook <span class="token operator">=</span> <span class="token function">createWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p><a href="">currentlyRenderingFiber</a></p></li><li><p><a href="">createWorkInProgressHook</a></p></li></ul><p>\u8FD9\u91CC\u5206\u4E24\u79CD\u60C5\u51B5\uFF1A\u7B2C\u4E00\u6B21\u6E32\u67D3\u548C\u66F4\u65B0\uFF0C\u5982\u679C<code>workInProgressHook.queue</code>\u5B58\u5728\u5219\u4E3A\u66F4\u65B0\uFF0C\u5426\u5219\u662F\u7B2C\u4E00\u6B21\u6E32\u67D3</p><h2 id="\u7B2C\u4E00\u6B21\u6E32\u67D3" tabindex="-1"><a class="header-anchor" href="#\u7B2C\u4E00\u6B21\u6E32\u67D3" aria-hidden="true">#</a> \u7B2C\u4E00\u6B21\u6E32\u67D3</h2><p>\u7B2C\u4E00\u6B21\u6E32\u67D3\u4E3B\u8981\u5C31\u662F\u521D\u59CB\u5316\u64CD\u4F5C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// There&#39;s no existing queue, so this is the initial render.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>reducer <span class="token operator">===</span> basicStateReducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Special case for \`useState\`.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    initialState <span class="token operator">=</span> <span class="token function">initialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialAction <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> initialAction <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  initialState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> initialAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
workInProgressHook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u8FD9\u91CC\u521D\u59CB\u5316<code>initialState</code>\uFF0C\u5E76\u4E14\u8BB0\u5F55\u5728<code>workInProgressHook.memoizedState</code>\u548C<code>workInProgressHook.baseState</code>\u4E0A</p><p>\u7136\u540E\u521B\u5EFA<code>queue</code>\u5BF9\u8C61</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>queue <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u8FD9\u4E00\u770B\u5230<code>queue</code>\u7684\u7ED3\u6784\u975E\u5E38\u7B80\u5355\uFF0C\u53EA\u6709\u4E00\u4E2A<code>last</code>\u6307\u9488\u548C<code>dispatch</code>\uFF0C<code>dispatch</code>\u662F\u7528\u6765\u8BB0\u5F55<strong>\u66F4\u65B0<code>state</code>\u7684\u65B9\u6CD5\u7684</strong>\uFF0C\u63A5\u4E0B\u53BB\u5C31\u8981\u521B\u5EFA<code>dispatch</code>\u65B9\u6CD5\u4E86</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dispatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">dispatchAction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  currentlyRenderingFiber<span class="token punctuation">,</span>
  queue<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u53EF\u4EE5\u770B\u5230\u8FD9\u4E2A<code>dispatch</code>\u5C31\u662F<code>dispatchAction</code>\u7ED1\u5B9A\u4E86\u5BF9\u5E94\u7684<code>Fiber</code>\u548C<code>queue</code>\u3002\u6700\u540E<code>return</code>\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>workInProgressHook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5BF9\u5E94\u4E86<code>const [state, updateState] = useState(&#39;default&#39;)</code>\u7684\u7528\u6CD5</p><h2 id="\u66F4\u65B0" tabindex="-1"><a class="header-anchor" href="#\u66F4\u65B0" aria-hidden="true">#</a> \u66F4\u65B0</h2><p>\u5206\u4E24\u79CD\u60C5\u51B5\uFF0C<strong>\u662F\u5426\u662F<code>reRender</code></strong>\uFF0C\u6240\u8C13<code>reRender</code>\u5C31\u662F\u8BF4\u5728<strong>\u5F53\u524D\u66F4\u65B0\u5468\u671F\u4E2D\u53C8\u4EA7\u751F\u4E86\u65B0\u7684\u66F4\u65B0\uFF0C\u5C31\u7EE7\u7EED\u6267\u884C\u8FD9\u4E9B\u66F4\u65B0\u77E5\u9053\u5F53\u524D\u6E32\u67D3\u5468\u671F\u4E2D\u6CA1\u6709\u66F4\u65B0\u4E3A\u6B62</strong></p><p>\u4ED6\u4EEC\u57FA\u672C\u7684\u64CD\u4F5C\u662F\u4E00\u81F4\u7684\uFF0C\u5C31\u662F\u6839\u636E<code>reducer</code>\u548C<code>update.action</code>\u6765\u521B\u5EFA\u65B0\u7684<code>state</code>\uFF0C\u5E76\u8D4B\u503C\u7ED9<code>Hook.memoizedState</code>\u4EE5\u53CA<code>Hook.baseState</code>\u3002</p><p>\u6CE8\u610F\u8FD9\u91CC\uFF0C\u5BF9\u4E8E\u975E<code>reRender</code>\u5F97\u60C5\u51B5\uFF0C\u4F1A\u5BF9\u6BCF\u4E2A\u66F4\u65B0\u5224\u65AD\u5176\u4F18\u5148\u7EA7\uFF0C\u5982\u679C\u4E0D\u662F\u5F53\u524D\u6574\u4F53\u66F4\u65B0\u4F18\u5148\u7EA7\u5185\u5F97\u66F4\u65B0\u4F1A\u8DF3\u8FC7\uFF0C\u7B2C\u4E00\u4E2A\u8DF3\u8FC7\u5F97<code>Update</code>\u4F1A\u53D8\u6210\u65B0\u7684<code>baseUpdate</code>\uFF0C\u4ED6<strong>\u8BB0\u5F55\u4E86\u5728\u4E4B\u540E\u6240\u6709\u5F97<code>Update</code>\uFF0C\u5373\u4FBF\u662F\u4F18\u5148\u7EA7\u6BD4\u4ED6\u9AD8\u5F97\uFF0C\u56E0\u4E3A\u5728\u4ED6\u88AB\u6267\u884C\u5F97\u65F6\u5019\uFF0C\u9700\u8981\u4FDD\u8BC1\u540E\u7EED\u7684\u66F4\u65B0\u8981\u5728\u4ED6\u66F4\u65B0\u4E4B\u540E\u7684\u57FA\u7840\u4E0A\u518D\u6B21\u6267\u884C\uFF0C\u56E0\u4E3A\u7ED3\u679C\u53EF\u80FD\u4F1A\u4E0D\u4E00\u6837\u3002</strong></p><blockquote><p>\u6E90\u7801</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> useReducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token function-variable function">reducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialState</span><span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialAction</span><span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  currentlyRenderingFiber <span class="token operator">=</span> <span class="token function">resolveCurrentlyRenderingFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  workInProgressHook <span class="token operator">=</span> <span class="token function">createWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">queue</span><span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgressHook<span class="token punctuation">.</span>queue<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Already have a queue, so this is an update.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isReRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// This is a re-render. Apply the new render phase updates to the previous</span>
      <span class="token comment">// work-in-progress hook.</span>
      <span class="token keyword">const</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dispatch<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>renderPhaseUpdates <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Render phase updates are stored in a map of queue -&gt; linked list</span>
        <span class="token keyword">const</span> firstRenderPhaseUpdate <span class="token operator">=</span> renderPhaseUpdates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstRenderPhaseUpdate <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          renderPhaseUpdates<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">let</span> newState <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
          <span class="token keyword">let</span> update <span class="token operator">=</span> firstRenderPhaseUpdate<span class="token punctuation">;</span>
          <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token comment">// Process this render phase update. We don&#39;t have to check the</span>
            <span class="token comment">// priority because it will always be the same as the current</span>
            <span class="token comment">// render&#39;s.</span>
            <span class="token keyword">const</span> action <span class="token operator">=</span> update<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
            newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>newState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
            update <span class="token operator">=</span> update<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>update <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          workInProgressHook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> newState<span class="token punctuation">;</span>

          <span class="token comment">// Don&#39;t persist the state accumlated from the render phase updates to</span>
          <span class="token comment">// the base state unless the queue is empty.</span>
          <span class="token comment">// TODO: Not sure if this is the desired semantics, but it&#39;s what we</span>
          <span class="token comment">// do for gDSFP. I can&#39;t remember why.</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressHook<span class="token punctuation">.</span>baseUpdate <span class="token operator">===</span> queue<span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            workInProgressHook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> newState<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">return</span> <span class="token punctuation">[</span>newState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>workInProgressHook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// The last update in the entire queue</span>
    <span class="token keyword">const</span> last <span class="token operator">=</span> queue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>
    <span class="token comment">// The last update that is part of the base state.</span>
    <span class="token keyword">const</span> baseUpdate <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>baseUpdate<span class="token punctuation">;</span>

    <span class="token comment">// Find the first unprocessed update.</span>
    <span class="token keyword">let</span> first<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseUpdate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// For the first update, the queue is a circular linked list where</span>
        <span class="token comment">// \`queue.last.next = queue.first\`. Once the first update commits, and</span>
        <span class="token comment">// the \`baseUpdate\` is no longer empty, we can unravel the list.</span>
        last<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      first <span class="token operator">=</span> baseUpdate<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      first <span class="token operator">=</span> last <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> last<span class="token punctuation">.</span>next <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> newState <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>baseState<span class="token punctuation">;</span>
      <span class="token keyword">let</span> newBaseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> newBaseUpdate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> prevUpdate <span class="token operator">=</span> baseUpdate<span class="token punctuation">;</span>
      <span class="token keyword">let</span> update <span class="token operator">=</span> first<span class="token punctuation">;</span>
      <span class="token keyword">let</span> didSkip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> updateExpirationTime <span class="token operator">=</span> update<span class="token punctuation">.</span>expirationTime<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">&lt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// Priority is insufficient. Skip this update. If this is the first</span>
          <span class="token comment">// skipped update, the previous update/state is the new base</span>
          <span class="token comment">// update/state.</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>didSkip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            didSkip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            newBaseUpdate <span class="token operator">=</span> prevUpdate<span class="token punctuation">;</span>
            newBaseState <span class="token operator">=</span> newState<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// Update the remaining priority in the queue.</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">&gt;</span> remainingExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            remainingExpirationTime <span class="token operator">=</span> updateExpirationTime<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// Process this update.</span>
          <span class="token keyword">const</span> action <span class="token operator">=</span> update<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
          newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>newState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prevUpdate <span class="token operator">=</span> update<span class="token punctuation">;</span>
        update <span class="token operator">=</span> update<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>update <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> update <span class="token operator">!==</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>didSkip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newBaseUpdate <span class="token operator">=</span> prevUpdate<span class="token punctuation">;</span>
        newBaseState <span class="token operator">=</span> newState<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      workInProgressHook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> newState<span class="token punctuation">;</span>
      workInProgressHook<span class="token punctuation">.</span>baseUpdate <span class="token operator">=</span> newBaseUpdate<span class="token punctuation">;</span>
      workInProgressHook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> newBaseState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dispatch<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>workInProgressHook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// There&#39;s no existing queue, so this is the initial render.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>reducer <span class="token operator">===</span> basicStateReducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Special case for \`useState\`.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      initialState <span class="token operator">=</span> <span class="token function">initialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialAction <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> initialAction <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    initialState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> initialAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  workInProgressHook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>
  queue <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dispatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">dispatchAction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    currentlyRenderingFiber<span class="token punctuation">,</span>
    queue<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>workInProgressHook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br></div></div><h2 id="dispatchaction" tabindex="-1"><a class="header-anchor" href="#dispatchaction" aria-hidden="true">#</a> dispatchAction</h2><p>\u9996\u5148\u770B\u8FD9\u4E2A\u5224\u65AD\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
  fiber <span class="token operator">===</span> currentlyRenderingFiber <span class="token operator">||</span>
  <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> alternate <span class="token operator">===</span> currentlyRenderingFiber<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u8FD9\u5176\u5B9E\u5C31\u662F\u5224\u65AD\u8FD9\u4E2A\u66F4\u65B0\u662F\u5426\u662F\u5728<strong>\u6E32\u67D3\u8FC7\u7A0B\u4E2D\u4EA7\u751F\u7684</strong>\uFF0C<code>currentlyRenderingFiber</code>\u53EA\u6709\u5728<code>FunctionalComponent</code>\u66F4\u65B0\u7684\u8FC7\u7A0B\u4E2D\u624D\u4F1A\u88AB\u8BBE\u7F6E\uFF0C\u5728\u79BB\u5F00\u66F4\u65B0\u7684\u65F6\u5019\u8BBE\u7F6E\u4E3A<code>null</code>\uFF0C\u6240\u4EE5\u53EA\u8981\u5B58\u5728\u5E76\u66F4\u4EA7\u751F\u66F4\u65B0\u7684<code>Fiber</code>\u76F8\u7B49\uFF0C\u8BF4\u660E\u8FD9\u4E2A\u66F4\u65B0\u662F\u5728\u5F53\u524D\u6E32\u67D3\u4E2D\u4EA7\u751F\u7684\uFF0C\u5219\u8FD9\u662F\u4E00\u6B21<code>reRender</code>\u3002</p><p>\u6240\u6709\u66F4\u65B0\u8FC7\u7A0B\u4E2D\u4EA7\u751F\u7684\u66F4\u65B0\u8BB0\u5F55\u5728<code>renderPhaseUpdates</code>\u8FD9\u4E2AMap\u4E0A\uFF0C\u4EE5\u6BCF\u4E2A<code>Hook</code>\u7684<code>queue</code>\u4E3A<code>key</code>\u3002</p><p>\u5BF9\u4E8E\u4E0D\u662F\u66F4\u65B0\u8FC7\u7A0B\u4E2D\u4EA7\u751F\u7684\u66F4\u65B0\uFF0C\u5219\u76F4\u63A5\u5728<code>queue</code>\u4E0A\u6267\u884C\u64CD\u4F5C\u5C31\u884C\u4E86\uFF0C\u6CE8\u610F\u5728\u6700\u540E\u4F1A\u53D1\u8D77\u4E00\u6B21<code>scheduleWork</code>\u7684\u8C03\u5EA6\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> dispatchAction<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>fiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span> <span class="token literal-property property">queue</span><span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">invariant</span><span class="token punctuation">(</span>
    numberOfReRenders <span class="token operator">&lt;</span> <span class="token constant">RE_RENDER_LIMIT</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Too many re-renders. React limits the number of renders to prevent &#39;</span> <span class="token operator">+</span>
      <span class="token string">&#39;an infinite loop.&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> alternate <span class="token operator">=</span> fiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    fiber <span class="token operator">===</span> currentlyRenderingFiber <span class="token operator">||</span>
    <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> alternate <span class="token operator">===</span> currentlyRenderingFiber<span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is a render phase update. Stash it in a lazily-created map of</span>
    <span class="token comment">// queue -&gt; linked list of updates. After this render pass, we&#39;ll restart</span>
    <span class="token comment">// and apply the stashed updates on top of the work-in-progress hook.</span>
    didScheduleRenderPhaseUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token literal-property property">update</span><span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">expirationTime</span><span class="token operator">:</span> renderExpirationTime<span class="token punctuation">,</span>
      action<span class="token punctuation">,</span>
      <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderPhaseUpdates <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      renderPhaseUpdates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> firstRenderPhaseUpdate <span class="token operator">=</span> renderPhaseUpdates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstRenderPhaseUpdate <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      renderPhaseUpdates<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Append the update to the end of the list.</span>
      <span class="token keyword">let</span> lastRenderPhaseUpdate <span class="token operator">=</span> firstRenderPhaseUpdate<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>lastRenderPhaseUpdate<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lastRenderPhaseUpdate <span class="token operator">=</span> lastRenderPhaseUpdate<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      lastRenderPhaseUpdate<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> currentTime <span class="token operator">=</span> <span class="token function">requestCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> expirationTime <span class="token operator">=</span> <span class="token function">computeExpirationForFiber</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token literal-property property">update</span><span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      expirationTime<span class="token punctuation">,</span>
      action<span class="token punctuation">,</span>
      <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Append the update to the end of the list.</span>
    <span class="token keyword">const</span> last <span class="token operator">=</span> queue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// This is the first update. Create a circular list.</span>
      update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> first <span class="token operator">=</span> last<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Still circular.</span>
        update<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      last<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token punctuation">.</span>last <span class="token operator">=</span> update<span class="token punctuation">;</span>
    <span class="token function">scheduleWork</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div>`,34);function e(t,o){return p}var r=s(a,[["render",e]]);export{r as default};
