import{o as e,c as o,b as n,t,F as c,a as p,e as s}from"./app.b05da4ec.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const u={},r=p(`<h1 id="parse" tabindex="-1"><a class="header-anchor" href="#parse" aria-hidden="true">#</a> parse</h1><p>\u7F16\u8BD1\u8FC7\u7A0B\u9996\u5148\u5C31\u662F\u5BF9\u6A21\u677F\u505A\u89E3\u6790\uFF0C\u751F\u6210 AST\uFF0C\u5B83\u662F\u4E00\u79CD\u62BD\u8C61\u8BED\u6CD5\u6811\uFF0C\u662F\u5BF9\u6E90\u4EE3\u7801\u7684\u62BD\u8C61\u8BED\u6CD5\u7ED3\u6784\u7684\u6811\u72B6\u8868\u73B0\u5F62\u5F0F\u3002\u5728\u5F88\u591A\u7F16\u8BD1\u6280\u672F\u4E2D\uFF0C\u5982 babel \u7F16\u8BD1 ES6 \u7684\u4EE3\u7801\u90FD\u4F1A\u5148\u751F\u6210 AST\u3002</p><p>\u8FD9\u4E2A\u8FC7\u7A0B\u662F\u6BD4\u8F83\u590D\u6742\u7684\uFF0C\u5B83\u4F1A\u7528\u5230\u5927\u91CF\u6B63\u5219\u8868\u8FBE\u5F0F\u5BF9\u5B57\u7B26\u4E32\u89E3\u6790\uFF0C\u5982\u679C\u5BF9\u6B63\u5219\u4E0D\u662F\u5F88\u4E86\u89E3\uFF0C\u5EFA\u8BAE\u5148\u53BB\u8865\u4E60\u6B63\u5219\u8868\u8FBE\u5F0F\u7684\u77E5\u8BC6\u3002\u4E3A\u4E86\u76F4\u89C2\u5730\u6F14\u793A <code>parse</code> \u7684\u8FC7\u7A0B\uFF0C\u5148\u6765\u770B\u4E00\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bindCls<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,index) in data<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clickItem(index)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}:{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u7ECF\u8FC7 <code>parse</code> \u8FC7\u7A0B\u540E\uFF0C\u751F\u6210\u7684 AST \u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ast <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;tag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;attrsList&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;attrsMap&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;:class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bindCls&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;v-if&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;if&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;ifConditions&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;exp&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;block&#39;</span><span class="token operator">:</span> <span class="token comment">// ul ast element</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;parent&#39;</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;plain&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;staticClass&#39;</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;classBinding&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bindCls&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;tag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;attrsList&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@click&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;attrsMap&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@click&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;v-for&#39;</span><span class="token operator">:</span> <span class="token string">&#39;(item,index) in data&#39;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;parent&#39;</span><span class="token operator">:</span> <span class="token comment">// ul ast element</span>
    <span class="token string-property property">&#39;plain&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;events&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;click&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;hasBindings&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;for&#39;</span><span class="token operator">:</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;alias&#39;</span><span class="token operator">:</span> <span class="token string">&#39;item&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;iterator1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;expression&#39;</span><span class="token operator">:</span> <span class="token string">&#39;_s(item)+&quot;:&quot;+_s(index)&#39;</span>
      <span class="token string-property property">&#39;text&#39;</span><span class="token operator">:</span> <span class="token string">&#39;{{item}}:{{index}}&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;tokens&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&#39;:&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>\u53EF\u4EE5\u770B\u5230\uFF0C\u751F\u6210\u7684 AST \u662F\u4E00\u4E2A\u6811\u72B6\u7ED3\u6784\uFF0C\u6BCF\u4E00\u4E2A\u8282\u70B9\u90FD\u662F\u4E00\u4E2A <code>ast element</code>\uFF0C\u9664\u4E86\u5B83\u81EA\u8EAB\u7684\u4E00\u4E9B\u5C5E\u6027\uFF0C\u8FD8\u7EF4\u62A4\u4E86\u5B83\u7684\u7236\u5B50\u5173\u7CFB\uFF0C\u5982 <code>parent</code> \u6307\u5411\u5B83\u7684\u7236\u8282\u70B9\uFF0C<code>children</code> \u6307\u5411\u5B83\u7684\u6240\u6709\u5B50\u8282\u70B9\u3002\u5148\u5BF9 AST \u6709\u4E00\u4E9B\u76F4\u89C2\u7684\u5370\u8C61\uFF0C\u90A3\u4E48\u63A5\u4E0B\u6765\u6765\u5206\u6790\u4E00\u4E0B\u8FD9\u4E2A AST \u662F\u5982\u4F55\u5F97\u5230\u7684\u3002</p><h2 id="\u6574\u4F53\u6D41\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u6574\u4F53\u6D41\u7A0B" aria-hidden="true">#</a> \u6574\u4F53\u6D41\u7A0B</h2><p>\u9996\u5148\u6765\u770B\u4E00\u4E0B <code>parse</code> \u7684\u5B9A\u4E49\uFF0C\u5728 <code>src/compiler/parser/index.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parse</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">template</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> CompilerOptions</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ASTElement <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token function">getFnsAndConfigFromOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>

  <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// options ...</span>
    <span class="token function">start</span> <span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>
      <span class="token function">processElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
      <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">closeElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">chars</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">text</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handleText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">createChildrenASTOfText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">comment</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">text</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">createChildrenASTOfComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> astRootElement
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><code>parse</code> \u51FD\u6570\u7684\u4EE3\u7801\u5F88\u957F\uFF0C\u8D34\u4E00\u904D\u5BF9\u540C\u5B66\u7684\u7406\u89E3\u6CA1\u6709\u597D\u5904\uFF0C\u5148\u628A\u5B83\u62C6\u6210\u4F2A\u4EE3\u7801\u7684\u5F62\u5F0F\uFF0C\u65B9\u4FBF\u540C\u5B66\u4EEC\u5BF9\u6574\u4F53\u6D41\u7A0B\u5148\u6709\u4E00\u4E2A\u5927\u81F4\u7684\u4E86\u89E3\u3002\u63A5\u4E0B\u6765\u5C31\u6765\u5206\u89E3\u5206\u6790\u6BCF\u6BB5\u4F2A\u4EE3\u7801\u7684\u4F5C\u7528\u3002</p><h3 id="\u4ECE-options-\u4E2D\u83B7\u53D6\u65B9\u6CD5\u548C\u914D\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u4ECE-options-\u4E2D\u83B7\u53D6\u65B9\u6CD5\u548C\u914D\u7F6E" aria-hidden="true">#</a> \u4ECE options \u4E2D\u83B7\u53D6\u65B9\u6CD5\u548C\u914D\u7F6E</h3><p>\u5BF9\u5E94\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getFnsAndConfigFromOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>parse</code> \u51FD\u6570\u7684\u8F93\u5165\u662F <code>template</code> \u548C <code>options</code>\uFF0C\u8F93\u51FA\u662F AST \u7684\u6839\u8282\u70B9\u3002<code>template</code> \u5C31\u662F\u7684\u6A21\u677F\u5B57\u7B26\u4E32\uFF0C\u800C <code>options</code> \u5B9E\u9645\u4E0A\u662F\u548C\u5E73\u53F0\u76F8\u5173\u7684\u4E00\u4E9B\u914D\u7F6E\uFF0C\u5B83\u7684\u5B9A\u4E49\u5728 <code>src/platforms/web/compiler/options</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  isPreTag<span class="token punctuation">,</span>
  mustUseProp<span class="token punctuation">,</span>
  isReservedTag<span class="token punctuation">,</span>
  getTagNamespace
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../util/index&#39;</span>

<span class="token keyword">import</span> modules <span class="token keyword">from</span> <span class="token string">&#39;./modules/index&#39;</span>
<span class="token keyword">import</span> directives <span class="token keyword">from</span> <span class="token string">&#39;./directives/index&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> genStaticKeys <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;shared/util&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isUnaryTag<span class="token punctuation">,</span> canBeLeftOpenTag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./util&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">baseOptions</span><span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">expectHTML</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  modules<span class="token punctuation">,</span>
  directives<span class="token punctuation">,</span>
  isPreTag<span class="token punctuation">,</span>
  isUnaryTag<span class="token punctuation">,</span>
  mustUseProp<span class="token punctuation">,</span>
  canBeLeftOpenTag<span class="token punctuation">,</span>
  isReservedTag<span class="token punctuation">,</span>
  getTagNamespace<span class="token punctuation">,</span>
  <span class="token literal-property property">staticKeys</span><span class="token operator">:</span> <span class="token function">genStaticKeys</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>\u8FD9\u4E9B\u5C5E\u6027\u548C\u65B9\u6CD5\u4E4B\u6240\u4EE5\u653E\u5230 <code>platforms</code> \u76EE\u5F55\u4E0B\u662F\u56E0\u4E3A\u5B83\u4EEC\u5728\u4E0D\u540C\u7684\u5E73\u53F0\uFF08web \u548C weex\uFF09\u7684\u5B9E\u73B0\u662F\u4E0D\u540C\u7684\u3002</p><p>\u7528\u4F2A\u4EE3\u7801 <code>getFnsAndConfigFromOptions</code> \u8868\u793A\u4E86\u8FD9\u4E00\u8FC7\u7A0B\uFF0C\u5B83\u7684\u5B9E\u9645\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>warn <span class="token operator">=</span> options<span class="token punctuation">.</span>warn <span class="token operator">||</span> baseWarn

platformIsPreTag <span class="token operator">=</span> options<span class="token punctuation">.</span>isPreTag <span class="token operator">||</span> no
platformMustUseProp <span class="token operator">=</span> options<span class="token punctuation">.</span>mustUseProp <span class="token operator">||</span> no
platformGetTagNamespace <span class="token operator">=</span> options<span class="token punctuation">.</span>getTagNamespace <span class="token operator">||</span> no

transforms <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">&#39;transformNode&#39;</span><span class="token punctuation">)</span>
preTransforms <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">&#39;preTransformNode&#39;</span><span class="token punctuation">)</span>
postTransforms <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">&#39;postTransformNode&#39;</span><span class="token punctuation">)</span>

delimiters <span class="token operator">=</span> options<span class="token punctuation">.</span>delimiters
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u8FD9\u4E9B\u65B9\u6CD5\u548C\u914D\u7F6E\u90FD\u662F\u540E\u7EED\u89E3\u6790\u65F6\u5019\u9700\u8981\u7684\uFF0C\u53EF\u4EE5\u4E0D\u7528\u53BB\u7BA1\u5B83\u4EEC\u7684\u5177\u4F53\u4F5C\u7528\uFF0C\u5148\u5F80\u540E\u770B\u3002</p><h3 id="\u89E3\u6790-html-\u6A21\u677F" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6790-html-\u6A21\u677F" aria-hidden="true">#</a> \u89E3\u6790 HTML \u6A21\u677F</h3><p>\u5BF9\u5E94\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5BF9\u4E8E <code>template</code> \u6A21\u677F\u7684\u89E3\u6790\u4E3B\u8981\u662F\u901A\u8FC7 <code>parseHTML</code> \u51FD\u6570\uFF0C\u5B83\u7684\u5B9A\u4E49\u5728 <code>src/compiler/parser/html-parser</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parseHTML</span> <span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> lastTag
  <span class="token keyword">while</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTag <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isPlainTextElement</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> textEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>matchComment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">advance</span><span class="token punctuation">(</span>commentLength<span class="token punctuation">)</span>
           <span class="token keyword">continue</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>matchDoctype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">advance</span><span class="token punctuation">(</span>doctypeLength<span class="token punctuation">)</span>
           <span class="token keyword">continue</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>matchEndTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">advance</span><span class="token punctuation">(</span>endTagLength<span class="token punctuation">)</span>
           <span class="token function">parseEndTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
           <span class="token keyword">continue</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>matchStartTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
           <span class="token function">handleStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
           <span class="token keyword">continue</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">handleText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">advance</span><span class="token punctuation">(</span>textLength<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token function">handlePlainTextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token function">parseEndTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>\u7531\u4E8E <code>parseHTML</code> \u7684\u903B\u8F91\u4E5F\u975E\u5E38\u590D\u6742\uFF0C\u56E0\u6B64\u4E5F\u7528\u4E86\u4F2A\u4EE3\u7801\u7684\u65B9\u5F0F\u8868\u8FBE\uFF0C\u6574\u4F53\u6765\u8BF4\u5B83\u7684\u903B\u8F91\u5C31\u662F\u5FAA\u73AF\u89E3\u6790 <code>template</code> \uFF0C\u7528\u6B63\u5219\u505A\u5404\u79CD\u5339\u914D\uFF0C\u5BF9\u4E8E\u4E0D\u540C\u60C5\u51B5\u5206\u522B\u8FDB\u884C\u4E0D\u540C\u7684\u5904\u7406\uFF0C\u76F4\u5230\u6574\u4E2A template \u88AB\u89E3\u6790\u5B8C\u6BD5\u3002 \u5728\u5339\u914D\u7684\u8FC7\u7A0B\u4E2D\u4F1A\u5229\u7528 <code>advance</code> \u51FD\u6570\u4E0D\u65AD\u524D\u8FDB\u6574\u4E2A\u6A21\u677F\u5B57\u7B26\u4E32\uFF0C\u76F4\u5230\u5B57\u7B26\u4E32\u672B\u5C3E\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">advance</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  index <span class="token operator">+=</span> n
  html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u4E3A\u4E86\u66F4\u52A0\u76F4\u89C2\u5730\u8BF4\u660E <code>advance</code> \u7684\u4F5C\u7528\uFF0C\u53EF\u4EE5\u901A\u8FC7\u4E00\u526F\u56FE\u8868\u793A\uFF1A</p>`,28),i=["src"],k=p(`<p>\u8C03\u7528 <code>advance</code> \u51FD\u6570\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">advance</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5F97\u5230\u7ED3\u679C\uFF1A</p>`,3),b=["src"],m=p(`<p>\u5339\u914D\u7684\u8FC7\u7A0B\u4E2D\u4E3B\u8981\u5229\u7528\u4E86\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> attribute <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*([^\\s&quot;&#39;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#39;([^&#39;]*)&#39;+|([^\\s&quot;&#39;=&lt;&gt;\`]+)))?</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> ncname <span class="token operator">=</span> <span class="token string">&#39;[a-zA-Z_][\\\\w\\\\-\\\\.]*&#39;</span>
<span class="token keyword">const</span> qnameCapture <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\:)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">const</span> startTagOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token keyword">const</span> startTagClose <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*(\\/?)&gt;</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^&lt;\\\\/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[^&gt;]*&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token keyword">const</span> doctype <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;!DOCTYPE [^&gt;]+&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token keyword">const</span> comment <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;!\\--</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> conditionalComment <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;!\\[</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u901A\u8FC7\u8FD9\u4E9B\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0C\u53EF\u4EE5\u5339\u914D\u6CE8\u91CA\u8282\u70B9\u3001\u6587\u6863\u7C7B\u578B\u8282\u70B9\u3001\u5F00\u59CB\u95ED\u5408\u6807\u7B7E\u7B49\u3002</p><ul><li>\u6CE8\u91CA\u8282\u70B9\u3001\u6587\u6863\u7C7B\u578B\u8282\u70B9</li></ul><p>\u5BF9\u4E8E\u6CE8\u91CA\u8282\u70B9\u548C\u6587\u6863\u7C7B\u578B\u8282\u70B9\u7684\u5339\u914D\uFF0C\u5982\u679C\u5339\u914D\u5230\u4EC5\u4EC5\u505A\u7684\u662F\u505A\u524D\u8FDB\u5373\u53EF\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> commentEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;--&gt;&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>commentEnd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>shouldKeepComment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> commentEnd<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">advance</span><span class="token punctuation">(</span>commentEnd <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>conditionalComment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> conditionalEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;]&gt;&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>conditionalEnd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">advance</span><span class="token punctuation">(</span>conditionalEnd <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> doctypeMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>doctype<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>doctypeMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">advance</span><span class="token punctuation">(</span>doctypeMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">continue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u5BF9\u4E8E\u6CE8\u91CA\u548C\u6761\u4EF6\u6CE8\u91CA\u8282\u70B9\uFF0C\u524D\u8FDB\u81F3\u5B83\u4EEC\u7684\u672B\u5C3E\u4F4D\u7F6E\uFF1B\u5BF9\u4E8E\u6587\u6863\u7C7B\u578B\u8282\u70B9\uFF0C\u5219\u524D\u8FDB\u5B83\u81EA\u8EAB\u957F\u5EA6\u7684\u8DDD\u79BB\u3002</p><ul><li>\u5F00\u59CB\u6807\u7B7E</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> startTagMatch <span class="token operator">=</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">handleStartTag</span><span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldIgnoreFirstNewline</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">advance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">continue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u9996\u5148\u901A\u8FC7 <code>parseStartTag</code> \u89E3\u6790\u5F00\u59CB\u6807\u7B7E\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseStartTag</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">tagName</span><span class="token operator">:</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">start</span><span class="token operator">:</span> index
    <span class="token punctuation">}</span>
    <span class="token function">advance</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token keyword">let</span> end<span class="token punctuation">,</span> attr
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>end <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagClose<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>attr <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">advance</span><span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
      match<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      match<span class="token punctuation">.</span>unarySlash <span class="token operator">=</span> end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
      <span class="token function">advance</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
      match<span class="token punctuation">.</span>end <span class="token operator">=</span> index
      <span class="token keyword">return</span> match
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>\u5BF9\u4E8E\u5F00\u59CB\u6807\u7B7E\uFF0C\u9664\u4E86\u6807\u7B7E\u540D\u4E4B\u5916\uFF0C\u8FD8\u6709\u4E00\u4E9B\u6807\u7B7E\u76F8\u5173\u7684\u5C5E\u6027\u3002\u51FD\u6570\u5148\u901A\u8FC7\u6B63\u5219\u8868\u8FBE\u5F0F <code>startTagOpen</code> \u5339\u914D\u5230\u5F00\u59CB\u6807\u7B7E\uFF0C\u7136\u540E\u5B9A\u4E49\u4E86 <code>match</code> \u5BF9\u8C61\uFF0C\u63A5\u7740\u5FAA\u73AF\u53BB\u5339\u914D\u5F00\u59CB\u6807\u7B7E\u4E2D\u7684\u5C5E\u6027\u5E76\u6DFB\u52A0\u5230 <code>match.attrs</code> \u4E2D\uFF0C\u76F4\u5230\u5339\u914D\u7684\u5F00\u59CB\u6807\u7B7E\u7684\u95ED\u5408\u7B26\u7ED3\u675F\u3002\u5982\u679C\u5339\u914D\u5230\u95ED\u5408\u7B26\uFF0C\u5219\u83B7\u53D6\u4E00\u5143\u659C\u7EBF\u7B26\uFF0C\u524D\u8FDB\u5230\u95ED\u5408\u7B26\u5C3E\uFF0C\u5E76\u628A\u5F53\u524D\u7D22\u5F15\u8D4B\u503C\u7ED9 <code>match.end</code>\u3002</p><p><code>parseStartTag</code> \u5BF9\u5F00\u59CB\u6807\u7B7E\u89E3\u6790\u62FF\u5230 <code>match</code> \u540E\uFF0C\u7D27\u63A5\u7740\u4F1A\u6267\u884C <code>handleStartTag</code> \u5BF9 <code>match</code> \u505A\u5904\u7406\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleStartTag</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tagName <span class="token operator">=</span> match<span class="token punctuation">.</span>tagName
  <span class="token keyword">const</span> unarySlash <span class="token operator">=</span> match<span class="token punctuation">.</span>unarySlash
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>expectHTML<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTag <span class="token operator">===</span> <span class="token string">&#39;p&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNonPhrasingTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">parseEndTag</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canBeLeftOpenTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lastTag <span class="token operator">===</span> tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">parseEndTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">const</span> unary <span class="token operator">=</span> <span class="token function">isUnaryTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span>unarySlash
  
  <span class="token keyword">const</span> l <span class="token operator">=</span> match<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>length
  <span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> args <span class="token operator">=</span> match<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IS_REGEX_CAPTURING_BROKEN</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&quot;&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">||</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">||</span> args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">const</span> shouldDecodeNewlines <span class="token operator">=</span> tagName <span class="token operator">===</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;href&#39;</span>
      <span class="token operator">?</span> options<span class="token punctuation">.</span>shouldDecodeNewlinesForHref
      <span class="token operator">:</span> options<span class="token punctuation">.</span>shouldDecodeNewlines
    attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">decodeAttr</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> shouldDecodeNewlines<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> tagName<span class="token punctuation">,</span> <span class="token literal-property property">lowerCasedTag</span><span class="token operator">:</span> tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">attrs</span><span class="token operator">:</span> attrs <span class="token punctuation">}</span><span class="token punctuation">)</span>
    lastTag <span class="token operator">=</span> tagName
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary<span class="token punctuation">,</span> match<span class="token punctuation">.</span>start<span class="token punctuation">,</span> match<span class="token punctuation">.</span>end<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p><code>handleStartTag</code> \u7684\u6838\u5FC3\u903B\u8F91\u5F88\u7B80\u5355\uFF0C\u5148\u5224\u65AD\u5F00\u59CB\u6807\u7B7E\u662F\u5426\u662F\u4E00\u5143\u6807\u7B7E\uFF0C\u7C7B\u4F3C <code>&lt;img&gt;\u3001&lt;br/&gt;</code> \u8FD9\u6837\uFF0C\u63A5\u7740\u5BF9 <code>match.attrs</code> \u904D\u5386\u5E76\u505A\u4E86\u4E00\u4E9B\u5904\u7406\uFF0C\u6700\u540E\u5224\u65AD\u5982\u679C\u975E\u4E00\u5143\u6807\u7B7E\uFF0C\u5219\u5F80 <code>stack</code> \u91CC push \u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5E76\u4E14\u628A <code>tagName</code> \u8D4B\u503C\u7ED9 <code>lastTag</code>\u3002\u81F3\u4E8E <code>stack</code> \u7684\u4F5C\u7528\uFF0C\u7A0D\u540E\u4F1A\u4ECB\u7ECD\u3002</p><p>\u6700\u540E\u8C03\u7528\u4E86 <code>options.start</code> \u56DE\u8C03\u51FD\u6570\uFF0C\u5E76\u4F20\u5165\u4E00\u4E9B\u53C2\u6570\uFF0C\u8FD9\u4E2A\u56DE\u8C03\u51FD\u6570\u7684\u4F5C\u7528\u7A0D\u540E\u4F1A\u8BE6\u7EC6\u4ECB\u7ECD\u3002</p><ul><li>\u95ED\u5408\u6807\u7B7E</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> endTagMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>endTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> curIndex <span class="token operator">=</span> index
  <span class="token function">advance</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token function">parseEndTag</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> curIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
  <span class="token keyword">continue</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u5148\u901A\u8FC7\u6B63\u5219 <code>endTag</code> \u5339\u914D\u5230\u95ED\u5408\u6807\u7B7E\uFF0C\u7136\u540E\u524D\u8FDB\u5230\u95ED\u5408\u6807\u7B7E\u672B\u5C3E\uFF0C\u7136\u540E\u6267\u884C <code>parseEndTag</code> \u65B9\u6CD5\u5BF9\u95ED\u5408\u6807\u7B7E\u505A\u89E3\u6790\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token keyword">function</span> <span class="token function">parseEndTag</span> <span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> pos<span class="token punctuation">,</span> lowerCasedTagName
  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> start <span class="token operator">=</span> index
  <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> end <span class="token operator">=</span> index
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lowerCasedTagName <span class="token operator">=</span> tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>lowerCasedTag <span class="token operator">===</span> lowerCasedTagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    pos <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> pos<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> pos <span class="token operator">||</span> <span class="token operator">!</span>tagName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        options<span class="token punctuation">.</span>warn
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">tag &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt; has no matching end tag.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    stack<span class="token punctuation">.</span>length <span class="token operator">=</span> pos
    lastTag <span class="token operator">=</span> pos <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tag
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerCasedTagName <span class="token operator">===</span> <span class="token string">&#39;br&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerCasedTagName <span class="token operator">===</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p><code>parseEndTag</code> \u7684\u6838\u5FC3\u903B\u8F91\u5F88\u7B80\u5355\uFF0C\u5728\u4ECB\u7ECD\u4E4B\u524D\u56DE\u987E\u4E00\u4E0B\u5728\u6267\u884C <code>handleStartTag</code> \u7684\u65F6\u5019\uFF0C\u5BF9\u4E8E\u975E\u4E00\u5143\u6807\u7B7E\uFF08\u6709 endTag\uFF09\u90FD\u628A\u5B83\u6784\u9020\u6210\u4E00\u4E2A\u5BF9\u8C61\u538B\u5165\u5230 <code>stack</code> \u4E2D\uFF0C\u5982\u56FE\u6240\u793A\uFF1A</p>`,21),d=["src"],g=p(`<p>\u90A3\u4E48\u5BF9\u4E8E\u95ED\u5408\u6807\u7B7E\u7684\u89E3\u6790\uFF0C\u5C31\u662F\u5012\u5E8F <code>stack</code>\uFF0C\u627E\u5230\u7B2C\u4E00\u4E2A\u548C\u5F53\u524D <code>endTag</code> \u5339\u914D\u7684\u5143\u7D20\u3002\u5982\u679C\u662F\u6B63\u5E38\u7684\u6807\u7B7E\u5339\u914D\uFF0C\u90A3\u4E48 <code>stack</code> \u7684\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u5E94\u8BE5\u548C\u5F53\u524D\u7684 <code>endTag</code> \u5339\u914D\uFF0C\u4F46\u662F\u8003\u8651\u5230\u5982\u4E0B\u9519\u8BEF\u60C5\u51B5\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u8FD9\u4E2A\u65F6\u5019\u5F53 <code>endTag</code> \u4E3A <code>&lt;/div&gt;</code> \u7684\u65F6\u5019\uFF0C\u4ECE <code>stack</code> \u5C3E\u90E8\u627E\u5230\u7684\u6807\u7B7E\u662F <code>&lt;span&gt;</code>\uFF0C\u5C31\u4E0D\u80FD\u5339\u914D\uFF0C\u56E0\u6B64\u8FD9\u79CD\u60C5\u51B5\u4F1A\u62A5\u8B66\u544A\u3002\u5339\u914D\u540E\u628A\u6808\u5230 <code>pos</code> \u4F4D\u7F6E\u7684\u90FD\u5F39\u51FA\uFF0C\u5E76\u4ECE <code>stack</code> \u5C3E\u90E8\u62FF\u5230 <code>lastTag</code>\u3002</p><p>\u6700\u540E\u8C03\u7528\u4E86 <code>options.end</code> \u56DE\u8C03\u51FD\u6570\uFF0C\u5E76\u4F20\u5165\u4E00\u4E9B\u53C2\u6570\uFF0C\u8FD9\u4E2A\u56DE\u8C03\u51FD\u6570\u7684\u4F5C\u7528\u7A0D\u540E\u4F1A\u8BE6\u7EC6\u4ECB\u7ECD\u3002</p><ul><li>\u6587\u672C</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> text<span class="token punctuation">,</span> rest<span class="token punctuation">,</span> next
<span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  rest <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>textEnd<span class="token punctuation">)</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span>endTag<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>startTagOpen<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>comment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>conditionalComment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    next <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span>
    textEnd <span class="token operator">+=</span> next
    rest <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>textEnd<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  text <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> textEnd<span class="token punctuation">)</span>
  <span class="token function">advance</span><span class="token punctuation">(</span>textEnd<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  text <span class="token operator">=</span> html
  html <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>chars <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  options<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u63A5\u4E0B\u6765\u5224\u65AD <code>textEnd</code> \u662F\u5426\u5927\u4E8E\u7B49\u4E8E 0 \u7684\uFF0C\u6EE1\u8DB3\u5219\u8BF4\u660E\u5230\u4ECE\u5F53\u524D\u4F4D\u7F6E\u5230 <code>textEnd</code> \u4F4D\u7F6E\u90FD\u662F\u6587\u672C\uFF0C\u5E76\u4E14\u5982\u679C <code>&lt;</code> \u662F\u7EAF\u6587\u672C\u4E2D\u7684\u5B57\u7B26\uFF0C\u5C31\u7EE7\u7EED\u627E\u5230\u771F\u6B63\u7684\u6587\u672C\u7ED3\u675F\u7684\u4F4D\u7F6E\uFF0C\u7136\u540E\u524D\u8FDB\u5230\u7ED3\u675F\u7684\u4F4D\u7F6E\u3002</p><p>\u518D\u7EE7\u7EED\u5224\u65AD <code>textEnd</code> \u5C0F\u4E8E 0 \u7684\u60C5\u51B5\uFF0C\u5219\u8BF4\u660E\u6574\u4E2A <code>template</code> \u89E3\u6790\u5B8C\u6BD5\u4E86\uFF0C\u628A\u5269\u4F59\u7684 <code>html</code> \u90FD\u8D4B\u503C\u7ED9\u4E86 <code>text</code>\u3002</p><p>\u6700\u540E\u8C03\u7528\u4E86 <code>options.chars</code> \u56DE\u8C03\u51FD\u6570\uFF0C\u5E76\u4F20 <code>text</code> \u53C2\u6570\uFF0C\u8FD9\u4E2A\u56DE\u8C03\u51FD\u6570\u7684\u4F5C\u7528\u7A0D\u540E\u4F1A\u8BE6\u7EC6\u4ECB\u7ECD\u3002</p><p>\u56E0\u6B64\uFF0C\u5728\u5FAA\u73AF\u89E3\u6790\u6574\u4E2A <code>template</code> \u7684\u8FC7\u7A0B\u4E2D\uFF0C\u4F1A\u6839\u636E\u4E0D\u540C\u7684\u60C5\u51B5\uFF0C\u53BB\u6267\u884C\u4E0D\u540C\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u4E0B\u9762\u6765\u770B\u770B\u8FD9\u4E9B\u56DE\u8C03\u51FD\u6570\u7684\u4F5C\u7528\u3002</p><h3 id="\u5904\u7406\u5F00\u59CB\u6807\u7B7E" tabindex="-1"><a class="header-anchor" href="#\u5904\u7406\u5F00\u59CB\u6807\u7B7E" aria-hidden="true">#</a> \u5904\u7406\u5F00\u59CB\u6807\u7B7E</h3><p>\u5BF9\u5E94\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">start</span> <span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>
  <span class="token function">processElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u5F53\u89E3\u6790\u5230\u5F00\u59CB\u6807\u7B7E\u7684\u65F6\u5019\uFF0C\u6700\u540E\u4F1A\u6267\u884C <code>start</code> \u56DE\u8C03\u51FD\u6570\uFF0C\u51FD\u6570\u4E3B\u8981\u5C31\u505A 3 \u4EF6\u4E8B\u60C5\uFF0C\u521B\u5EFA AST \u5143\u7D20\uFF0C\u5904\u7406 AST \u5143\u7D20\uFF0CAST \u6811\u7BA1\u7406\u3002\u4E0B\u9762\u6765\u5206\u522B\u6765\u770B\u8FD9\u51E0\u4E2A\u8FC7\u7A0B\u3002</p><ul><li>\u521B\u5EFA AST \u5143\u7D20</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// check namespace.</span>
<span class="token comment">// inherit parent ns if there is one</span>
<span class="token keyword">const</span> ns <span class="token operator">=</span> <span class="token punctuation">(</span>currentParent <span class="token operator">&amp;&amp;</span> currentParent<span class="token punctuation">.</span>ns<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">platformGetTagNamespace</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>

<span class="token comment">// handle IE svg bug</span>
<span class="token comment">/* istanbul ignore if */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isIE <span class="token operator">&amp;&amp;</span> ns <span class="token operator">===</span> <span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  attrs <span class="token operator">=</span> <span class="token function">guardIESVGBug</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token literal-property property">element</span><span class="token operator">:</span> ASTElement <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> currentParent<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  element<span class="token punctuation">.</span>ns <span class="token operator">=</span> ns
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createASTElement</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">tag</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">attrs</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Attr<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> ASTElement <span class="token operator">|</span> <span class="token keyword">void</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> ASTElement <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    tag<span class="token punctuation">,</span>
    <span class="token literal-property property">attrsList</span><span class="token operator">:</span> attrs<span class="token punctuation">,</span>
    <span class="token literal-property property">attrsMap</span><span class="token operator">:</span> <span class="token function">makeAttrsMap</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">,</span>
    parent<span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>\u901A\u8FC7 <code>createASTElement</code> \u65B9\u6CD5\u53BB\u521B\u5EFA\u4E00\u4E2A AST \u5143\u7D20\uFF0C\u5E76\u6DFB\u52A0\u4E86 namespace\u3002\u53EF\u4EE5\u770B\u5230\uFF0C\u6BCF\u4E00\u4E2A AST \u5143\u7D20\u5C31\u662F\u4E00\u4E2A\u666E\u901A\u7684 JavaScript \u5BF9\u8C61\uFF0C\u5176\u4E2D\uFF0C<code>type</code> \u8868\u793A AST \u5143\u7D20\u7C7B\u578B\uFF0C<code>tag</code> \u8868\u793A\u6807\u7B7E\u540D\uFF0C<code>attrsList</code> \u8868\u793A\u5C5E\u6027\u5217\u8868\uFF0C<code>attrsMap</code> \u8868\u793A\u5C5E\u6027\u6620\u5C04\u8868\uFF0C<code>parent</code> \u8868\u793A\u7236\u7684 AST \u5143\u7D20\uFF0C<code>children</code> \u8868\u793A\u5B50 AST \u5143\u7D20\u96C6\u5408\u3002</p><ul><li>\u5904\u7406 AST \u5143\u7D20</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isForbiddenTag</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isServerRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  element<span class="token punctuation">.</span>forbidden <span class="token operator">=</span> <span class="token boolean">true</span>
  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>
    <span class="token string">&#39;Templates should only be responsible for mapping the state to the &#39;</span> <span class="token operator">+</span>
    <span class="token string">&#39;UI. Avoid placing tags with side-effects in your templates, such as &#39;</span> <span class="token operator">+</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span> <span class="token string">&#39;, as they will not be parsed.&#39;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// apply pre-transforms</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> preTransforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  element <span class="token operator">=</span> preTransforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">||</span> element
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">processPre</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inVPre <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">platformIsPreTag</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  inPre <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">processRawAttrs</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>processed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// structural directives</span>
  <span class="token function">processFor</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token function">processIf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token function">processOnce</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token comment">// element-scope stuff</span>
  <span class="token function">processElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>\u9996\u5148\u662F\u5BF9\u6A21\u5757 <code>preTransforms</code> \u7684\u8C03\u7528\uFF0C\u5176\u5B9E\u6240\u6709\u6A21\u5757\u7684 <code>preTransforms</code>\u3001 <code>transforms</code> \u548C <code>postTransforms</code> \u7684\u5B9A\u4E49\u90FD\u5728 <code>src/platforms/web/compiler/modules</code> \u76EE\u5F55\u4E2D\uFF0C\u8FD9\u90E8\u5206\u6682\u65F6\u4E0D\u4F1A\u4ECB\u7ECD\uFF0C\u4E4B\u540E\u4F1A\u7ED3\u5408\u5177\u4F53\u7684\u4F8B\u5B50\u8BF4\u3002\u63A5\u7740\u5224\u65AD <code>element</code> \u662F\u5426\u5305\u542B\u5404\u79CD\u6307\u4EE4\u901A\u8FC7 <code>processXXX</code> \u505A\u76F8\u5E94\u7684\u5904\u7406\uFF0C\u5904\u7406\u7684\u7ED3\u679C\u5C31\u662F\u6269\u5C55 AST \u5143\u7D20\u7684\u5C5E\u6027\u3002\u8FD9\u91CC\u5E76\u4E0D\u4F1A\u4E00\u4E00\u4ECB\u7ECD\u6240\u6709\u7684\u6307\u4EE4\u5904\u7406\uFF0C\u800C\u662F\u7ED3\u5408\u5F53\u524D\u7684\u4F8B\u5B50\uFF0C\u6765\u770B\u4E00\u4E0B <code>processFor</code> \u548C <code>processIf</code>\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">processFor</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> ASTElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> exp
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>exp <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;v-for&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">parseFor</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">extend</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid v-for expression: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> forAliasRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.*?)\\s+(?:in|of)\\s+(.*)</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">export</span> <span class="token keyword">const</span> forIteratorRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> stripParensRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\(|\\)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parseFor</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">exp</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span>ForParseResult <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inMatch <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>forAliasRE<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inMatch<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  res<span class="token punctuation">.</span>for <span class="token operator">=</span> inMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> alias <span class="token operator">=</span> inMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>stripParensRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> iteratorMatch <span class="token operator">=</span> alias<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>forIteratorRE<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iteratorMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>alias <span class="token operator">=</span> alias<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>forIteratorRE<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span>iterator1 <span class="token operator">=</span> iteratorMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iteratorMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>iterator2 <span class="token operator">=</span> iteratorMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>alias <span class="token operator">=</span> alias
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p><code>processFor</code> \u5C31\u662F\u4ECE\u5143\u7D20\u4E2D\u62FF\u5230 <code>v-for</code> \u6307\u4EE4\u7684\u5185\u5BB9\uFF0C\u7136\u540E\u5206\u522B\u89E3\u6790\u51FA <code>for</code>\u3001<code>alias</code>\u3001<code>iterator1</code>\u3001<code>iterator2</code> \u7B49\u5C5E\u6027\u7684\u503C\u6DFB\u52A0\u5230 AST \u7684\u5143\u7D20\u4E0A\u3002\u5C31\u7684\u793A\u4F8B <code>v-for=&quot;(item,index) in data&quot;</code> \u800C\u8A00\uFF0C\u89E3\u6790\u51FA\u7684\u7684 <code>for</code> \u662F <code>data</code>\uFF0C<code>alias</code> \u662F <code>item</code>\uFF0C<code>iterator1</code> \u662F <code>index</code>\uFF0C\u6CA1\u6709 <code>iterator2</code>\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">processIf</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;v-if&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>if <span class="token operator">=</span> exp
    <span class="token function">addIfCondition</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">exp</span><span class="token operator">:</span> exp<span class="token punctuation">,</span>
      <span class="token literal-property property">block</span><span class="token operator">:</span> el
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;v-else&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>else <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> elseif <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;v-else-if&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>elseif<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>elseif <span class="token operator">=</span> elseif
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addIfCondition</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> ASTElement<span class="token punctuation">,</span> <span class="token literal-property property">condition</span><span class="token operator">:</span> ASTIfCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>ifConditions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  el<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><code>processIf</code> \u5C31\u662F\u4ECE\u5143\u7D20\u4E2D\u62FF <code>v-if</code> \u6307\u4EE4\u7684\u5185\u5BB9\uFF0C\u5982\u679C\u62FF\u5230\u5219\u7ED9 AST \u5143\u7D20\u6DFB\u52A0 <code>if</code> \u5C5E\u6027\u548C <code>ifConditions</code> \u5C5E\u6027\uFF1B\u5426\u5219\u5C1D\u8BD5\u62FF <code>v-else</code> \u6307\u4EE4\u53CA <code>v-else-if</code> \u6307\u4EE4\u7684\u5185\u5BB9\uFF0C\u5982\u679C\u62FF\u5230\u5219\u7ED9 AST \u5143\u7D20\u5206\u522B\u6DFB\u52A0 <code>else</code> \u548C <code>elseif</code> \u5C5E\u6027\u3002</p><ul><li>AST \u6811\u7BA1\u7406</li></ul><p>\u5728\u5904\u7406\u5F00\u59CB\u6807\u7B7E\u7684\u65F6\u5019\u4E3A\u6BCF\u4E00\u4E2A\u6807\u7B7E\u521B\u5EFA\u4E86\u4E00\u4E2A AST \u5143\u7D20\uFF0C\u5728\u4E0D\u65AD\u89E3\u6790\u6A21\u677F\u521B\u5EFA AST \u5143\u7D20\u7684\u65F6\u5019\uFF0C\u4E5F\u8981\u4E3A\u5B83\u4EEC\u5EFA\u7ACB\u7236\u5B50\u5173\u7CFB\uFF0C\u5C31\u50CF DOM \u5143\u7D20\u7684\u7236\u5B50\u5173\u7CFB\u90A3\u6837\u3002</p><p>AST \u6811\u7BA1\u7406\u76F8\u5173\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkRootConstraints</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span> <span class="token operator">||</span> el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warnOnce</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Cannot use &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt; as component root element because it may </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token string">&#39;contain multiple nodes.&#39;</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;v-for&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warnOnce</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Cannot use v-for on stateful component root element because &#39;</span> <span class="token operator">+</span>
        <span class="token string">&#39;it renders multiple elements.&#39;</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// tree management</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  root <span class="token operator">=</span> element
  <span class="token function">checkRootConstraints</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// allow root elements with v-if, v-else-if and v-else</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>elseif <span class="token operator">||</span> element<span class="token punctuation">.</span>else<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">checkRootConstraints</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    <span class="token function">addIfCondition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">exp</span><span class="token operator">:</span> element<span class="token punctuation">.</span>elseif<span class="token punctuation">,</span>
      <span class="token literal-property property">block</span><span class="token operator">:</span> element
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warnOnce</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Component template should contain exactly one root element. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">If you are using v-if on multiple elements, </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">use v-else-if to chain them instead.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>currentParent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>element<span class="token punctuation">.</span>forbidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>elseif <span class="token operator">||</span> element<span class="token punctuation">.</span>else<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">processIfConditions</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> currentParent<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// scoped slot</span>
    currentParent<span class="token punctuation">.</span>plain <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> element<span class="token punctuation">.</span>slotTarget <span class="token operator">||</span> <span class="token string">&#39;&quot;default&quot;&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">(</span>currentParent<span class="token punctuation">.</span>scopedSlots <span class="token operator">||</span> <span class="token punctuation">(</span>currentParent<span class="token punctuation">.</span>scopedSlots <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> element
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    currentParent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    element<span class="token punctuation">.</span>parent <span class="token operator">=</span> currentParent
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  currentParent <span class="token operator">=</span> element
  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">closeElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>AST \u6811\u7BA1\u7406\u7684\u76EE\u6807\u662F\u6784\u5EFA\u4E00\u9897 AST \u6811\uFF0C\u672C\u8D28\u4E0A\u5B83\u8981\u7EF4\u62A4 <code>root</code> \u6839\u8282\u70B9\u548C\u5F53\u524D\u7236\u8282\u70B9 <code>currentParent</code>\u3002\u4E3A\u4E86\u4FDD\u8BC1\u5143\u7D20\u53EF\u4EE5\u6B63\u786E\u95ED\u5408\uFF0C\u8FD9\u91CC\u4E5F\u5229\u7528\u4E86 <code>stack</code> \u6808\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u548C\u4E4B\u524D\u89E3\u6790\u6A21\u677F\u65F6\u7528\u5230\u7684 <code>stack</code> \u7C7B\u4F3C\u3002</p><p>\u5F53\u5728\u5904\u7406\u5F00\u59CB\u6807\u7B7E\u7684\u65F6\u5019\uFF0C\u5224\u65AD\u5982\u679C\u6709 <code>currentParent</code>\uFF0C\u4F1A\u628A\u5F53\u524D AST \u5143\u7D20 push \u5230 <code>currentParent.chilldren</code> \u4E2D\uFF0C\u540C\u65F6\u628A AST \u5143\u7D20\u7684 <code>parent</code> \u6307\u5411 <code>currentParent</code>\u3002</p><p>\u63A5\u7740\u5C31\u662F\u66F4\u65B0 <code>currentParent</code> \u548C <code>stack</code> \uFF0C\u5224\u65AD\u5F53\u524D\u5982\u679C\u4E0D\u662F\u4E00\u4E2A\u4E00\u5143\u6807\u7B7E\uFF0C\u8981\u628A\u5B83\u751F\u6210\u7684 AST \u5143\u7D20 push \u5230 <code>stack</code> \u4E2D\uFF0C\u5E76\u4E14\u628A\u5F53\u524D\u7684 AST \u5143\u7D20\u8D4B\u503C\u7ED9 <code>currentParent</code>\u3002</p><p><code>stack</code> \u548C <code>currentParent</code> \u9664\u4E86\u5728\u5904\u7406\u5F00\u59CB\u6807\u7B7E\u7684\u65F6\u5019\u4F1A\u53D8\u5316\uFF0C\u5728\u5904\u7406\u95ED\u5408\u6807\u7B7E\u7684\u65F6\u5019\u4E5F\u4F1A\u53D8\u5316\uFF0C\u56E0\u6B64\u6574\u4E2A AST \u6811\u7BA1\u7406\u8981\u7ED3\u5408\u95ED\u5408\u6807\u7B7E\u7684\u5904\u7406\u903B\u8F91\u770B\u3002</p><h3 id="\u5904\u7406\u95ED\u5408\u6807\u7B7E" tabindex="-1"><a class="header-anchor" href="#\u5904\u7406\u95ED\u5408\u6807\u7B7E" aria-hidden="true">#</a> \u5904\u7406\u95ED\u5408\u6807\u7B7E</h3><p>\u5BF9\u5E94\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">end</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">closeElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u5F53\u89E3\u6790\u5230\u95ED\u5408\u6807\u7B7E\u7684\u65F6\u5019\uFF0C\u6700\u540E\u4F1A\u6267\u884C <code>end</code> \u56DE\u8C03\u51FD\u6570\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// remove trailing whitespace</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> lastNode <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">[</span>element<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>lastNode <span class="token operator">&amp;&amp;</span> lastNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> lastNode<span class="token punctuation">.</span>text <span class="token operator">===</span> <span class="token string">&#39; &#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// pop stack</span>
stack<span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span>
currentParent <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token function">closeElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u9996\u5148\u5904\u7406\u4E86\u5C3E\u90E8\u7A7A\u683C\u7684\u60C5\u51B5\uFF0C\u7136\u540E\u628A <code>stack</code> \u7684\u5143\u7D20\u5F39\u4E00\u4E2A\u51FA\u6808\uFF0C\u5E76\u628A <code>stack</code> \u6700\u540E\u4E00\u4E2A\u5143\u7D20\u8D4B\u503C\u7ED9 <code>currentParent</code>\uFF0C\u8FD9\u6837\u5C31\u4FDD\u8BC1\u4E86\u5F53\u9047\u5230\u95ED\u5408\u6807\u7B7E\u7684\u65F6\u5019\uFF0C\u53EF\u4EE5\u6B63\u786E\u5730\u66F4\u65B0 <code>stack</code> \u7684\u957F\u5EA6\u4EE5\u53CA <code>currentParent</code> \u7684\u503C\uFF0C\u8FD9\u6837\u5C31\u7EF4\u62A4\u4E86\u6574\u4E2A AST \u6811\u3002</p><p>\u6700\u540E\u6267\u884C\u4E86 <code>closeElement(element)</code>\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">closeElement</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check pre state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inVPre <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">platformIsPreTag</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inPre <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// apply post-transforms</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> postTransforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    postTransforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>closeElement</code> \u903B\u8F91\u5F88\u7B80\u5355\uFF0C\u5C31\u662F\u66F4\u65B0\u4E00\u4E0B <code>inVPre</code> \u548C <code>inPre</code> \u7684\u72B6\u6001\uFF0C\u4EE5\u53CA\u6267\u884C <code>postTransforms</code> \u51FD\u6570\uFF0C\u8FD9\u4E9B\u6682\u65F6\u90FD\u4E0D\u5FC5\u4E86\u89E3\u3002</p><h3 id="\u5904\u7406\u6587\u672C\u5185\u5BB9" tabindex="-1"><a class="header-anchor" href="#\u5904\u7406\u6587\u672C\u5185\u5BB9" aria-hidden="true">#</a> \u5904\u7406\u6587\u672C\u5185\u5BB9</h3><p>\u5BF9\u5E94\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">chars</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">text</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">handleText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">createChildrenASTOfText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u9664\u4E86\u5904\u7406\u5F00\u59CB\u6807\u7B7E\u548C\u95ED\u5408\u6807\u7B7E\uFF0C\u8FD8\u4F1A\u5728\u89E3\u6790\u6A21\u677F\u7684\u8FC7\u7A0B\u4E2D\u53BB\u5904\u7406\u4E00\u4E9B\u6587\u672C\u5185\u5BB9\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> children <span class="token operator">=</span> currentParent<span class="token punctuation">.</span>children
text <span class="token operator">=</span> inPre <span class="token operator">||</span> text<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token operator">?</span> <span class="token function">isTextTag</span><span class="token punctuation">(</span>currentParent<span class="token punctuation">)</span> <span class="token operator">?</span> text <span class="token operator">:</span> <span class="token function">decodeHTMLCached</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
  <span class="token comment">// only preserve whitespace if its not right after a starting tag</span>
  <span class="token operator">:</span> preserveWhitespace <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVPre <span class="token operator">&amp;&amp;</span> text <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> delimiters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">expression</span><span class="token operator">:</span> res<span class="token punctuation">.</span>expression<span class="token punctuation">,</span>
      <span class="token literal-property property">tokens</span><span class="token operator">:</span> res<span class="token punctuation">.</span>tokens<span class="token punctuation">,</span>
      text
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span> <span class="token operator">||</span> <span class="token operator">!</span>children<span class="token punctuation">.</span>length <span class="token operator">||</span> children<span class="token punctuation">[</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      text
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,46),y=s("\u6587\u672C\u6784\u9020\u7684 AST \u5143\u7D20\u6709 2 \u79CD\u7C7B\u578B\uFF0C\u4E00\u79CD\u662F\u6709\u8868\u8FBE\u5F0F\u7684\uFF0C"),f=n("code",null,"type",-1),h=s(" \u4E3A 2\uFF0C\u4E00\u79CD\u662F\u7EAF\u6587\u672C\uFF0C"),w=n("code",null,"type",-1),v=s(" \u4E3A 3\u3002\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C\u6587\u672C\u5C31\u662F "),x=s("\uFF0C\u662F\u4E2A\u8868\u8FBE\u5F0F\uFF0C\u901A\u8FC7\u6267\u884C "),T=n("code",null,"parseText(text, delimiters)",-1),_=s(" \u5BF9\u6587\u672C\u89E3\u6790\uFF0C\u5B83\u7684\u5B9A\u4E49\u5728 "),j=n("code",null,"src/compiler/parser/text-parser.js",-1),E=s(" \u4E2D\uFF1A"),S=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{((?:.|\\n)+?)\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> regexEscapeRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-.*+?^\${}()|[\\]\\/\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token keyword">const</span> buildRegex <span class="token operator">=</span> <span class="token function">cached</span><span class="token punctuation">(</span><span class="token parameter">delimiters</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> open <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> close <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>open <span class="token operator">+</span> <span class="token string">&#39;((?:.|\\\\n)+?)&#39;</span> <span class="token operator">+</span> close<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parseText</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">text</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  delimiters<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> string<span class="token punctuation">]</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> TextParseResult <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> tagRE <span class="token operator">=</span> delimiters <span class="token operator">?</span> <span class="token function">buildRegex</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">)</span> <span class="token operator">:</span> defaultTagRE
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tagRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> rawTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> tagRE<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> match<span class="token punctuation">,</span> index<span class="token punctuation">,</span> tokenValue
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> tagRE<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    index <span class="token operator">=</span> match<span class="token punctuation">.</span>index
    <span class="token comment">// push text token</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// tag token</span>
    <span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token function">parseFilters</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_s(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span> exp <span class="token punctuation">}</span><span class="token punctuation">)</span>
    lastIndex <span class="token operator">=</span> index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">expression</span><span class="token operator">:</span> tokens<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">tokens</span><span class="token operator">:</span> rawTokens
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>`,1),A=n("code",null,"parseText",-1),N=s(" \u9996\u5148\u6839\u636E\u5206\u9694\u7B26\uFF08\u9ED8\u8BA4\u662F "),P=s("\uFF09\u6784\u9020\u4E86\u6587\u672C\u5339\u914D\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0C\u7136\u540E\u518D\u5FAA\u73AF\u5339\u914D\u6587\u672C\uFF0C\u9047\u5230\u666E\u901A\u6587\u672C\u5C31 push \u5230 "),C=n("code",null,"rawTokens",-1),M=s(" \u548C "),R=n("code",null,"tokens",-1),I=s(" \u4E2D\uFF0C\u5982\u679C\u662F\u8868\u8FBE\u5F0F\u5C31\u8F6C\u6362\u6210 "),O=n("code",null,"_s(${exp})",-1),q=s(" push \u5230 "),F=n("code",null,"tokens",-1),L=s(" \u4E2D\uFF0C\u4EE5\u53CA\u8F6C\u6362\u6210 "),V=n("code",null,"{@binding:exp}",-1),$=s(" push \u5230 "),B=n("code",null,"rawTokens",-1),D=s(" \u4E2D\u3002"),H=s("\u5BF9\u4E8E\u7684\u4F8B\u5B50 "),U=s("\uFF0C"),G=n("code",null,"tokens",-1),K=s(" \u5C31\u662F "),J=n("code",null,`[_s(item),'":"',_s(index)]`,-1),X=s("\uFF1B"),z=n("code",null,"rawTokens",-1),W=s(" \u5C31\u662F "),Y=n("code",null,"[{'@binding':'item'},':',{'@binding':'index'}]",-1),Z=s("\u3002\u90A3\u4E48\u8FD4\u56DE\u7684\u5BF9\u8C61\u5982\u4E0B\uFF1A"),Q=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token string">&#39;_s(item)+&quot;:&quot;+_s(index)&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="\u6D41\u7A0B\u56FE" tabindex="-1"><a class="header-anchor" href="#\u6D41\u7A0B\u56FE" aria-hidden="true">#</a> \u6D41\u7A0B\u56FE</h2>`,2),nn=["src"],sn=p('<h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u90A3\u4E48\u81F3\u6B64\uFF0C<code>parse</code> \u7684\u8FC7\u7A0B\u5C31\u5206\u6790\u5B8C\u4E86\uFF0C\u770B\u4F3C\u590D\u6742\uFF0C\u4F46\u53EF\u4EE5\u629B\u5F00\u7EC6\u8282\u7406\u6E05\u5B83\u7684\u6574\u4F53\u6D41\u7A0B\u3002<code>parse</code> \u7684\u76EE\u6807\u662F\u628A <code>template</code> \u6A21\u677F\u5B57\u7B26\u4E32\u8F6C\u6362\u6210 AST \u6811\uFF0C\u5B83\u662F\u4E00\u79CD\u7528 JavaScript \u5BF9\u8C61\u7684\u5F62\u5F0F\u6765\u63CF\u8FF0\u6574\u4E2A\u6A21\u677F\u3002\u90A3\u4E48\u6574\u4E2A <code>parse</code> \u7684\u8FC7\u7A0B\u662F\u5229\u7528\u6B63\u5219\u8868\u8FBE\u5F0F\u987A\u5E8F\u89E3\u6790\u6A21\u677F\uFF0C\u5F53\u89E3\u6790\u5230\u5F00\u59CB\u6807\u7B7E\u3001\u95ED\u5408\u6807\u7B7E\u3001\u6587\u672C\u7684\u65F6\u5019\u90FD\u4F1A\u5206\u522B\u6267\u884C\u5BF9\u5E94\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u6765\u8FBE\u5230\u6784\u9020 AST \u6811\u7684\u76EE\u7684\u3002</p><p>AST \u5143\u7D20\u8282\u70B9\u603B\u5171\u6709 3 \u79CD\u7C7B\u578B\uFF0C<code>type</code> \u4E3A 1 \u8868\u793A\u662F\u666E\u901A\u5143\u7D20\uFF0C\u4E3A 2 \u8868\u793A\u662F\u8868\u8FBE\u5F0F\uFF0C\u4E3A 3 \u8868\u793A\u662F\u7EAF\u6587\u672C\u3002\u5176\u5B9E\u8FD9\u91CC\u89C9\u5F97\u6E90\u7801\u5199\u7684\u4E0D\u591F\u53CB\u597D\uFF0C\u8FD9\u79CD\u662F\u5178\u578B\u7684\u9B54\u672F\u6570\u5B57\uFF0C\u5982\u679C\u8F6C\u6362\u6210\u7528\u5E38\u91CF\u8868\u8FBE\u4F1A\u66F4\u5229\u4E8E\u6E90\u7801\u9605\u8BFB\u3002</p><p>\u5F53 AST \u6811\u6784\u9020\u5B8C\u6BD5\uFF0C\u4E0B\u4E00\u6B65\u5C31\u662F <code>optimize</code> \u4F18\u5316\u8FD9\u9897\u6811\u3002</p>',4);function an(a,pn){return e(),o(c,null,[r,n("img",{src:a.$withBase("/assets/vue/advance-1.png"),alt:"demo"},null,8,i),k,n("img",{src:a.$withBase("/assets/vue/advance-2.png"),alt:"demo"},null,8,b),m,n("img",{src:a.$withBase("/assets/vue/stack.png"),alt:"demo"},null,8,d),g,n("p",null,[y,f,h,w,v,n("code",null,t(a.item)+":"+t(a.index),1),x,T,_,j,E]),S,n("p",null,[A,N,n("code",null,t(),1),P,C,M,R,I,O,q,F,L,V,$,B,D]),n("p",null,[H,n("code",null,t(a.item)+":"+t(a.index),1),U,G,K,J,X,z,W,Y,Z]),Q,n("img",{src:a.$withBase("/assets/vue/parse.png"),alt:"demo"},null,8,nn),sn],64)}var on=l(u,[["render",an]]);export{on as default};
