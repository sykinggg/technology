import{a as n}from"./app.ee3fc36b.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><h1 id="updatehostroot" tabindex="-1"><a class="header-anchor" href="#updatehostroot" aria-hidden="true">#</a> updateHostRoot</h1><p>\u5728<code>scheduleRootUpdate</code>\u7684\u65F6\u5019\u4F1A\u4E3A<code>root</code>\u521B\u5EFA<code>update</code>\uFF0C\u5305\u62EC\u7684\u6700\u4E3B\u8981\u4FE1\u606F\u662F<code>payload</code>\u4E2D\u7684<code>element</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">scheduleRootUpdate</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> element<span class="token punctuation">,</span> expirationTime<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ReactDebugCurrentFiber<span class="token punctuation">.</span>phase <span class="token operator">===</span> <span class="token string">&#39;render&#39;</span> <span class="token operator">&amp;&amp;</span> ReactDebugCurrentFiber<span class="token punctuation">.</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>didWarnAboutNestedUpdates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      didWarnAboutNestedUpdates <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">warning</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;Render methods should be a pure function of props and state; &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;triggering nested component updates from render is not allowed. &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;If necessary, trigger nested updates in componentDidUpdate.\\n\\n&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;Check the render method of %s.&#39;</span><span class="token punctuation">,</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span>ReactDebugCurrentFiber<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Caution: React DevTools currently depends on this property</span>
  <span class="token comment">// being called &quot;element&quot;.</span>
  update<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">element</span><span class="token operator">:</span> element <span class="token punctuation">}</span><span class="token punctuation">;</span>

  callback <span class="token operator">=</span> callback <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> callback<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">warning</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;render(...): Expected the last optional \`callback\` argument to be a &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;function. Instead received: %s.&#39;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
    update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> update<span class="token punctuation">,</span> expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">scheduleWork$1</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> expirationTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><code>ensureWorkInProgressQueueIsAClone</code>\u662F\u786E\u4FDD\u4E00\u4E0B<code>workInProgress</code>\u662F<code>current</code>\u7684\u4E00\u4E2A\u62F7\u8D1D\uFF0C\u786E\u4FDD\u4E0D\u5728<code>current</code>\u4E0A\u76F4\u63A5\u64CD\u4F5C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resetHydrationState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsHydration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  hydrationParentFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  nextHydratableInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  isHydrating <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u521D\u59CB\u5316\u4E00\u4E9B\u5168\u5C40\u53D8\u91CF\uFF0C\u5E94\u8BE5\u662F\u540E\u9762\u8FDB\u884C<code>hydrate</code>\u8981\u7528\u5230</p><p>\u6700\u540E<code>return</code>\u7684\u662F<code>child</code>\uFF0C\u5982\u679C\u6CA1\u6709<code>child</code>\u5C31\u5B8C\u6210\u5DE5\u4F5C\u4E86\uFF0C\u5982\u679C\u6709\u8BF4\u660E\u8FD8\u6CA1\u5B8C\u6210</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateHostRoot</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderExpirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pushHostRootContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> updateQueue <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>updateQueue<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>updateQueue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> nextProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
    <span class="token keyword">const</span> prevState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
    <span class="token keyword">const</span> prevChildren <span class="token operator">=</span> prevState <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> prevState<span class="token punctuation">.</span>element <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token function">processUpdateQueue</span><span class="token punctuation">(</span>
      workInProgress<span class="token punctuation">,</span>
      updateQueue<span class="token punctuation">,</span>
      nextProps<span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      renderExpirationTime<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> nextState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
    <span class="token comment">// Caution: React DevTools currently depends on this property</span>
    <span class="token comment">// being called &quot;element&quot;.</span>
    <span class="token keyword">const</span> nextChildren <span class="token operator">=</span> nextState<span class="token punctuation">.</span>element<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChildren <span class="token operator">===</span> prevChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// If the state is the same as before, that&#39;s a bailout because we had</span>
      <span class="token comment">// no work that expires at this time.</span>
      <span class="token function">resetHydrationState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> current<span class="token punctuation">.</span>child <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      root<span class="token punctuation">.</span>hydrate <span class="token operator">&amp;&amp;</span>
      <span class="token function">enterHydrationState</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">|=</span> Placement<span class="token punctuation">;</span>

      workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">mountChildFibers</span><span class="token punctuation">(</span>
        workInProgress<span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        nextChildren<span class="token punctuation">,</span>
        renderExpirationTime<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Otherwise reset hydration state in case we aborted and resumed another</span>
      <span class="token comment">// root.</span>
      <span class="token function">resetHydrationState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">resetHydrationState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// If there is no update queue, that&#39;s a bailout because the root has no props.</span>
  <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><blockquote><p><code>pushHostRootContext</code>\u76EE\u524D\u610F\u4E49\u4E0D\u660E\uFF0C\u5148\u653E\u7740\u540E\u9762\u770B\u770B\u6709\u6CA1\u6709\u7528\u5230\u7684\u5730\u65B9</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">pushHostRootContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">pushHostRootContext</span><span class="token punctuation">(</span><span class="token parameter">workInProgress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> root <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>pendingContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pushTopLevelContextObject</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> root<span class="token punctuation">.</span>pendingContext<span class="token punctuation">,</span> root<span class="token punctuation">.</span>pendingContext <span class="token operator">!==</span> root<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Should always be set</span>
    <span class="token function">pushTopLevelContextObject</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> root<span class="token punctuation">.</span>context<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">pushHostContainer</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> root<span class="token punctuation">.</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">pushTopLevelContextObject</span><span class="token punctuation">(</span><span class="token parameter">fiber<span class="token punctuation">,</span> context<span class="token punctuation">,</span> didChange</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">!</span><span class="token punctuation">(</span>contextStackCursor<span class="token punctuation">.</span>current <span class="token operator">===</span> emptyObject<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">push</span><span class="token punctuation">(</span>contextStackCursor<span class="token punctuation">,</span> context<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">push</span><span class="token punctuation">(</span>didPerformWorkStackCursor<span class="token punctuation">,</span> didChange<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">cursor<span class="token punctuation">,</span> value<span class="token punctuation">,</span> fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  index<span class="token operator">++</span><span class="token punctuation">;</span>

  valueStack<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token punctuation">.</span>current<span class="token punctuation">;</span>

  <span class="token punctuation">{</span>
    fiberStack<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> fiber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  cursor<span class="token punctuation">.</span>current <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">pushHostContainer</span><span class="token punctuation">(</span><span class="token parameter">fiber<span class="token punctuation">,</span> nextRootInstance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Push current root instance onto the stack;</span>
  <span class="token comment">// This allows us to reset root when portals are popped.</span>
  <span class="token function">push</span><span class="token punctuation">(</span>rootInstanceStackCursor<span class="token punctuation">,</span> nextRootInstance<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Track the context and the Fiber that provided it.</span>
  <span class="token comment">// This enables us to pop only Fibers that provide unique contexts.</span>
  <span class="token function">push</span><span class="token punctuation">(</span>contextFiberStackCursor<span class="token punctuation">,</span> fiber<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Finally, we need to push the host context to the stack.</span>
  <span class="token comment">// However, we can&#39;t just call getRootHostContext() and push it because</span>
  <span class="token comment">// we&#39;d have a different number of entries on the stack depending on</span>
  <span class="token comment">// whether getRootHostContext() throws somewhere in renderer code or not.</span>
  <span class="token comment">// So we push an empty value first. This lets us safely unwind on errors.</span>
  <span class="token function">push</span><span class="token punctuation">(</span>contextStackCursor$1<span class="token punctuation">,</span> <span class="token constant">NO_CONTEXT</span><span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> nextRootContext <span class="token operator">=</span> <span class="token function">getRootHostContext</span><span class="token punctuation">(</span>nextRootInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Now that we know this function doesn&#39;t throw, replace it.</span>
  <span class="token function">pop</span><span class="token punctuation">(</span>contextStackCursor$1<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">push</span><span class="token punctuation">(</span>contextStackCursor$1<span class="token punctuation">,</span> nextRootContext<span class="token punctuation">,</span> fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h1 id="processupdatequeue" tabindex="-1"><a class="header-anchor" href="#processupdatequeue" aria-hidden="true">#</a> processUpdateQueue</h1><p><code>getStateFromUpdate</code>\u4ECE<code>update</code>\u5BF9\u8C61\u4E0A\u83B7\u53D6\u6700\u65B0\u7684<code>state</code></p><p>\u5982\u679C\u6709callback\u5219\u8BBE\u7F6E<code>workInProgress.effectTag |= Callback</code>\uFF0C<code>Callback</code>\u662F\u4E2A\u5E38\u6570\uFF0C\u7B49\u4E8E32\uFF0C\u8DDF\u76EE\u524D\u7684<code>effectTag</code>\u8FDB\u884C\u6216\u8FD0\u7B97\u5F97\u5230\u65B0\u7684\u7ED3\u679C\u3002\u7136\u540E\u8BBE\u7F6E<code>queue</code>\u7684<code>effect</code>\u94FE</p><blockquote><p><strong>\u731C\u60F3</strong>\uFF1A\u5982\u679C\u6CA1\u6709callback\u4EE3\u8868\u6CA1\u6709<code>effect</code></p></blockquote><p>\u4E4B\u540E\u5FAA\u73AF<code>capturedUpdate</code>\uFF0C\u4E0D\u592A\u6E05\u695A\u8FD9\u4E2A<code>update</code>\u662F\u5E72\u561B\u7684</p><p>TODO: \u4EC0\u4E48\u662F<code>capturedUpdate</code></p><p>\u8FD9\u4E2A\u65B9\u6CD5\u7684\u4E3B\u8981\u4F5C\u7528\u662F\u5904\u7406<code>updateQueue</code>\u91CC\u9762\u7684<code>update</code>\uFF0C\u6267\u884C\u5E76\u83B7\u5F97\u6700\u65B0\u7684state\uFF0C\u6700\u540E\u83B7\u53D6<code>effect</code>\u653E\u7F6E\u5230<code>Fiber</code>\u5BF9\u8C61\u4E0A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> _callback <span class="token operator">=</span> update<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>_callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">|=</span> Callback<span class="token punctuation">;</span>
  <span class="token comment">// Set this to null, in case it was mutated during an aborted render.</span>
  update<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>lastEffect <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> queue<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> update<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    queue<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> update<span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> update<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Separately, iterate though the list of captured updates.</span>
<span class="token keyword">var</span> newFirstCapturedUpdate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
update <span class="token operator">=</span> queue<span class="token punctuation">.</span>firstCapturedUpdate<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>update <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _updateExpirationTime <span class="token operator">=</span> update<span class="token punctuation">.</span>expirationTime<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_updateExpirationTime <span class="token operator">&gt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// This update does not have sufficient priority. Skip it.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newFirstCapturedUpdate <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This is the first skipped captured update. It will be the first</span>
        <span class="token comment">// update in the new list.</span>
        newFirstCapturedUpdate <span class="token operator">=</span> update<span class="token punctuation">;</span>
        <span class="token comment">// If this is the first update that was skipped, the current result is</span>
        <span class="token comment">// the new base state.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newFirstUpdate <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          newBaseState <span class="token operator">=</span> resultState<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// Since this update will remain in the list, update the remaining</span>
      <span class="token comment">// expiration time.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newExpirationTime <span class="token operator">===</span> NoWork <span class="token operator">||</span> newExpirationTime <span class="token operator">&gt;</span> _updateExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newExpirationTime <span class="token operator">=</span> _updateExpirationTime<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// This update does have sufficient priority. Process it and compute</span>
      <span class="token comment">// a new result.</span>
      resultState <span class="token operator">=</span> <span class="token function">getStateFromUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> update<span class="token punctuation">,</span> resultState<span class="token punctuation">,</span> props<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> _callback2 <span class="token operator">=</span> update<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_callback2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">|=</span> Callback<span class="token punctuation">;</span>
        <span class="token comment">// Set this to null, in case it was mutated during an aborted render.</span>
        update<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>lastCapturedEffect <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          queue<span class="token punctuation">.</span>firstCapturedEffect <span class="token operator">=</span> queue<span class="token punctuation">.</span>lastCapturedEffect <span class="token operator">=</span> update<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          queue<span class="token punctuation">.</span>lastCapturedEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> update<span class="token punctuation">;</span>
          queue<span class="token punctuation">.</span>lastCapturedEffect <span class="token operator">=</span> update<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    update <span class="token operator">=</span> update<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div>`,19);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
