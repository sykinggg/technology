import{a as n}from"./app.6f963528.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="codegen" tabindex="-1"><a class="header-anchor" href="#codegen" aria-hidden="true">#</a> codegen</h1><p>\u7F16\u8BD1\u7684\u6700\u540E\u4E00\u6B65\u5C31\u662F\u628A\u4F18\u5316\u540E\u7684 AST \u6811\u8F6C\u6362\u6210\u53EF\u6267\u884C\u7684\u4EE3\u7801\uFF0C\u8FD9\u90E8\u5206\u5185\u5BB9\u4E5F\u6BD4\u8F83\u591A\uFF0C\u5E76\u4E0D\u6253\u7B97\u628A\u6240\u6709\u7684\u7EC6\u8282\u90FD\u8BB2\u4E86\uFF0C\u4E86\u89E3\u6574\u4F53\u6D41\u7A0B\u5373\u53EF\u3002\u90E8\u5206\u7EC6\u8282\u4F1A\u5728\u4E4B\u540E\u7684\u7AE0\u8282\u914D\u5408\u4E00\u4E2A\u5177\u4F53 case \u53BB\u8BE6\u7EC6\u8BB2\u3002</p><p>\u4E3A\u4E86\u65B9\u4FBF\u7406\u89E3\uFF0C\u8FD8\u662F\u7528\u4E4B\u524D\u7684\u4F8B\u5B50\uFF1A</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bindCls<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,index) in data<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clickItem(index)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}:{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5B83\u7ECF\u8FC7\u7F16\u8BD1\uFF0C\u6267\u884C <code>const code = generate(ast, options)</code>\uFF0C\u751F\u6210\u7684 <code>render</code> \u4EE3\u7801\u4E32\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span>
    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">staticClass</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">class</span><span class="token operator">:</span> bindCls
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;click&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">clickItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token function">_s</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>\u8FD9\u91CC\u7684 <code>_c</code> \u51FD\u6570\u5B9A\u4E49\u5728 <code>src/core/instance/render.js</code> \u4E2D\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>vm<span class="token punctuation">.</span><span class="token function-variable function">_c</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createElement</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u800C <code>_l</code>\u3001<code>_v</code> \u5B9A\u4E49\u5728 <code>src/core/instance/render-helpers/index.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">installRenderHelpers</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span>_o <span class="token operator">=</span> markOnce
  target<span class="token punctuation">.</span>_n <span class="token operator">=</span> toNumber
  target<span class="token punctuation">.</span>_s <span class="token operator">=</span> toString
  target<span class="token punctuation">.</span>_l <span class="token operator">=</span> renderList
  target<span class="token punctuation">.</span>_t <span class="token operator">=</span> renderSlot
  target<span class="token punctuation">.</span>_q <span class="token operator">=</span> looseEqual
  target<span class="token punctuation">.</span>_i <span class="token operator">=</span> looseIndexOf
  target<span class="token punctuation">.</span>_m <span class="token operator">=</span> renderStatic
  target<span class="token punctuation">.</span>_f <span class="token operator">=</span> resolveFilter
  target<span class="token punctuation">.</span>_k <span class="token operator">=</span> checkKeyCodes
  target<span class="token punctuation">.</span>_b <span class="token operator">=</span> bindObjectProps
  target<span class="token punctuation">.</span>_v <span class="token operator">=</span> createTextVNode
  target<span class="token punctuation">.</span>_e <span class="token operator">=</span> createEmptyVNode
  target<span class="token punctuation">.</span>_u <span class="token operator">=</span> resolveScopedSlots
  target<span class="token punctuation">.</span>_g <span class="token operator">=</span> bindObjectListeners
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u987E\u540D\u601D\u4E49\uFF0C<code>_c</code> \u5C31\u662F\u6267\u884C <code>createElement</code> \u53BB\u521B\u5EFA VNode\uFF0C\u800C <code>_l</code> \u5BF9\u5E94 <code>renderList</code> \u6E32\u67D3\u5217\u8868\uFF1B<code>_v</code> \u5BF9\u5E94 <code>createTextVNode</code> \u521B\u5EFA\u6587\u672C VNode\uFF1B<code>_e</code> \u5BF9\u4E8E <code>createEmptyVNode</code>\u521B\u5EFA\u7A7A\u7684 VNode\u3002</p><p>\u5728 <code>compileToFunctions</code> \u4E2D\uFF0C\u4F1A\u628A\u8FD9\u4E2A <code>render</code> \u4EE3\u7801\u4E32\u8F6C\u6362\u6210\u51FD\u6570\uFF0C\u5B83\u7684\u5B9A\u4E49\u5728 <code>src/compler/to-function.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
res<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>render<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">createFunction</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> errors</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err<span class="token punctuation">,</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> noop
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u5B9E\u9645\u4E0A\u5C31\u662F\u628A <code>render</code> \u4EE3\u7801\u4E32\u901A\u8FC7 <code>new Function</code> \u7684\u65B9\u5F0F\u8F6C\u6362\u6210\u53EF\u6267\u884C\u7684\u51FD\u6570\uFF0C\u8D4B\u503C\u7ED9 <code>vm.options.render</code>\uFF0C\u8FD9\u6837\u5F53\u7EC4\u4EF6\u901A\u8FC7 <code>vm._render</code> \u7684\u65F6\u5019\uFF0C\u5C31\u4F1A\u6267\u884C\u8FD9\u4E2A <code>render</code> \u51FD\u6570\u3002\u90A3\u4E48\u63A5\u4E0B\u6765\u5C31\u91CD\u70B9\u5173\u6CE8\u4E00\u4E0B\u8FD9\u4E2A <code>render</code> \u4EE3\u7801\u4E32\u7684\u751F\u6210\u8FC7\u7A0B\u3002</p><h2 id="generate" tabindex="-1"><a class="header-anchor" href="#generate" aria-hidden="true">#</a> generate</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>generate</code> \u51FD\u6570\u7684\u5B9A\u4E49\u5728 <code>src/compiler/codegen/index.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">ast</span><span class="token operator">:</span> ASTElement <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> CompilerOptions</span>
<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodegenState</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
  <span class="token keyword">const</span> code <span class="token operator">=</span> ast <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;_c(&quot;div&quot;)&#39;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">with(this){return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">staticRenderFns</span><span class="token operator">:</span> state<span class="token punctuation">.</span>staticRenderFns
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>generate</code> \u51FD\u6570\u9996\u5148\u901A\u8FC7 <code>genElement(ast, state)</code> \u751F\u6210 <code>code</code>\uFF0C\u518D\u628A <code>code</code> \u7528 <code>with(this){return \${code}}}</code> \u5305\u88F9\u8D77\u6765\u3002\u8FD9\u91CC\u7684 <code>state</code> \u662F <code>CodegenState</code> \u7684\u4E00\u4E2A\u5B9E\u4F8B\uFF0C\u7A0D\u540E\u5728\u7528\u5230\u5B83\u7684\u65F6\u5019\u4F1A\u4ECB\u7ECD\u5B83\u3002\u5148\u6765\u770B\u4E00\u4E0B <code>genElement</code>\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genElement</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> ASTElement<span class="token punctuation">,</span> <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>staticProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genStatic</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>once <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>onceProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>forProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genFor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>ifProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genIf</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;void 0&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genSlot</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// component or element</span>
    <span class="token keyword">let</span> code
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">=</span> <span class="token function">genComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">,</span> el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> el<span class="token punctuation">.</span>plain <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token function">genData</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>

      <span class="token keyword">const</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_c(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
        data <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// data</span>
      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
        children <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// children</span>
      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
    <span class="token comment">// module transforms</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      code <span class="token operator">=</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> code<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> code
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>\u57FA\u672C\u5C31\u662F\u5224\u65AD\u5F53\u524D AST \u5143\u7D20\u8282\u70B9\u7684\u5C5E\u6027\u6267\u884C\u4E0D\u540C\u7684\u4EE3\u7801\u751F\u6210\u51FD\u6570\uFF0C\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C\u5148\u4E86\u89E3\u4E00\u4E0B <code>genFor</code> \u548C <code>genIf</code>\u3002</p><h2 id="genif" tabindex="-1"><a class="header-anchor" href="#genif" aria-hidden="true">#</a> <code>genIf</code></h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genIf</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState<span class="token punctuation">,</span>
  altGen<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  altEmpty<span class="token operator">?</span><span class="token operator">:</span> string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  el<span class="token punctuation">.</span>ifProcessed <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// avoid recursion</span>
  <span class="token keyword">return</span> <span class="token function">genIfConditions</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> altGen<span class="token punctuation">,</span> altEmpty<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genIfConditions</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">conditions</span><span class="token operator">:</span> ASTIfConditions<span class="token punctuation">,</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState<span class="token punctuation">,</span>
  altGen<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  altEmpty<span class="token operator">?</span><span class="token operator">:</span> string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conditions<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> altEmpty <span class="token operator">||</span> <span class="token string">&#39;_e()&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> condition <span class="token operator">=</span> conditions<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>condition<span class="token punctuation">.</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      <span class="token function">genTernaryExp</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span>block<span class="token punctuation">)</span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      <span class="token function">genIfConditions</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> state<span class="token punctuation">,</span> altGen<span class="token punctuation">,</span> altEmpty<span class="token punctuation">)</span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genTernaryExp</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span>block<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>

  <span class="token comment">// v-if with v-once should generate code like (a)?_m(0):_m(1)</span>
  <span class="token keyword">function</span> <span class="token function">genTernaryExp</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> altGen
      <span class="token operator">?</span> <span class="token function">altGen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
      <span class="token operator">:</span> el<span class="token punctuation">.</span>once
        <span class="token operator">?</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p><code>genIf</code> \u4E3B\u8981\u662F\u901A\u8FC7\u6267\u884C <code>genIfConditions</code>\uFF0C\u5B83\u662F\u4F9D\u6B21\u4ECE <code>conditions</code> \u83B7\u53D6\u7B2C\u4E00\u4E2A <code>condition</code>\uFF0C\u7136\u540E\u901A\u8FC7\u5BF9 <code>condition.exp</code> \u53BB\u751F\u6210\u4E00\u6BB5\u4E09\u5143\u8FD0\u7B97\u7B26\u7684\u4EE3\u7801\uFF0C<code>:</code> \u540E\u662F\u9012\u5F52\u8C03\u7528 <code>genIfConditions</code>\uFF0C\u8FD9\u6837\u5982\u679C\u6709\u591A\u4E2A <code>conditions</code>\uFF0C\u5C31\u751F\u6210\u591A\u5C42\u4E09\u5143\u8FD0\u7B97\u903B\u8F91\u3002\u8FD9\u91CC\u6682\u65F6\u4E0D\u8003\u8651 <code>v-once</code> \u7684\u60C5\u51B5\uFF0C\u6240\u4EE5 <code>genTernaryExp</code> \u6700\u7EC8\u662F\u8C03\u7528\u4E86 <code>genElement</code>\u3002</p><p>\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C\u53EA\u6709\u4E00\u4E2A <code>condition</code>\uFF0C<code>exp</code> \u4E3A <code>isShow</code>\uFF0C\u56E0\u6B64\u751F\u6210\u5982\u4E0B\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="genfor" tabindex="-1"><a class="header-anchor" href="#genfor" aria-hidden="true">#</a> <code>genFor</code></h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genFor</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState<span class="token punctuation">,</span>
  altGen<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  altHelper<span class="token operator">?</span><span class="token operator">:</span> string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">const</span> exp <span class="token operator">=</span> el<span class="token punctuation">.</span>for
  <span class="token keyword">const</span> alias <span class="token operator">=</span> el<span class="token punctuation">.</span>alias
  <span class="token keyword">const</span> iterator1 <span class="token operator">=</span> el<span class="token punctuation">.</span>iterator1 <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>iterator1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">const</span> iterator2 <span class="token operator">=</span> el<span class="token punctuation">.</span>iterator2 <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>iterator2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span>
    state<span class="token punctuation">.</span><span class="token function">maybeComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;slot&#39;</span> <span class="token operator">&amp;&amp;</span>
    el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;template&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>el<span class="token punctuation">.</span>key
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> v-for=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>alias<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;: component lists rendered with </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-for should have explicit keys. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">See https://vuejs.org/guide/list.html#key for more info.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token boolean">true</span> <span class="token comment">/* tip */</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  el<span class="token punctuation">.</span>forProcessed <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// avoid recursion</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>altHelper <span class="token operator">||</span> <span class="token string">&#39;_l&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">((</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">),</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>alias<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>iterator1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>iterator2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">){</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span>altGen <span class="token operator">||</span> genElement<span class="token punctuation">)</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
    <span class="token string">&#39;})&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><code>genFor</code> \u7684\u903B\u8F91\u5F88\u7B80\u5355\uFF0C\u9996\u5148 AST \u5143\u7D20\u8282\u70B9\u4E2D\u83B7\u53D6\u4E86\u548C <code>for</code> \u76F8\u5173\u7684\u4E00\u4E9B\u5C5E\u6027\uFF0C\u7136\u540E\u8FD4\u56DE\u4E86\u4E00\u4E2A\u4EE3\u7801\u5B57\u7B26\u4E32\u3002</p><p>\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C<code>exp</code> \u662F <code>data</code>\uFF0C<code>alias</code> \u662F <code>item</code>\uFF0C<code>iterator1</code> \uFF0C\u56E0\u6B64\u751F\u6210\u5982\u4E0B\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">genElememt</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="gendata-genchildren" tabindex="-1"><a class="header-anchor" href="#gendata-genchildren" aria-hidden="true">#</a> <code>genData</code> &amp; <code>genChildren</code></h2><p>\u518D\u6B21\u56DE\u987E\u7684\u4F8B\u5B50\uFF0C\u5B83\u7684\u6700\u5916\u5C42\u662F <code>ul</code>\uFF0C\u9996\u5148\u6267\u884C <code>genIf</code>\uFF0C\u5B83\u6700\u7EC8\u8C03\u7528\u4E86 <code>genElement(el, state)</code> \u53BB\u751F\u6210\u5B50\u8282\u70B9\uFF0C\u6CE8\u610F\uFF0C\u8FD9\u91CC\u7684 <code>el</code> \u4ECD\u7136\u6307\u5411\u7684\u662F <code>ul</code> \u5BF9\u5E94\u7684 AST \u8282\u70B9\uFF0C\u4F46\u662F\u6B64\u65F6\u7684 <code>el.ifProcessed</code> \u4E3A true\uFF0C\u6240\u4EE5\u547D\u4E2D\u6700\u540E\u4E00\u4E2A else \u903B\u8F91\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// component or element</span>
<span class="token keyword">let</span> code
<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  code <span class="token operator">=</span> <span class="token function">genComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">,</span> el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> el<span class="token punctuation">.</span>plain <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token function">genData</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>

  <span class="token keyword">const</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_c(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
    data <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// data</span>
  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
    children <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// children</span>
  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
<span class="token comment">// module transforms</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  code <span class="token operator">=</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> code<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> code
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>\u8FD9\u91CC\u53EA\u5173\u6CE8 2 \u4E2A\u903B\u8F91\uFF0C<code>genData</code> \u548C <code>genChildren</code>\uFF1A</p><ul><li>genData</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genData</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> ASTElement<span class="token punctuation">,</span> <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;{&#39;</span>

  <span class="token comment">// directives first.</span>
  <span class="token comment">// directives may mutate the el&#39;s other properties before they are generated.</span>
  <span class="token keyword">const</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> data <span class="token operator">+=</span> dirs <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span>

  <span class="token comment">// key</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ref</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ref:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>ref<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>refInFor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">refInFor:true,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// pre</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pre:true,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// record original tag name for components using &quot;is&quot; attribute</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">tag:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// module data generation functions</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// attributes</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">attrs:{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// DOM props</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">domProps:{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// event handlers</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// slot target</span>
  <span class="token comment">// only for non-scoped slots</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>slotTarget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">slot:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>slotTarget<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// scoped slots</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genScopedSlots</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// component v-model</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">model:{value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,callback:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>callback
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,expression:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>expression
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token comment">// inline-template</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>inlineTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> inlineTemplate <span class="token operator">=</span> <span class="token function">genInlineTemplate</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inlineTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>inlineTemplate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;}&#39;</span>
  <span class="token comment">// v-bind data wrap</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>wrapData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">wrapData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// v-on data wrap</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>wrapListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">wrapListeners</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br></div></div><p><code>genData</code> \u51FD\u6570\u5C31\u662F\u6839\u636E AST \u5143\u7D20\u8282\u70B9\u7684\u5C5E\u6027\u6784\u9020\u51FA\u4E00\u4E2A <code>data</code> \u5BF9\u8C61\u5B57\u7B26\u4E32\uFF0C\u8FD9\u4E2A\u5728\u540E\u9762\u521B\u5EFA VNode \u7684\u65F6\u5019\u7684\u65F6\u5019\u4F1A\u4F5C\u4E3A\u53C2\u6570\u4F20\u5165\u3002</p><p>\u4E4B\u524D\u63D0\u5230\u4E86 <code>CodegenState</code> \u7684\u5B9E\u4F8B <code>state</code>\uFF0C\u8FD9\u91CC\u6709\u4E00\u6BB5\u5173\u4E8E <code>state</code> \u7684\u903B\u8F91\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data <span class="token operator">+=</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>state.dataGenFns</code> \u7684\u521D\u59CB\u5316\u5728\u5B83\u7684\u6784\u9020\u5668\u4E2D\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CodegenState</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">options</span><span class="token operator">:</span> CompilerOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataGenFns <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">&#39;genData&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u5B9E\u9645\u4E0A\u5C31\u662F\u83B7\u53D6\u6240\u6709 <code>modules</code> \u4E2D\u7684 <code>genData</code> \u51FD\u6570\uFF0C\u5176\u4E2D\uFF0C<code>class module</code> \u548C <code>style module</code> \u5B9A\u4E49\u4E86 <code>genData</code> \u51FD\u6570\u3002\u6BD4\u5982\u5B9A\u4E49\u5728 <code>src/platforms/web/compiler/modules/class.js</code> \u4E2D\u7684 <code>genData</code> \u65B9\u6CD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genData</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> ASTElement</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">staticClass:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>staticClass<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>classBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">class:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>el<span class="token punctuation">.</span>classBinding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C<code>ul</code> AST \u5143\u7D20\u8282\u70B9\u5B9A\u4E49\u4E86 <code>el.staticClass</code> \u548C <code>el.classBinding</code>\uFF0C\u56E0\u6B64\u6700\u7EC8\u751F\u6210\u7684 <code>data</code> \u5B57\u7B26\u4E32\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">staticClass</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">class</span><span class="token operator">:</span> bindCls
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>genChildren</li></ul><p>\u63A5\u4E0B\u6765\u518D\u6765\u770B\u4E00\u4E0B <code>genChildren</code>\uFF0C\u5B83\u7684\u5B9A\u4E49\u5728 <code>src/compiler/codegen/index.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genChildren</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> ASTElement<span class="token punctuation">,</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState<span class="token punctuation">,</span>
  checkSkip<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  altGenElement<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  altGenNode<span class="token operator">?</span><span class="token operator">:</span> Function</span>
<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>children
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token literal-property property">el</span><span class="token operator">:</span> any <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
      el<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span>
      el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;template&#39;</span> <span class="token operator">&amp;&amp;</span>
      el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;slot&#39;</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>altGenElement <span class="token operator">||</span> genElement<span class="token punctuation">)</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> normalizationType <span class="token operator">=</span> checkSkip
      <span class="token operator">?</span> <span class="token function">getNormalizationType</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> state<span class="token punctuation">.</span>maybeComponent<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token number">0</span>
    <span class="token keyword">const</span> gen <span class="token operator">=</span> altGenNode <span class="token operator">||</span> genNode
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token function">gen</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      normalizationType <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>normalizationType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C<code>li</code> AST \u5143\u7D20\u8282\u70B9\u662F <code>ul</code> AST \u5143\u7D20\u8282\u70B9\u7684 <code>children</code> \u4E4B\u4E00\uFF0C\u6EE1\u8DB3 <code>(children.length === 1 &amp;&amp; el.for &amp;&amp; el.tag !== &#39;template&#39; &amp;&amp; el.tag !== &#39;slot&#39;)</code> \u6761\u4EF6\uFF0C\u56E0\u6B64\u901A\u8FC7 <code>genElement(el, state)</code> \u751F\u6210 <code>li</code> AST\u5143\u7D20\u8282\u70B9\u7684\u4EE3\u7801\uFF0C\u4E5F\u5C31\u56DE\u5230\u4E86\u4E4B\u524D\u8C03\u7528 <code>genFor</code> \u751F\u6210\u7684\u4EE3\u7801\uFF0C\u628A\u5B83\u4EEC\u62FC\u5728\u4E00\u8D77\u751F\u6210\u7684\u4F2A\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span>
    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">staticClass</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">class</span><span class="token operator">:</span> bindCls
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">genElememt</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C\u5728\u6267\u884C <code>genElememt(el, state)</code> \u7684\u65F6\u5019\uFF0C<code>el</code> \u8FD8\u662F <code>li</code> AST \u5143\u7D20\u8282\u70B9\uFF0C<code>el.forProcessed</code> \u5DF2\u4E3A true\uFF0C\u6240\u4EE5\u4F1A\u7EE7\u7EED\u6267\u884C <code>genData</code> \u548C <code>genChildren</code> \u7684\u903B\u8F91\u3002\u7531\u4E8E <code>el.events</code> \u4E0D\u4E3A\u7A7A\uFF0C\u5728\u6267\u884C <code>genData</code> \u7684\u65F6\u5019\uFF0C\u4F1A\u6267\u884C \u5982\u4E0B\u903B\u8F91\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>genHandlers</code> \u7684\u5B9A\u4E49\u5728 <code>src/compiler/codegen/events.js</code> \u4E2D\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genHandlers</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">events</span><span class="token operator">:</span> ASTElementHandlers<span class="token punctuation">,</span>
  <span class="token literal-property property">isNative</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">warn</span><span class="token operator">:</span> Function</span>
<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> isNative <span class="token operator">?</span> <span class="token string">&#39;nativeOn:{&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;on:{&#39;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">genHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;}&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>genHandler</code> \u7684\u903B\u8F91\u5C31\u4E0D\u4ECB\u7ECD\u4E86\uFF0C\u5F88\u5927\u90E8\u5206\u90FD\u662F\u5BF9\u4FEE\u9970\u7B26 <code>modifier</code> \u7684\u5904\u7406\uFF0C\u611F\u5174\u8DA3\u540C\u5B66\u53EF\u4EE5\u81EA\u5DF1\u770B\uFF0C\u5BF9\u4E8E\u7684\u4F8B\u5B50\uFF0C\u5B83\u6700\u7EC8 <code>genData</code> \u751F\u6210\u7684 <code>data</code> \u5B57\u7B26\u4E32\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;click&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clickItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>genChildren</code> \u7684\u65F6\u5019\uFF0C\u4F1A\u6267\u884C\u5230\u5982\u4E0B\u903B\u8F91\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genChildren</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> ASTElement<span class="token punctuation">,</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState<span class="token punctuation">,</span>
  checkSkip<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  altGenElement<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  altGenNode<span class="token operator">?</span><span class="token operator">:</span> Function</span>
<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> normalizationType <span class="token operator">=</span> checkSkip
    <span class="token operator">?</span> <span class="token function">getNormalizationType</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> state<span class="token punctuation">.</span>maybeComponent<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token number">0</span>
  <span class="token keyword">const</span> gen <span class="token operator">=</span> altGenNode <span class="token operator">||</span> genNode
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token function">gen</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
    normalizationType <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>normalizationType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genNode</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> ASTNode<span class="token punctuation">,</span> <span class="token literal-property property">state</span><span class="token operator">:</span> CodegenState</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genElement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>isComment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genComment</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><code>genChildren</code> \u7684\u5C31\u662F\u904D\u5386 <code>children</code>\uFF0C\u7136\u540E\u6267\u884C <code>genNode</code> \u65B9\u6CD5\uFF0C\u6839\u636E\u4E0D\u540C\u7684 <code>type</code> \u6267\u884C\u5177\u4F53\u7684\u65B9\u6CD5\u3002\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C<code>li</code> AST \u5143\u7D20\u8282\u70B9\u7684 <code>children</code> \u662F type \u4E3A 2 \u7684\u8868\u8FBE\u5F0F AST \u5143\u7D20\u8282\u70B9\uFF0C\u90A3\u4E48\u4F1A\u6267\u884C\u5230 <code>genText(node)</code> \u903B\u8F91\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genText</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">text</span><span class="token operator">:</span> ASTText <span class="token operator">|</span> ASTExpression</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_v(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>text<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span>
    <span class="token operator">?</span> text<span class="token punctuation">.</span>expression
    <span class="token operator">:</span> <span class="token function">transformSpecialNewlines</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u56E0\u6B64\u5728\u7684\u4F8B\u5B50\u4E2D\uFF0C<code>genChildren</code> \u751F\u6210\u7684\u4EE3\u7801\u4E32\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token function">_s</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u548C\u4E4B\u524D\u62FC\u5728\u4E00\u8D77\uFF0C\u6700\u7EC8\u751F\u6210\u7684 <code>code</code> \u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span>
    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">staticClass</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">class</span><span class="token operator">:</span> bindCls
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;click&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">clickItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token function">_s</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u8FD9\u4E00\u8282\u901A\u8FC7\u4F8B\u5B50\u914D\u5408\u89E3\u6790\uFF0C\u5BF9\u4ECE <code>ast -&gt; code </code> \u8FD9\u4E00\u6B65\u6709\u4E86\u4E00\u4E9B\u4E86\u89E3\uFF0C\u7F16\u8BD1\u540E\u751F\u6210\u7684\u4EE3\u7801\u5C31\u662F\u5728\u8FD0\u884C\u65F6\u6267\u884C\u7684\u4EE3\u7801\u3002\u7531\u4E8E <code>genCode</code> \u7684\u5185\u5BB9\u6709\u5F88\u591A\uFF0C\u6240\u4EE5\u5BF9\u5927\u5BB6\u7684\u5EFA\u8BAE\u662F\u6CA1\u5FC5\u8981\u628A\u6240\u6709\u7684\u7EC6\u8282\u90FD\u4E00\u6B21\u6027\u770B\u5B8C\uFF0C\u5E94\u8BE5\u6839\u636E\u5177\u4F53\u4E00\u4E2A case\uFF0C\u8D70\u5B8C\u4E00\u6761\u4E3B\u7EBF\u5373\u53EF\u3002</p><p>\u5728\u4E4B\u540E\u7684\u7AE0\u8282\u4F1A\u5BF9 <code>slot</code> \u7684\u5B9E\u73B0\u505A\u89E3\u6790\uFF0C\u4F1A\u91CD\u65B0\u590D\u4E60\u7F16\u8BD1\u7684\u7AE0\u8282\uFF0C\u9488\u5BF9\u5177\u4F53\u95EE\u9898\u505A\u5177\u4F53\u5206\u6790\uFF0C\u6709\u5229\u4E8E\u6392\u9664\u5E72\u6270\uFF0C\u5BF9\u7F16\u8BD1\u8FC7\u7A0B\u7684\u5B66\u4E60\u6709\u66F4\u6DF1\u5165\u7684\u7406\u89E3\u3002</p>`,68);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
